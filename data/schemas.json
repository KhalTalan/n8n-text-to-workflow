{
  "Example": {
    "name": "Example",
    "displayName": "Example",
    "type": "n8n-nodes-base.Example",
    "subtitle": null,
    "description": "Basic Example Node",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionType.Main",
    "outputs": "NodeConnectionType.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "example",
        "displayName": "Example"
      },
      {
        "name": "myString",
        "displayName": "My String",
        "type": "string",
        "default": "",
        "placeholder": "Placeholder value"
      }
    ],
    "version": 1.0
  },
  "GithubIssues": {
    "name": "GithubIssues",
    "displayName": "GithubIssues",
    "type": "n8n-nodes-base.GithubIssues",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume issues from the GitHub API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionType.Main",
    "outputs": "NodeConnectionType.Main",
    "credentials": "{ name: 'githubIssuesApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "githubIssues",
        "displayName": "GitHub Issues"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ModelSelector": {
    "name": "ModelSelector",
    "displayName": "ModelSelector",
    "type": "n8n-nodes-base.ModelSelector",
    "subtitle": null,
    "description": "Use this node to select one of the connected models to this node based on workflow data",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "modelSelector",
        "displayName": "Model Selector"
      },
      {
        "name": "rules",
        "displayName": "Rules",
        "type": "fixedCollection",
        "placeholder": "Add Rule"
      },
      {
        "name": "rule",
        "displayName": "Rule",
        "type": "options",
        "default": "1",
        "required": true,
        "placeholder": "Choose model input from the list"
      },
      {
        "name": "conditions",
        "displayName": "Conditions",
        "type": "filter",
        "placeholder": "Add Condition"
      }
    ],
    "version": 1.0
  },
  "ToolExecutor": {
    "name": "ToolExecutor",
    "displayName": "ToolExecutor",
    "type": "n8n-nodes-base.ToolExecutor",
    "subtitle": null,
    "description": "Parameters to pass to the tool as JSON or string",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main, NodeConnectionTypes.AiTool",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "toolExecutor",
        "displayName": "Tool Executor"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "json"
      },
      {
        "name": "toolName",
        "displayName": "Tool Name",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Agent": {
    "name": "agent",
    "displayName": "AI Agent",
    "type": "n8n-nodes-base.Agent",
    "subtitle": null,
    "description": "Generates an action plan and executes it. Can use external tools.",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.2,
    "availableVersions": [
      1.0,
      1.1,
      1.2,
      1.3,
      1.4,
      1.5,
      1.6,
      1.7,
      1.8,
      1.9,
      2.0,
      2.1,
      2.2
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "agent",
        "displayName": "AI Agent"
      },
      {
        "name": "aiAgentStarterCallout",
        "displayName": "Tip: Get a feel for agents with our quick <a href=\"https://docs.n8n.io/advanced-ai/intro-tutorial/\" target=\"_blank\">tutorial</a> or see an <a href=\"/templates/1954\" target=\"_blank\">example</a> of how this node works",
        "type": "callout",
        "default": ""
      },
      {
        "name": "preBuiltAgentsCallout",
        "displayName": "Get started faster with our",
        "type": "callout"
      },
      {
        "name": "deprecated",
        "displayName": "This node is using Agent that has been deprecated. Please switch to using 'Tools Agent' instead.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "notice",
        "displayName": "For more reliable structured output parsing, consider using the Tools agent",
        "type": "notice",
        "default": ""
      },
      {
        "name": "hasOutputParser",
        "displayName": "Require Specific Output Format",
        "type": "boolean"
      },
      {
        "name": "needsFallback",
        "displayName": "Enable Fallback Model",
        "type": "boolean"
      },
      {
        "name": "fallbackNotice",
        "displayName": "Connect an additional language model on the canvas to use it as a fallback if the main model fails",
        "type": "notice",
        "default": ""
      }
    ]
  },
  "AgentTool": {
    "name": "agentTool",
    "displayName": "AI Agent Tool",
    "type": "n8n-nodes-base.AgentTool",
    "subtitle": null,
    "description": "Generates an action plan and executes it. Can use external tools.",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.2,
    "availableVersions": [
      2.2
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "agentTool",
        "displayName": "AI Agent Tool"
      },
      {
        "name": "hasOutputParser",
        "displayName": "Require Specific Output Format",
        "type": "boolean"
      },
      {
        "name": "needsFallback",
        "displayName": "Enable Fallback Model",
        "type": "boolean"
      },
      {
        "name": "fallbackNotice",
        "displayName": "Connect an additional language model on the canvas to use it as a fallback if the main model fails",
        "type": "notice",
        "default": ""
      }
    ]
  },
  "OpenAiAssistant": {
    "name": "OpenAiAssistant",
    "displayName": "OpenAiAssistant",
    "type": "n8n-nodes-base.OpenAiAssistant",
    "subtitle": "Open AI Assistant",
    "description": "Utilizes Assistant API from Open AI.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ type: NodeConnectionTypes.Main }, { type: NodeConnectionTypes.AiTool, displayName: 'Tools' },",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'openAiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "openAiAssistant",
        "displayName": "OpenAI Assistant"
      },
      {
        "name": "mode",
        "displayName": "Operation",
        "type": "options",
        "default": "existing"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "instructions",
        "displayName": "Instructions",
        "type": "string",
        "default": ""
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options",
        "required": true
      },
      {
        "name": "assistantId",
        "displayName": "Assistant",
        "type": "options"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "required": true
      },
      {
        "name": "nativeTools",
        "displayName": "OpenAI Tools",
        "type": "multiOptions"
      },
      {
        "name": "noticeTools",
        "displayName": "Connect your own custom tools to this node on the canvas",
        "type": "notice",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "baseURL",
        "displayName": "Base URL",
        "type": "string",
        "default": "https://api.openai.com/v1"
      },
      {
        "name": "maxRetries",
        "displayName": "Max Retries",
        "type": "number",
        "default": "2"
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "default": "10000"
      }
    ]
  },
  "AgentV1": {
    "name": "AgentV1",
    "displayName": "AgentV1",
    "type": "n8n-nodes-base.AgentV1",
    "subtitle": null,
    "description": "Utilizes structured tool schemas for precise and reliable tool selection and execution. Recommended for complex tasks requiring accurate and consistent tool usage, but only usable with models that support tool calling.",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mySql', required: true, testedBy: 'mysqlConnectionTest', displayOptions: { show: { agent: ['sqlAgent'",
    "webhooks": [],
    "properties": [
      {
        "name": "agent",
        "displayName": "Agent",
        "type": "options"
      },
      {
        "name": "aiAgentStarterCallout",
        "displayName": "Tip: Get a feel for agents with our quick <a href=\"https://docs.n8n.io/advanced-ai/intro-tutorial/\" target=\"_blank\">tutorial</a> or see an <a href=\"/templates/1954\" target=\"_blank\">example</a> of how this node works",
        "type": "callout",
        "default": ""
      },
      {
        "name": "preBuiltAgentsCallout",
        "displayName": "Get started faster with our",
        "type": "callout"
      },
      {
        "name": "deprecated",
        "displayName": "This node is using Agent that has been deprecated. Please switch to using 'Tools Agent' instead.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "notice",
        "displayName": "For more reliable structured output parsing, consider using the Tools agent",
        "type": "notice",
        "default": ""
      },
      {
        "name": "hasOutputParser",
        "displayName": "Require Specific Output Format",
        "type": "boolean"
      }
    ]
  },
  "AgentToolV2": {
    "name": "AgentToolV2",
    "displayName": "AgentToolV2",
    "type": "n8n-nodes-base.AgentToolV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "hasOutputParser",
        "displayName": "Require Specific Output Format",
        "type": "boolean"
      },
      {
        "name": "needsFallback",
        "displayName": "Enable Fallback Model",
        "type": "boolean"
      },
      {
        "name": "fallbackNotice",
        "displayName": "Connect an additional language model on the canvas to use it as a fallback if the main model fails",
        "type": "notice",
        "default": ""
      }
    ]
  },
  "AgentV2": {
    "name": "AgentV2",
    "displayName": "AgentV2",
    "type": "n8n-nodes-base.AgentV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "aiAgentStarterCallout",
        "displayName": "Tip: Get a feel for agents with our quick <a href=\"https://docs.n8n.io/advanced-ai/intro-tutorial/\" target=\"_blank\">tutorial</a> or see an <a href=\"/workflows/templates/1954\" target=\"_blank\">example</a> of how this node works",
        "type": "callout",
        "default": ""
      },
      {
        "name": "preBuiltAgentsCallout",
        "displayName": "Get started faster with our",
        "type": "callout"
      },
      {
        "name": "hasOutputParser",
        "displayName": "Require Specific Output Format",
        "type": "boolean"
      },
      {
        "name": "needsFallback",
        "displayName": "Enable Fallback Model",
        "type": "boolean"
      },
      {
        "name": "fallbackNotice",
        "displayName": "Connect an additional language model on the canvas to use it as a fallback if the main model fails",
        "type": "notice",
        "default": ""
      }
    ]
  },
  "ChainLlm": {
    "name": "ChainLlm",
    "displayName": "ChainLlm",
    "type": "n8n-nodes-base.ChainLlm",
    "subtitle": null,
    "description": "A simple chain to prompt a large language model",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "chainLlm",
        "displayName": "Basic LLM Chain"
      }
    ]
  },
  "ChainRetrievalQa": {
    "name": "ChainRetrievalQa",
    "displayName": "ChainRetrievalQa",
    "type": "n8n-nodes-base.ChainRetrievalQa",
    "subtitle": null,
    "description": "Answer questions about retrieved documents",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main, { displayName: 'Model', maxConnections: 1, type: NodeConnectionTypes.AiLanguageModel, required: true, }, { displayName: 'Retriever', maxConnections: 1, type: NodeConnectionTypes.AiRetriever, required: true, },",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "chainRetrievalQa",
        "displayName": "Question and Answer Chain"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string",
        "required": true
      },
      {
        "name": "text",
        "displayName": "Prompt (User Message)",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. Hello, how can you help me?"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      }
    ]
  },
  "ChainSummarization": {
    "name": "chainSummarization",
    "displayName": "Summarization Chain",
    "type": "n8n-nodes-base.ChainSummarization",
    "subtitle": null,
    "description": "Transforms text into a concise summary",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.1,
    "availableVersions": [
      1.0,
      2.0,
      2.1
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "chainSummarization",
        "displayName": "Summarization Chain"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options",
        "default": "map_reduce"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "combineMapPrompt",
        "displayName": "Final Prompt to Combine",
        "type": "string"
      },
      {
        "name": "prompt",
        "displayName": "Individual Summary Prompt",
        "type": "string"
      },
      {
        "name": "refinePrompt",
        "displayName": "Subsequent (Refine) Prompt",
        "type": "string"
      },
      {
        "name": "refineQuestionPrompt",
        "displayName": "Initial Prompt",
        "type": "string"
      },
      {
        "name": "operationMode",
        "displayName": "Data to Summarize",
        "type": "options",
        "default": "nodeInputJson"
      },
      {
        "name": "chunkingMode",
        "displayName": "Chunking Strategy",
        "type": "options",
        "default": "simple"
      },
      {
        "name": "chunkSize",
        "displayName": "Characters Per Chunk",
        "type": "number",
        "default": "1000"
      },
      {
        "name": "chunkOverlap",
        "displayName": "Chunk Overlap (Characters)",
        "type": "number",
        "default": "200"
      },
      {
        "name": "binaryDataKey",
        "displayName": "Input Data Field Name",
        "type": "string",
        "default": "data"
      },
      {
        "name": "summarizationMethodAndPrompts",
        "displayName": "Summarization Method and Prompts",
        "type": "fixedCollection"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "options",
        "default": "map_reduce"
      }
    ]
  },
  "InformationExtractor": {
    "name": "InformationExtractor",
    "displayName": "InformationExtractor",
    "type": "n8n-nodes-base.InformationExtractor",
    "subtitle": null,
    "description": "Extract information from text in a structured format",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: '', type: NodeConnectionTypes.Main }, { displayName: 'Model', maxConnections: 1, type: NodeConnectionTypes.AiLanguageModel, required: true, },",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "informationExtractor",
        "displayName": "Information Extractor"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "default": ""
      },
      {
        "name": "attributes",
        "displayName": "Attributes",
        "type": "fixedCollection",
        "placeholder": "Add Attribute"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options",
        "required": true
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "Add description for the attribute"
      },
      {
        "name": "required",
        "displayName": "Required",
        "type": "boolean",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "systemPromptTemplate",
        "displayName": "System Prompt Template",
        "type": "string"
      }
    ]
  },
  "SentimentAnalysis": {
    "name": "SentimentAnalysis",
    "displayName": "SentimentAnalysis",
    "type": "n8n-nodes-base.SentimentAnalysis",
    "subtitle": null,
    "description": "Analyze the sentiment of your text",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: '', type: NodeConnectionTypes.Main }, { displayName: 'Model', maxConnections: 1, type: NodeConnectionTypes.AiLanguageModel, required: true, },",
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "sentimentAnalysis",
        "displayName": "Sentiment Analysis"
      },
      {
        "name": "inputText",
        "displayName": "Text to Analyze",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "detailedResultsNotice",
        "displayName": "Sentiment scores are LLM-generated estimates, not statistically rigorous measurements. They may be inconsistent across runs and should be used as rough indicators only.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "categories",
        "displayName": "Sentiment Categories",
        "type": "string"
      },
      {
        "name": "systemPromptTemplate",
        "displayName": "System Prompt Template",
        "type": "string"
      },
      {
        "name": "includeDetailedResults",
        "displayName": "Include Detailed Results",
        "type": "boolean"
      },
      {
        "name": "enableAutoFixing",
        "displayName": "Enable Auto-Fixing",
        "type": "boolean"
      }
    ]
  },
  "TextClassifier": {
    "name": "TextClassifier",
    "displayName": "TextClassifier",
    "type": "n8n-nodes-base.TextClassifier",
    "subtitle": null,
    "description": "Classify your text into distinct categories",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: '', type: NodeConnectionTypes.Main }, { displayName: 'Model', maxConnections: 1, type: NodeConnectionTypes.AiLanguageModel, required: true, },",
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "textClassifier",
        "displayName": "Text Classifier"
      },
      {
        "name": "inputText",
        "displayName": "Text to Classify",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "categories",
        "displayName": "Categories",
        "type": "fixedCollection",
        "placeholder": "Add Category"
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "multiClass",
        "displayName": "Allow Multiple Classes To Be True",
        "type": "boolean"
      },
      {
        "name": "fallback",
        "displayName": "When No Clear Match",
        "type": "options",
        "default": "discard"
      },
      {
        "name": "systemPromptTemplate",
        "displayName": "System Prompt Template",
        "type": "string"
      },
      {
        "name": "enableAutoFixing",
        "displayName": "Enable Auto-Fixing",
        "type": "boolean"
      }
    ]
  },
  "ChainSummarizationV1": {
    "name": "ChainSummarizationV1",
    "displayName": "ChainSummarizationV1",
    "type": "n8n-nodes-base.ChainSummarizationV1",
    "subtitle": null,
    "description": "The type of summarization to run",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main, { displayName: 'Model', maxConnections: 1, type: NodeConnectionTypes.AiLanguageModel, required: true, }, { displayName: 'Document', maxConnections: 1, type: NodeConnectionTypes.AiDocument, required: true, },",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "type",
        "displayName": "Type",
        "type": "options",
        "default": "map_reduce"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "combineMapPrompt",
        "displayName": "Final Prompt to Combine",
        "type": "string"
      },
      {
        "name": "prompt",
        "displayName": "Individual Summary Prompt",
        "type": "string"
      },
      {
        "name": "refinePrompt",
        "displayName": "Subsequent (Refine) Prompt",
        "type": "string"
      },
      {
        "name": "refineQuestionPrompt",
        "displayName": "Initial Prompt",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "ChainSummarizationV2": {
    "name": "ChainSummarizationV2",
    "displayName": "ChainSummarizationV2",
    "type": "n8n-nodes-base.ChainSummarizationV2",
    "subtitle": null,
    "description": "How to pass data into the summarization chain",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "operationMode",
        "displayName": "Data to Summarize",
        "type": "options",
        "default": "nodeInputJson"
      },
      {
        "name": "chunkingMode",
        "displayName": "Chunking Strategy",
        "type": "options",
        "default": "simple"
      },
      {
        "name": "chunkSize",
        "displayName": "Characters Per Chunk",
        "type": "number",
        "default": "1000"
      },
      {
        "name": "chunkOverlap",
        "displayName": "Chunk Overlap (Characters)",
        "type": "number",
        "default": "200"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "binaryDataKey",
        "displayName": "Input Data Field Name",
        "type": "string",
        "default": "data"
      },
      {
        "name": "summarizationMethodAndPrompts",
        "displayName": "Summarization Method and Prompts",
        "type": "fixedCollection"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "options",
        "default": "map_reduce"
      },
      {
        "name": "combineMapPrompt",
        "displayName": "Individual Summary Prompt",
        "type": "string"
      },
      {
        "name": "prompt",
        "displayName": "Final Prompt to Combine",
        "type": "string"
      },
      {
        "name": "refinePrompt",
        "displayName": "Subsequent (Refine) Prompt",
        "type": "string"
      },
      {
        "name": "refineQuestionPrompt",
        "displayName": "Initial Prompt",
        "type": "string"
      }
    ]
  },
  "DocumentBinaryInputLoader": {
    "name": "DocumentBinaryInputLoader",
    "displayName": "DocumentBinaryInputLoader",
    "type": "n8n-nodes-base.DocumentBinaryInputLoader",
    "subtitle": null,
    "description": "Use binary data from a previous step in the workflow",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: 'Text Splitter', maxConnections: 1, type: NodeConnectionTypes.AiTextSplitter, required: true, },",
    "outputs": "NodeConnectionTypes.AiDocument",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "documentBinaryInputLoader",
        "displayName": "Binary Input Loader"
      },
      {
        "name": "loader",
        "displayName": "Loader Type",
        "type": "options",
        "default": "jsonLoader",
        "required": true
      },
      {
        "name": "binaryDataKey",
        "displayName": "Binary Data Key",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "splitPages",
        "displayName": "Split Pages",
        "type": "boolean"
      },
      {
        "name": "column",
        "displayName": "Column",
        "type": "string",
        "default": ""
      },
      {
        "name": "separator",
        "displayName": "Separator",
        "type": "string",
        "default": ","
      },
      {
        "name": "pointers",
        "displayName": "Pointers",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      }
    ],
    "version": 1.0
  },
  "DocumentDefaultDataLoader": {
    "name": "DocumentDefaultDataLoader",
    "displayName": "DocumentDefaultDataLoader",
    "type": "n8n-nodes-base.DocumentDefaultDataLoader",
    "subtitle": null,
    "description": "Load data from previous step in the workflow",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.AiDocument",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "documentDefaultDataLoader",
        "displayName": "Default Data Loader"
      },
      {
        "name": "notice",
        "displayName": "This will load data from a previous step in the workflow. <a href=\"/templates/1962\" target=\"_blank\">Example</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "dataType",
        "displayName": "Type of Data",
        "type": "options",
        "default": "json",
        "required": true
      },
      {
        "name": "jsonMode",
        "displayName": "Mode",
        "type": "options",
        "default": "allInputData",
        "required": true
      },
      {
        "name": "binaryMode",
        "displayName": "Mode",
        "type": "options",
        "default": "allInputData",
        "required": true
      },
      {
        "name": "loader",
        "displayName": "Data Format",
        "type": "options",
        "default": "auto",
        "required": true
      },
      {
        "name": "jsonData",
        "displayName": "Data",
        "type": "string"
      },
      {
        "name": "binaryDataKey",
        "displayName": "Input Data Field Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "textSplittingMode",
        "displayName": "Text Splitting",
        "type": "options",
        "default": "simple",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "pointers",
        "displayName": "JSON Pointers",
        "type": "string",
        "default": ""
      },
      {
        "name": "separator",
        "displayName": "CSV Separator",
        "type": "string",
        "default": ","
      },
      {
        "name": "column",
        "displayName": "CSV Column",
        "type": "string",
        "default": ""
      },
      {
        "name": "splitPages",
        "displayName": "Split Pages in PDF",
        "type": "boolean"
      }
    ]
  },
  "DocumentGithubLoader": {
    "name": "DocumentGithubLoader",
    "displayName": "DocumentGithubLoader",
    "type": "n8n-nodes-base.DocumentGithubLoader",
    "subtitle": null,
    "description": "Use GitHub data as input to this chain",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.AiDocument",
    "credentials": "{ name: 'githubApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "documentGithubLoader",
        "displayName": "GitHub Document Loader"
      },
      {
        "name": "repository",
        "displayName": "Repository Link",
        "type": "string",
        "default": ""
      },
      {
        "name": "branch",
        "displayName": "Branch",
        "type": "string",
        "default": "main"
      },
      {
        "name": "textSplittingMode",
        "displayName": "Text Splitting",
        "type": "options",
        "default": "simple",
        "required": true
      },
      {
        "name": "additionalOptions",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "recursive",
        "displayName": "Recursive",
        "type": "boolean"
      },
      {
        "name": "ignorePaths",
        "displayName": "Ignore Paths",
        "type": "string",
        "default": ""
      }
    ]
  },
  "DocumentJsonInputLoader": {
    "name": "DocumentJsonInputLoader",
    "displayName": "DocumentJsonInputLoader",
    "type": "n8n-nodes-base.DocumentJsonInputLoader",
    "subtitle": null,
    "description": "Use JSON data from a previous step in the workflow",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: 'Text Splitter', maxConnections: 1, type: NodeConnectionTypes.AiTextSplitter, },",
    "outputs": "NodeConnectionTypes.AiDocument",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "documentJsonInputLoader",
        "displayName": "JSON Input Loader"
      },
      {
        "name": "pointers",
        "displayName": "Pointers",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      }
    ],
    "version": 1.0
  },
  "EmbeddingsAwsBedrock": {
    "name": "EmbeddingsAwsBedrock",
    "displayName": "EmbeddingsAwsBedrock",
    "type": "n8n-nodes-base.EmbeddingsAwsBedrock",
    "subtitle": null,
    "description": "Use Embeddings AWS Bedrock",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiEmbedding",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "embeddingsAwsBedrock",
        "displayName": "Embeddings AWS Bedrock",
        "required": true
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "EmbeddingsAzureOpenAi": {
    "name": "EmbeddingsAzureOpenAi",
    "displayName": "EmbeddingsAzureOpenAi",
    "type": "n8n-nodes-base.EmbeddingsAzureOpenAi",
    "subtitle": null,
    "description": "Use Embeddings Azure OpenAI",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiEmbedding",
    "credentials": "{ name: 'azureOpenAiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "embeddingsAzureOpenAi",
        "displayName": "Embeddings Azure OpenAI",
        "required": true
      },
      {
        "name": "model",
        "displayName": "Model (Deployment) Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "default": "512",
        "typeOptions": {
          "maxValue": 2048
        }
      },
      {
        "name": "stripNewLines",
        "displayName": "Strip New Lines",
        "type": "boolean"
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number"
      },
      {
        "name": "dimensions",
        "displayName": "Dimensions",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "EmbeddingsCohere": {
    "name": "EmbeddingsCohere",
    "displayName": "EmbeddingsCohere",
    "type": "n8n-nodes-base.EmbeddingsCohere",
    "subtitle": null,
    "description": "Use Cohere Embeddings",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiEmbedding",
    "credentials": "{ name: 'cohereApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "embeddingsCohere",
        "displayName": "Embeddings Cohere"
      },
      {
        "name": "notice",
        "displayName": "Each model is using different dimensional density for embeddings. Please make sure to use the same dimensionality for your vector store. The default model is using 768-dimensional embeddings.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "modelName",
        "displayName": "Model",
        "type": "options",
        "default": "embed-english-v2.0"
      }
    ],
    "version": 1.0
  },
  "EmbeddingsGoogleGemini": {
    "name": "EmbeddingsGoogleGemini",
    "displayName": "EmbeddingsGoogleGemini",
    "type": "n8n-nodes-base.EmbeddingsGoogleGemini",
    "subtitle": null,
    "description": "Use Google Gemini Embeddings",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiEmbedding",
    "credentials": "{ name: 'googlePalmApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "embeddingsGoogleGemini",
        "displayName": "Embeddings Google Gemini"
      },
      {
        "name": "notice",
        "displayName": "Each model is using different dimensional density for embeddings. Please make sure to use the same dimensionality for your vector store. The default model is using 768-dimensional embeddings.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "modelName",
        "displayName": "Model",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "EmbeddingsGoogleVertex": {
    "name": "EmbeddingsGoogleVertex",
    "displayName": "EmbeddingsGoogleVertex",
    "type": "n8n-nodes-base.EmbeddingsGoogleVertex",
    "subtitle": null,
    "description": "Use Google Vertex Embeddings",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiEmbedding",
    "credentials": "{ name: 'googleApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "embeddingsGoogleVertex",
        "displayName": "Embeddings Google Vertex"
      },
      {
        "name": "notice",
        "displayName": "Each model is using different dimensional density for embeddings. Please make sure to use the same dimensionality for your vector store. The default model is using 768-dimensional embeddings. You can find available models <a href=\"https://cloud.google.com/vertex-ai/generative-ai/docs/model-reference/text-embeddings-api\">here</a>.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "projectId",
        "displayName": "Project ID",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "modelName",
        "displayName": "Model Name",
        "type": "string",
        "default": "text-embedding-005"
      }
    ],
    "version": 1.0
  },
  "EmbeddingsHuggingFaceInference": {
    "name": "EmbeddingsHuggingFaceInference",
    "displayName": "EmbeddingsHuggingFaceInference",
    "type": "n8n-nodes-base.EmbeddingsHuggingFaceInference",
    "subtitle": null,
    "description": "Use HuggingFace Inference Embeddings",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiEmbedding",
    "credentials": "{ name: 'huggingFaceApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "embeddingsHuggingFaceInference",
        "displayName": "Embeddings Hugging Face Inference"
      },
      {
        "name": "notice",
        "displayName": "Each model is using different dimensional density for embeddings. Please make sure to use the same dimensionality for your vector store. The default model is using 768-dimensional embeddings.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "modelName",
        "displayName": "Model Name",
        "type": "string",
        "default": "sentence-transformers/distilbert-base-nli-mean-tokens"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "endpointUrl",
        "displayName": "Custom Inference Endpoint",
        "type": "string",
        "default": ""
      },
      {
        "name": "provider",
        "displayName": "Provider",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "EmbeddingsMistralCloud": {
    "name": "EmbeddingsMistralCloud",
    "displayName": "EmbeddingsMistralCloud",
    "type": "n8n-nodes-base.EmbeddingsMistralCloud",
    "subtitle": null,
    "description": "Use Embeddings Mistral Cloud",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiEmbedding",
    "credentials": "{ name: 'mistralCloudApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "embeddingsMistralCloud",
        "displayName": "Embeddings Mistral Cloud",
        "required": true
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "default": "512",
        "typeOptions": {
          "maxValue": 2048
        }
      },
      {
        "name": "stripNewLines",
        "displayName": "Strip New Lines",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "EmbeddingsOllama": {
    "name": "EmbeddingsOllama",
    "displayName": "EmbeddingsOllama",
    "type": "n8n-nodes-base.EmbeddingsOllama",
    "subtitle": null,
    "description": "Use Ollama Embeddings",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiEmbedding",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "embeddingsOllama",
        "displayName": "Embeddings Ollama"
      }
    ],
    "version": 1.0
  },
  "EmbeddingsOpenAi": {
    "name": "EmbeddingsOpenAi",
    "displayName": "EmbeddingsOpenAi",
    "type": "n8n-nodes-base.EmbeddingsOpenAi",
    "subtitle": null,
    "description": "The model which will generate the embeddings. <a href=\"https://platform.openai.com/docs/models/overview\">Learn more</a>.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiEmbedding",
    "credentials": "{ name: 'openAiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "embeddingsOpenAi",
        "displayName": "Embeddings OpenAI"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "dimensions",
        "displayName": "Dimensions",
        "type": "options"
      },
      {
        "name": "baseURL",
        "displayName": "Base URL",
        "type": "string",
        "default": "https://api.openai.com/v1"
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "default": "512",
        "typeOptions": {
          "maxValue": 2048
        }
      },
      {
        "name": "stripNewLines",
        "displayName": "Strip New Lines",
        "type": "boolean"
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number"
      }
    ]
  },
  "LmChatAnthropic": {
    "name": "LmChatAnthropic",
    "displayName": "LmChatAnthropic",
    "type": "n8n-nodes-base.LmChatAnthropic",
    "subtitle": null,
    "description": "The model which will generate the completion. <a href=\"https://docs.anthropic.com/claude/docs/models-overview\">Learn more</a>.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'anthropicApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "lmChatAnthropic",
        "displayName": "Anthropic Chat Model"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a model..."
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string",
        "placeholder": "Claude Sonnet"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "maxTokensToSample",
        "displayName": "Maximum Number of Tokens",
        "type": "number"
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      },
      {
        "name": "topK",
        "displayName": "Top K",
        "typeOptions": {
          "maxValue": 1
        }
      },
      {
        "name": "topP",
        "displayName": "Top P",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      },
      {
        "name": "thinking",
        "displayName": "Enable Thinking",
        "type": "boolean"
      },
      {
        "name": "thinkingBudget",
        "displayName": "Thinking Budget (Tokens)",
        "type": "number"
      }
    ]
  },
  "LmChatAwsBedrock": {
    "name": "LmChatAwsBedrock",
    "displayName": "LmChatAwsBedrock",
    "type": "n8n-nodes-base.LmChatAwsBedrock",
    "subtitle": null,
    "description": "Language Model AWS Bedrock",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatAwsBedrock",
        "displayName": "AWS Bedrock Chat Model"
      },
      {
        "name": "modelSource",
        "displayName": "Model Source",
        "type": "options"
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "maxTokensToSample",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "default": "2000"
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ]
  },
  "LmChatAzureOpenAi": {
    "name": "LmChatAzureOpenAi",
    "displayName": "LmChatAzureOpenAi",
    "type": "n8n-nodes-base.LmChatAzureOpenAi",
    "subtitle": null,
    "description": "For advanced usage with an AI chain",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'azureOpenAiApi', required: true, displayOptions: { show: { authentication: [AuthenticationType.ApiKey",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatAzureOpenAi",
        "displayName": "Azure OpenAI Chat Model"
      }
    ],
    "version": 1.0
  },
  "LmChatCohere": {
    "name": "LmChatCohere",
    "displayName": "LmChatCohere",
    "type": "n8n-nodes-base.LmChatCohere",
    "subtitle": null,
    "description": "For advanced usage with an AI chain",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "'ai_languageModel'",
    "credentials": "{ name: 'cohereApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatCohere",
        "displayName": "Cohere Chat Model"
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 2
        }
      },
      {
        "name": "maxRetries",
        "displayName": "Max Retries",
        "type": "number",
        "default": "2"
      }
    ]
  },
  "LmChatDeepSeek": {
    "name": "LmChatDeepSeek",
    "displayName": "LmChatDeepSeek",
    "type": "n8n-nodes-base.LmChatDeepSeek",
    "subtitle": null,
    "description": "For advanced usage with an AI chain",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'deepSeekApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatDeepSeek",
        "displayName": "DeepSeek Chat Model"
      },
      {
        "name": "notice",
        "displayName": "If using JSON response format, you must include word \"json\" in the prompt in your chain or agent. Also, make sure to select latest models released post November 2023.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "frequencyPenalty",
        "displayName": "Frequency Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "maxTokens",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "typeOptions": {
          "maxValue": 32768
        }
      },
      {
        "name": "responseFormat",
        "displayName": "Response Format",
        "type": "options",
        "default": "text"
      },
      {
        "name": "presencePenalty",
        "displayName": "Presence Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 2
        }
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "default": "360000"
      },
      {
        "name": "maxRetries",
        "displayName": "Max Retries",
        "type": "number",
        "default": "2"
      },
      {
        "name": "topP",
        "displayName": "Top P",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ]
  },
  "LmChatGoogleGemini": {
    "name": "LmChatGoogleGemini",
    "displayName": "LmChatGoogleGemini",
    "type": "n8n-nodes-base.LmChatGoogleGemini",
    "subtitle": null,
    "description": "Chat Model Google Gemini",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'googlePalmApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatGoogleGemini",
        "displayName": "Google Gemini Chat Model"
      },
      {
        "name": "modelName",
        "displayName": "Model",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "LmChatGoogleVertex": {
    "name": "LmChatGoogleVertex",
    "displayName": "LmChatGoogleVertex",
    "type": "n8n-nodes-base.LmChatGoogleVertex",
    "subtitle": null,
    "description": "Chat Model Google Vertex",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'googleApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatGoogleVertex",
        "displayName": "Google Vertex Chat Model"
      },
      {
        "name": "projectId",
        "displayName": "Project ID",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "modelName",
        "displayName": "Model Name",
        "type": "string",
        "default": "gemini-1.5-flash"
      }
    ],
    "version": 1.0
  },
  "LmChatGroq": {
    "name": "LmChatGroq",
    "displayName": "LmChatGroq",
    "type": "n8n-nodes-base.LmChatGroq",
    "subtitle": null,
    "description": "Language Model Groq",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'groqApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatGroq",
        "displayName": "Groq Chat Model"
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "maxTokensToSample",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "default": "4096"
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "LmChatMistralCloud": {
    "name": "LmChatMistralCloud",
    "displayName": "LmChatMistralCloud",
    "type": "n8n-nodes-base.LmChatMistralCloud",
    "subtitle": null,
    "description": "For advanced usage with an AI chain",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'mistralCloudApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatMistralCloud",
        "displayName": "Mistral Cloud Chat Model"
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "maxTokens",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "typeOptions": {
          "maxValue": 32768
        }
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      },
      {
        "name": "maxRetries",
        "displayName": "Max Retries",
        "type": "number",
        "default": "2"
      },
      {
        "name": "topP",
        "displayName": "Top P",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      },
      {
        "name": "safeMode",
        "displayName": "Enable Safe Mode",
        "type": "boolean"
      },
      {
        "name": "randomSeed",
        "displayName": "Random Seed",
        "type": "number"
      }
    ],
    "version": 1.0
  },
  "LmChatOllama": {
    "name": "LmChatOllama",
    "displayName": "LmChatOllama",
    "type": "n8n-nodes-base.LmChatOllama",
    "subtitle": null,
    "description": "Language Model Ollama",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatOllama",
        "displayName": "Ollama Chat Model"
      }
    ],
    "version": 1.0
  },
  "LmChatOpenAi": {
    "name": "LmChatOpenAi",
    "displayName": "LmChatOpenAi",
    "type": "n8n-nodes-base.LmChatOpenAi",
    "subtitle": null,
    "description": "For advanced usage with an AI chain",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'openAiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatOpenAi",
        "displayName": "OpenAI Chat Model"
      },
      {
        "name": "notice",
        "displayName": "If using JSON response format, you must include word \"json\" in the prompt in your chain or agent. Also, make sure to select latest models released post November 2023.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a model..."
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string",
        "placeholder": "gpt-4.1-mini"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "baseURL",
        "displayName": "Base URL",
        "type": "string",
        "default": "https://api.openai.com/v1"
      },
      {
        "name": "frequencyPenalty",
        "displayName": "Frequency Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "maxTokens",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "typeOptions": {
          "maxValue": 32768
        }
      },
      {
        "name": "responseFormat",
        "displayName": "Response Format",
        "type": "options",
        "default": "text"
      },
      {
        "name": "presencePenalty",
        "displayName": "Presence Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 2
        }
      },
      {
        "name": "reasoningEffort",
        "displayName": "Reasoning Effort",
        "type": "options",
        "default": "medium"
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "default": "60000"
      },
      {
        "name": "maxRetries",
        "displayName": "Max Retries",
        "type": "number",
        "default": "2"
      },
      {
        "name": "topP",
        "displayName": "Top P",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ]
  },
  "LmChatOpenRouter": {
    "name": "LmChatOpenRouter",
    "displayName": "LmChatOpenRouter",
    "type": "n8n-nodes-base.LmChatOpenRouter",
    "subtitle": null,
    "description": "For advanced usage with an AI chain",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'openRouterApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatOpenRouter",
        "displayName": "OpenRouter Chat Model"
      },
      {
        "name": "notice",
        "displayName": "If using JSON response format, you must include word \"json\" in the prompt in your chain or agent. Also, make sure to select latest models released post November 2023.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "frequencyPenalty",
        "displayName": "Frequency Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "maxTokens",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "typeOptions": {
          "maxValue": 32768
        }
      },
      {
        "name": "responseFormat",
        "displayName": "Response Format",
        "type": "options",
        "default": "text"
      },
      {
        "name": "presencePenalty",
        "displayName": "Presence Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 2
        }
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "default": "360000"
      },
      {
        "name": "maxRetries",
        "displayName": "Max Retries",
        "type": "number",
        "default": "2"
      },
      {
        "name": "topP",
        "displayName": "Top P",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ]
  },
  "LmChatVercelAiGateway": {
    "name": "LmChatVercelAiGateway",
    "displayName": "LmChatVercelAiGateway",
    "type": "n8n-nodes-base.LmChatVercelAiGateway",
    "subtitle": null,
    "description": "For advanced usage with an AI chain via Vercel AI Gateway",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'vercelAiGatewayApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatVercelAiGateway",
        "displayName": "Vercel AI Gateway Chat Model"
      },
      {
        "name": "notice",
        "displayName": "If using JSON response format, you must include word \"json\" in the prompt in your chain or agent. Also, make sure to select latest models released post November 2023.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "frequencyPenalty",
        "displayName": "Frequency Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "maxTokens",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "typeOptions": {
          "maxValue": 32768
        }
      },
      {
        "name": "responseFormat",
        "displayName": "Response Format",
        "type": "options",
        "default": "text"
      },
      {
        "name": "presencePenalty",
        "displayName": "Presence Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 2
        }
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "default": "360000"
      },
      {
        "name": "maxRetries",
        "displayName": "Max Retries",
        "type": "number",
        "default": "2"
      },
      {
        "name": "topP",
        "displayName": "Top P",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ]
  },
  "LmChatXAiGrok": {
    "name": "LmChatXAiGrok",
    "displayName": "LmChatXAiGrok",
    "type": "n8n-nodes-base.LmChatXAiGrok",
    "subtitle": null,
    "description": "For advanced usage with an AI chain",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'xAiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmChatXAiGrok",
        "displayName": "xAI Grok Chat Model"
      },
      {
        "name": "notice",
        "displayName": "If using JSON response format, you must include word \"json\" in the prompt in your chain or agent. Also, make sure to select latest models released post November 2023.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "frequencyPenalty",
        "displayName": "Frequency Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "maxTokens",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "typeOptions": {
          "maxValue": 32768
        }
      },
      {
        "name": "responseFormat",
        "displayName": "Response Format",
        "type": "options",
        "default": "text"
      },
      {
        "name": "presencePenalty",
        "displayName": "Presence Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 2
        }
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "default": "360000"
      },
      {
        "name": "maxRetries",
        "displayName": "Max Retries",
        "type": "number",
        "default": "2"
      },
      {
        "name": "topP",
        "displayName": "Top P",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ]
  },
  "LmCohere": {
    "name": "LmCohere",
    "displayName": "LmCohere",
    "type": "n8n-nodes-base.LmCohere",
    "subtitle": null,
    "description": "Language Model Cohere",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'cohereApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmCohere",
        "displayName": "Cohere Model"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "maxTokens",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "default": "250",
        "typeOptions": {
          "maxValue": 32768
        }
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "string",
        "default": ""
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "LmOllama": {
    "name": "LmOllama",
    "displayName": "LmOllama",
    "type": "n8n-nodes-base.LmOllama",
    "subtitle": null,
    "description": "Language Model Ollama",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "lmOllama",
        "displayName": "Ollama Model"
      }
    ],
    "version": 1.0
  },
  "LmOpenAi": {
    "name": "LmOpenAi",
    "displayName": "LmOpenAi",
    "type": "n8n-nodes-base.LmOpenAi",
    "subtitle": null,
    "description": "For advanced usage with an AI chain",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'openAiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmOpenAi",
        "displayName": "OpenAI Model"
      },
      {
        "name": "deprecated",
        "displayName": "This node is using OpenAI completions which are now deprecated. Please use the OpenAI Chat Model node instead.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "notice",
        "displayName": "When using non OpenAI models via Base URL override, not all models might be chat-compatible or support other features, like tools calling or JSON response format.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "baseURL",
        "displayName": "Base URL",
        "type": "string",
        "default": "https://api.openai.com/v1"
      },
      {
        "name": "frequencyPenalty",
        "displayName": "Frequency Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "maxTokens",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "typeOptions": {
          "maxValue": 32768
        }
      },
      {
        "name": "presencePenalty",
        "displayName": "Presence Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "0.7",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "default": "60000"
      },
      {
        "name": "maxRetries",
        "displayName": "Max Retries",
        "type": "number",
        "default": "2"
      },
      {
        "name": "topP",
        "displayName": "Top P",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "LmOpenHuggingFaceInference": {
    "name": "LmOpenHuggingFaceInference",
    "displayName": "LmOpenHuggingFaceInference",
    "type": "n8n-nodes-base.LmOpenHuggingFaceInference",
    "subtitle": null,
    "description": "Language Model HuggingFaceInference",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiLanguageModel",
    "credentials": "{ name: 'huggingFaceApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lmOpenHuggingFaceInference",
        "displayName": "Hugging Face Inference Model"
      },
      {
        "name": "model",
        "displayName": "Model",
        "type": "string",
        "default": "mistralai/Mistral-Nemo-Base-2407"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "endpointUrl",
        "displayName": "Custom Inference Endpoint",
        "type": "string",
        "default": ""
      },
      {
        "name": "frequencyPenalty",
        "displayName": "Frequency Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "maxTokens",
        "displayName": "Maximum Number of Tokens",
        "type": "number",
        "default": "128",
        "typeOptions": {
          "maxValue": 32768
        }
      },
      {
        "name": "presencePenalty",
        "displayName": "Presence Penalty",
        "default": "0",
        "typeOptions": {
          "maxValue": 2
        }
      },
      {
        "name": "temperature",
        "displayName": "Sampling Temperature",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      },
      {
        "name": "topK",
        "displayName": "Top K",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      },
      {
        "name": "topP",
        "displayName": "Top P",
        "default": "1",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "McpClientTool": {
    "name": "McpClientTool",
    "displayName": "McpClientTool",
    "type": "n8n-nodes-base.McpClientTool",
    "subtitle": null,
    "description": "Connect tools from an MCP Server",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "{ type: NodeConnectionTypes.AiTool, displayName: 'Tools' }",
    "credentials": "{ // eslint-disable-next-line n8n-nodes-base/node-class-description-credentials-name-unsuffixed name: 'httpBearerAuth', required: true, displayOptions: { show: { authentication: ['bearerAuth'",
    "webhooks": [],
    "properties": [
      {
        "name": "mcpClientTool",
        "displayName": "MCP Client Tool"
      },
      {
        "name": "sseEndpoint",
        "displayName": "SSE Endpoint",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. https://my-mcp-server.ai/sse"
      },
      {
        "name": "endpointUrl",
        "displayName": "Endpoint",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. https://my-mcp-server.ai/mcp"
      },
      {
        "name": "serverTransport",
        "displayName": "Server Transport",
        "type": "options"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "credentials",
        "displayName": "Credentials",
        "type": "credentials",
        "default": ""
      },
      {
        "name": "include",
        "displayName": "Tools to Include",
        "type": "options",
        "default": "all"
      },
      {
        "name": "includeTools",
        "displayName": "Tools to Include",
        "type": "multiOptions"
      },
      {
        "name": "excludeTools",
        "displayName": "Tools to Exclude",
        "type": "multiOptions"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      }
    ]
  },
  "McpTrigger": {
    "name": "McpTrigger",
    "displayName": "McpTrigger",
    "type": "n8n-nodes-base.McpTrigger",
    "subtitle": null,
    "description": "Expose n8n tools as an MCP Server endpoint",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ type: NodeConnectionTypes.AiTool, displayName: 'Tools', },",
    "outputs": "",
    "credentials": "{ // eslint-disable-next-line n8n-nodes-base/node-class-description-credentials-name-unsuffixed name: 'httpBearerAuth', required: true, displayOptions: { show: { authentication: ['bearerAuth'",
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', isFullPath: true, path: `={{$parameter[\"path\"",
    "properties": [
      {
        "name": "mcpTrigger",
        "displayName": "MCP Server Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "path",
        "displayName": "Path",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "webhook"
      }
    ]
  },
  "MemoryBufferWindow": {
    "name": "MemoryBufferWindow",
    "displayName": "MemoryBufferWindow",
    "type": "n8n-nodes-base.MemoryBufferWindow",
    "subtitle": null,
    "description": "Stores in n8n memory, so no credentials required",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiMemory",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "memoryBufferWindow",
        "displayName": "Simple Memory"
      },
      {
        "name": "sessionKey",
        "displayName": "Session Key",
        "type": "string",
        "default": "chat_history"
      }
    ]
  },
  "MemoryChatRetriever": {
    "name": "MemoryChatRetriever",
    "displayName": "MemoryChatRetriever",
    "type": "n8n-nodes-base.MemoryChatRetriever",
    "subtitle": null,
    "description": "Retrieve chat messages from memory and use them in the workflow",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main, { displayName: 'Memory', maxConnections: 1, type: NodeConnectionTypes.AiMemory, required: true, },",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "memoryChatRetriever",
        "displayName": "Chat Messages Retriever"
      },
      {
        "name": "deprecatedNotice",
        "displayName": "This node is deprecated. Use 'Chat Memory Manager' node instead.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "simplifyOutput",
        "displayName": "Simplify Output",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "MemoryManager": {
    "name": "MemoryManager",
    "displayName": "MemoryManager",
    "type": "n8n-nodes-base.MemoryManager",
    "subtitle": null,
    "description": "Manage chat messages memory and use it in the workflow",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: '', type: NodeConnectionTypes.Main, }, { displayName: 'Memory', type: NodeConnectionTypes.AiMemory, required: true, maxConnections: 1, },",
    "outputs": "{ displayName: '', type: NodeConnectionTypes.Main, },",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "memoryManager",
        "displayName": "Chat Memory Manager"
      },
      {
        "name": "mode",
        "displayName": "Operation Mode",
        "type": "options",
        "default": "load"
      },
      {
        "name": "insertMode",
        "displayName": "Insert Mode",
        "type": "options",
        "default": "insert"
      },
      {
        "name": "deleteMode",
        "displayName": "Delete Mode",
        "type": "options",
        "default": "lastN"
      },
      {
        "name": "messages",
        "displayName": "Chat Messages",
        "type": "fixedCollection"
      },
      {
        "name": "messageValues",
        "displayName": "Message",
        "type": "options"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "hideFromUI",
        "displayName": "Hide Message in Chat",
        "type": "boolean",
        "required": true
      },
      {
        "name": "lastMessagesCount",
        "displayName": "Messages Count",
        "type": "number",
        "default": "2"
      },
      {
        "name": "simplifyOutput",
        "displayName": "Simplify Output",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "groupMessages",
        "displayName": "Group Messages",
        "type": "boolean"
      }
    ]
  },
  "MemoryMongoDbChat": {
    "name": "MemoryMongoDbChat",
    "displayName": "MemoryMongoDbChat",
    "type": "n8n-nodes-base.MemoryMongoDbChat",
    "subtitle": null,
    "description": "Stores the chat history in MongoDB collection.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiMemory",
    "credentials": "{ name: 'mongoDb', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "memoryMongoDbChat",
        "displayName": "MongoDB Chat Memory"
      },
      {
        "name": "collectionName",
        "displayName": "Collection Name",
        "type": "string",
        "default": "n8n_chat_histories"
      },
      {
        "name": "databaseName",
        "displayName": "Database Name",
        "type": "string",
        "default": ""
      }
    ]
  },
  "MemoryMotorhead": {
    "name": "MemoryMotorhead",
    "displayName": "MemoryMotorhead",
    "type": "n8n-nodes-base.MemoryMotorhead",
    "subtitle": null,
    "description": "Use Motorhead Memory",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiMemory",
    "credentials": "{ name: 'motorheadApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "memoryMotorhead",
        "displayName": "Motorhead"
      },
      {
        "name": "sessionId",
        "displayName": "Session ID",
        "type": "string",
        "default": "",
        "required": true
      }
    ]
  },
  "MemoryRedisChat": {
    "name": "MemoryRedisChat",
    "displayName": "MemoryRedisChat",
    "type": "n8n-nodes-base.MemoryRedisChat",
    "subtitle": null,
    "description": "Stores the chat history in Redis.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiMemory",
    "credentials": "{ name: 'redis', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "memoryRedisChat",
        "displayName": "Redis Chat Memory"
      },
      {
        "name": "sessionKey",
        "displayName": "Session Key",
        "type": "string",
        "default": "chat_history"
      },
      {
        "name": "sessionTTL",
        "displayName": "Session Time To Live",
        "type": "number",
        "default": "0"
      }
    ]
  },
  "MemoryXata": {
    "name": "MemoryXata",
    "displayName": "MemoryXata",
    "type": "n8n-nodes-base.MemoryXata",
    "subtitle": null,
    "description": "Use Xata Memory",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiMemory",
    "credentials": "{ name: 'xataApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "memoryXata",
        "displayName": "Xata"
      },
      {
        "name": "sessionId",
        "displayName": "Session ID",
        "type": "string",
        "default": "",
        "required": true
      }
    ]
  },
  "MemoryZep": {
    "name": "MemoryZep",
    "displayName": "MemoryZep",
    "type": "n8n-nodes-base.MemoryZep",
    "subtitle": null,
    "description": "Use Zep Memory",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiMemory",
    "credentials": "{ name: 'zepApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "memoryZep",
        "displayName": "Zep"
      },
      {
        "name": "deprecationNotice",
        "displayName": "This Zep integration is deprecated and will be removed in a future version.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "supportedVersions",
        "displayName": "Only works with Zep Cloud and Community edition <= v0.27.2",
        "type": "notice",
        "default": ""
      },
      {
        "name": "sessionId",
        "displayName": "Session ID",
        "type": "string",
        "default": "",
        "required": true
      }
    ]
  },
  "OutputParserAutofixing": {
    "name": "OutputParserAutofixing",
    "displayName": "OutputParserAutofixing",
    "type": "n8n-nodes-base.OutputParserAutofixing",
    "subtitle": null,
    "description": "Deprecated, use structured output parser",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: 'Model', maxConnections: 1, type: NodeConnectionTypes.AiLanguageModel, required: true, }, { displayName: 'Output Parser', maxConnections: 1, required: true, type: NodeConnectionTypes.AiOutputParser, },",
    "outputs": "NodeConnectionTypes.AiOutputParser",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "outputParserAutofixing",
        "displayName": "Auto-fixing Output Parser"
      },
      {
        "name": "info",
        "displayName": "This node wraps another output parser. If the first one fails it calls an LLM to fix the format",
        "type": "notice",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "prompt",
        "displayName": "Retry Prompt",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "OutputParserItemList": {
    "name": "OutputParserItemList",
    "displayName": "OutputParserItemList",
    "type": "n8n-nodes-base.OutputParserItemList",
    "subtitle": null,
    "description": "Return the results as separate items",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiOutputParser",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "outputParserItemList",
        "displayName": "Item List Output Parser"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "numberOfItems",
        "displayName": "Number Of Items",
        "type": "number"
      },
      {
        "name": "parseOutput",
        "displayName": "Parse Output",
        "type": "boolean"
      },
      {
        "name": "separator",
        "displayName": "Separator",
        "type": "string",
        "default": "\\\\n"
      }
    ],
    "version": 1.0
  },
  "OutputParserStructured": {
    "name": "OutputParserStructured",
    "displayName": "OutputParserStructured",
    "type": "n8n-nodes-base.OutputParserStructured",
    "subtitle": null,
    "description": "Return data in a defined JSON format",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.AiOutputParser",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "outputParserStructured",
        "displayName": "Structured Output Parser"
      },
      {
        "name": "jsonSchema",
        "displayName": "JSON Schema",
        "type": "json"
      },
      {
        "name": "autoFix",
        "displayName": "Auto-Fix Format",
        "type": "boolean"
      },
      {
        "name": "customizeRetryPrompt",
        "displayName": "Customize Retry Prompt",
        "type": "boolean"
      },
      {
        "name": "prompt",
        "displayName": "Custom Prompt",
        "type": "string"
      }
    ]
  },
  "RerankerCohere": {
    "name": "RerankerCohere",
    "displayName": "RerankerCohere",
    "type": "n8n-nodes-base.RerankerCohere",
    "subtitle": null,
    "description": "Use Cohere Reranker to reorder documents after retrieval from a vector store by relevance to the given query.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiReranker",
    "credentials": "{ name: 'cohereApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "rerankerCohere",
        "displayName": "Reranker Cohere"
      },
      {
        "name": "modelName",
        "displayName": "Model",
        "type": "options",
        "default": "rerank-v3.5"
      },
      {
        "name": "topN",
        "displayName": "Top N",
        "type": "number",
        "default": "3"
      }
    ],
    "version": 1.0
  },
  "RetrieverContextualCompression": {
    "name": "RetrieverContextualCompression",
    "displayName": "RetrieverContextualCompression",
    "type": "n8n-nodes-base.RetrieverContextualCompression",
    "subtitle": null,
    "description": "Enhances document similarity search by contextual compression.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: 'Model', maxConnections: 1, type: NodeConnectionTypes.AiLanguageModel, required: true, }, { displayName: 'Retriever', maxConnections: 1, type: NodeConnectionTypes.AiRetriever, required: true, },",
    "outputs": "{ displayName: 'Retriever', maxConnections: 1, type: NodeConnectionTypes.AiRetriever, },",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "retrieverContextualCompression",
        "displayName": "Contextual Compression Retriever"
      }
    ],
    "version": 1.0
  },
  "RetrieverMultiQuery": {
    "name": "RetrieverMultiQuery",
    "displayName": "RetrieverMultiQuery",
    "type": "n8n-nodes-base.RetrieverMultiQuery",
    "subtitle": null,
    "description": "Automates prompt tuning, generates diverse queries and expands document pool for enhanced retrieval.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: 'Model', maxConnections: 1, type: NodeConnectionTypes.AiLanguageModel, required: true, }, { displayName: 'Retriever', maxConnections: 1, type: NodeConnectionTypes.AiRetriever, required: true, },",
    "outputs": "{ displayName: 'Retriever', maxConnections: 1, type: NodeConnectionTypes.AiRetriever, },",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "retrieverMultiQuery",
        "displayName": "MultiQuery Retriever"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "queryCount",
        "displayName": "Query Count",
        "default": "3",
        "typeOptions": {
          "minValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "RetrieverWorkflow": {
    "name": "RetrieverWorkflow",
    "displayName": "RetrieverWorkflow",
    "type": "n8n-nodes-base.RetrieverWorkflow",
    "subtitle": null,
    "description": "Use an n8n Workflow as Retriever",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "{ displayName: 'Retriever', maxConnections: 1, type: NodeConnectionTypes.AiRetriever, },",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "retrieverWorkflow",
        "displayName": "Workflow Retriever"
      },
      {
        "name": "executeNotice",
        "displayName": "The workflow will receive \"query\" as input and the output of the last node will be returned and converted to Documents",
        "type": "notice",
        "default": ""
      },
      {
        "name": "source",
        "displayName": "Source",
        "type": "options"
      },
      {
        "name": "workflowId",
        "displayName": "Workflow ID",
        "type": "string"
      },
      {
        "name": "workflowJson",
        "displayName": "Workflow JSON",
        "type": "json"
      },
      {
        "name": "fields",
        "displayName": "Workflow Values",
        "type": "fixedCollection",
        "placeholder": "Add Value"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": "",
        "placeholder": "e.g. fieldName"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "stringValue",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "numberValue",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "booleanValue",
        "displayName": "Value",
        "type": "options",
        "default": "true"
      },
      {
        "name": "arrayValue",
        "displayName": "Value",
        "type": "string",
        "default": "",
        "placeholder": "e.g. [ arrayItem1, arrayItem2, arrayItem3 ]"
      },
      {
        "name": "objectValue",
        "displayName": "Value",
        "type": "json"
      }
    ]
  },
  "TextSplitterCharacterTextSplitter": {
    "name": "TextSplitterCharacterTextSplitter",
    "displayName": "TextSplitterCharacterTextSplitter",
    "type": "n8n-nodes-base.TextSplitterCharacterTextSplitter",
    "subtitle": null,
    "description": "Split text into chunks by characters",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTextSplitter",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "textSplitterCharacterTextSplitter",
        "displayName": "Character Text Splitter"
      },
      {
        "name": "separator",
        "displayName": "Separator",
        "type": "string",
        "default": ""
      },
      {
        "name": "chunkSize",
        "displayName": "Chunk Size",
        "type": "number",
        "default": "1000"
      },
      {
        "name": "chunkOverlap",
        "displayName": "Chunk Overlap",
        "type": "number",
        "default": "0"
      }
    ],
    "version": 1.0
  },
  "TextSplitterRecursiveCharacterTextSplitter": {
    "name": "TextSplitterRecursiveCharacterTextSplitter",
    "displayName": "TextSplitterRecursiveCharacterTextSplitter",
    "type": "n8n-nodes-base.TextSplitterRecursiveCharacterTextSplitter",
    "subtitle": null,
    "description": "Split text into chunks by characters recursively, recommended for most use cases",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTextSplitter",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "textSplitterRecursiveCharacterTextSplitter",
        "displayName": "Recursive Character Text Splitter"
      },
      {
        "name": "chunkSize",
        "displayName": "Chunk Size",
        "type": "number",
        "default": "1000"
      },
      {
        "name": "chunkOverlap",
        "displayName": "Chunk Overlap",
        "type": "number",
        "default": "0"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "splitCode",
        "displayName": "Split Code",
        "type": "options",
        "default": "markdown"
      }
    ],
    "version": 1.0
  },
  "TextSplitterTokenSplitter": {
    "name": "TextSplitterTokenSplitter",
    "displayName": "TextSplitterTokenSplitter",
    "type": "n8n-nodes-base.TextSplitterTokenSplitter",
    "subtitle": null,
    "description": "Split text into chunks by tokens",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTextSplitter",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "textSplitterTokenSplitter",
        "displayName": "Token Splitter"
      },
      {
        "name": "chunkSize",
        "displayName": "Chunk Size",
        "type": "number",
        "default": "1000"
      },
      {
        "name": "chunkOverlap",
        "displayName": "Chunk Overlap",
        "type": "number",
        "default": "0"
      }
    ],
    "version": 1.0
  },
  "ToolCalculator": {
    "name": "ToolCalculator",
    "displayName": "ToolCalculator",
    "type": "n8n-nodes-base.ToolCalculator",
    "subtitle": null,
    "description": "Make it easier for AI agents to perform arithmetic",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "toolCalculator",
        "displayName": "Calculator"
      }
    ],
    "version": 1.0
  },
  "ToolCode": {
    "name": "ToolCode",
    "displayName": "ToolCode",
    "type": "n8n-nodes-base.ToolCode",
    "subtitle": null,
    "description": "Write a tool in JS or Python",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "toolCode",
        "displayName": "Code Tool"
      },
      {
        "name": "noticeTemplateExample",
        "displayName": "See an example of a conversational agent with custom tool written in JavaScript <a href=\"/templates/1963\" target=\"_blank\">here</a>.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "placeholder": "My_Tool"
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": "",
        "placeholder": "Call this tool to get a random color. The input should be a string with comma separted names of colors to exclude."
      },
      {
        "name": "language",
        "displayName": "Language",
        "type": "options"
      },
      {
        "name": "jsCode",
        "displayName": "JavaScript",
        "type": "string"
      },
      {
        "name": "pythonCode",
        "displayName": "Python",
        "type": "string"
      },
      {
        "name": "specifyInputSchema",
        "displayName": "Specify Input Schema",
        "type": "boolean"
      }
    ]
  },
  "ToolHttpRequest": {
    "name": "ToolHttpRequest",
    "displayName": "ToolHttpRequest",
    "type": "n8n-nodes-base.ToolHttpRequest",
    "subtitle": "={{ $parameter.toolDescription }}",
    "description": "Makes an HTTP request and returns the response data",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "toolHttpRequest",
        "displayName": "HTTP Request Tool"
      },
      {
        "name": "toolDescription",
        "displayName": "Description",
        "type": "string",
        "default": "",
        "placeholder": "e.g. Get the current weather in the requested city"
      },
      {
        "name": "method",
        "displayName": "Method",
        "type": "options"
      },
      {
        "name": "placeholderNotice",
        "displayName": "Tip: You can use a {placeholder} for any part of the request to be filled by the model. Provide more context about them in the placeholders section",
        "type": "notice",
        "default": ""
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "sendQuery",
        "displayName": "Send Query Parameters",
        "type": "boolean"
      },
      {
        "name": "specifyQuery",
        "displayName": "Specify Query Parameters"
      },
      {
        "name": "parametersQuery",
        "displayName": "Query Parameters"
      },
      {
        "name": "sendHeaders",
        "displayName": "Send Headers",
        "type": "boolean"
      },
      {
        "name": "specifyHeaders",
        "displayName": "Specify Headers"
      },
      {
        "name": "parametersHeaders",
        "displayName": "Header Parameters"
      },
      {
        "name": "sendBody",
        "displayName": "Send Body",
        "type": "boolean"
      },
      {
        "name": "specifyBody",
        "displayName": "Specify Body"
      },
      {
        "name": "parametersBody",
        "displayName": "Body Parameters"
      }
    ]
  },
  "ToolSearXng": {
    "name": "ToolSearXng",
    "displayName": "ToolSearXng",
    "type": "n8n-nodes-base.ToolSearXng",
    "subtitle": null,
    "description": "Search in SearXNG",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": "{ name: 'searXngApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "toolSearXng",
        "displayName": "SearXNG"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "numResults",
        "displayName": "Number of Results",
        "type": "number",
        "default": "10"
      },
      {
        "name": "pageNumber",
        "displayName": "Search Page Number",
        "type": "number",
        "default": "1"
      },
      {
        "name": "language",
        "displayName": "Language",
        "type": "string",
        "default": "en"
      },
      {
        "name": "safesearch",
        "displayName": "Safe Search",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ToolSerpApi": {
    "name": "ToolSerpApi",
    "displayName": "ToolSerpApi",
    "type": "n8n-nodes-base.ToolSerpApi",
    "subtitle": null,
    "description": "Search in Google using SerpAPI",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": "{ name: 'serpApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "toolSerpApi",
        "displayName": "SerpApi (Google Search)"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "gl",
        "displayName": "Country",
        "type": "string",
        "default": "us"
      },
      {
        "name": "device",
        "displayName": "Device",
        "type": "options"
      },
      {
        "name": "no_cache",
        "displayName": "Explicit Array",
        "type": "boolean"
      },
      {
        "name": "google_domain",
        "displayName": "Google Domain",
        "type": "string",
        "default": "google.com"
      },
      {
        "name": "hl",
        "displayName": "Language",
        "type": "string",
        "default": "en"
      }
    ],
    "version": 1.0
  },
  "ToolThink": {
    "name": "ToolThink",
    "displayName": "ToolThink",
    "type": "n8n-nodes-base.ToolThink",
    "subtitle": null,
    "description": "Invite the AI agent to do some thinking",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "toolThink",
        "displayName": "Think Tool"
      },
      {
        "name": "description",
        "displayName": "Think Tool Description",
        "type": "string",
        "placeholder": "[Describe your thinking tool here, explaining how it will help the AI think]"
      }
    ]
  },
  "ToolVectorStore": {
    "name": "ToolVectorStore",
    "displayName": "ToolVectorStore",
    "type": "n8n-nodes-base.ToolVectorStore",
    "subtitle": null,
    "description": "Answer questions with a vector store",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: 'Vector Store', maxConnections: 1, type: NodeConnectionTypes.AiVectorStore, required: true, }, { displayName: 'Model', maxConnections: 1, type: NodeConnectionTypes.AiLanguageModel, required: true, },",
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "toolVectorStore",
        "displayName": "Vector Store Question Answer Tool"
      },
      {
        "name": "name",
        "displayName": "Data Name",
        "type": "string",
        "default": "",
        "placeholder": "e.g. users_info"
      },
      {
        "name": "description",
        "displayName": "Description of Data",
        "type": "string",
        "default": "",
        "placeholder": "[Describe your data here, e.g. a user's name, email, etc.]"
      },
      {
        "name": "topK",
        "displayName": "Limit",
        "type": "number",
        "default": "4"
      }
    ]
  },
  "ToolWikipedia": {
    "name": "ToolWikipedia",
    "displayName": "ToolWikipedia",
    "type": "n8n-nodes-base.ToolWikipedia",
    "subtitle": null,
    "description": "Search in Wikipedia",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "toolWikipedia",
        "displayName": "Wikipedia"
      }
    ],
    "version": 1.0
  },
  "ToolWolframAlpha": {
    "name": "ToolWolframAlpha",
    "displayName": "ToolWolframAlpha",
    "type": "n8n-nodes-base.ToolWolframAlpha",
    "subtitle": null,
    "description": "Connects to WolframAlpha's computational intelligence engine.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.AiTool",
    "credentials": "{ name: 'wolframAlphaApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "toolWolframAlpha",
        "displayName": "Wolfram|Alpha"
      }
    ],
    "version": 1.0
  },
  "ToolWorkflow": {
    "name": "toolWorkflow",
    "displayName": "Call n8n Sub-Workflow Tool",
    "type": "n8n-nodes-base.ToolWorkflow",
    "subtitle": null,
    "description": "Uses another n8n workflow as a tool. Allows packaging any n8n node(s) as a tool.",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.2,
    "availableVersions": [
      1.0,
      1.1,
      1.2,
      1.3,
      2.0,
      2.1,
      2.2
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "toolWorkflow",
        "displayName": "Call n8n Sub-Workflow Tool"
      }
    ]
  },
  "ToolWorkflowV1": {
    "name": "ToolWorkflowV1",
    "displayName": "ToolWorkflowV1",
    "type": "n8n-nodes-base.ToolWorkflowV1",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "toolWorkflow",
        "displayName": "Call n8n Workflow Tool"
      },
      {
        "name": "noticeTemplateExample",
        "displayName": "See an example of a workflow to suggest meeting slots using AI <a href=\"/templates/1953\" target=\"_blank\">here</a>.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "placeholder": "My_Color_Tool"
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": "",
        "placeholder": "Call this tool to get a random color. The input should be a string with comma separted names of colors to exclude."
      },
      {
        "name": "executeNotice",
        "displayName": "This tool will call the workflow you define below, and look in the last node for the response. The workflow needs to start with an Execute Workflow trigger",
        "type": "notice",
        "default": ""
      },
      {
        "name": "source",
        "displayName": "Source",
        "type": "options"
      },
      {
        "name": "workflowId",
        "displayName": "Workflow ID",
        "type": "string"
      },
      {
        "name": "workflowJson",
        "displayName": "Workflow JSON",
        "type": "json"
      },
      {
        "name": "responsePropertyName",
        "displayName": "Field to Return",
        "type": "string",
        "default": "response",
        "required": true
      },
      {
        "name": "fields",
        "displayName": "Extra Workflow Inputs",
        "type": "fixedCollection",
        "placeholder": "Add Value"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": "",
        "placeholder": "e.g. fieldName"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "stringValue",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "numberValue",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "booleanValue",
        "displayName": "Value",
        "type": "options",
        "default": "true"
      },
      {
        "name": "arrayValue",
        "displayName": "Value",
        "type": "string",
        "default": "",
        "placeholder": "e.g. [ arrayItem1, arrayItem2, arrayItem3 ]"
      },
      {
        "name": "objectValue",
        "displayName": "Value",
        "type": "json"
      },
      {
        "name": "specifyInputSchema",
        "displayName": "Specify Input Schema",
        "type": "boolean"
      }
    ]
  },
  "ToolWorkflowV2": {
    "name": "ToolWorkflowV2",
    "displayName": "ToolWorkflowV2",
    "type": "n8n-nodes-base.ToolWorkflowV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "toolWorkflow",
        "displayName": "Call n8n Workflow Tool"
      },
      {
        "name": "noticeTemplateExample",
        "displayName": "See an example of a workflow to suggest meeting slots using AI <a href=\"/templates/1953\" target=\"_blank\">here</a>.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "placeholder": "e.g. My_Color_Tool"
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": "",
        "placeholder": "Call this tool to get a random color. The input should be a string with comma separated names of colors to exclude."
      },
      {
        "name": "executeNotice",
        "displayName": "This tool will call the workflow you define below, and look in the last node for the response. The workflow needs to start with an Execute Workflow trigger",
        "type": "notice",
        "default": ""
      },
      {
        "name": "source",
        "displayName": "Source",
        "type": "options"
      },
      {
        "name": "workflowId",
        "displayName": "Workflow",
        "type": "workflowSelector"
      },
      {
        "name": "workflowInputs",
        "displayName": "Workflow Inputs",
        "type": "resourceMapper"
      },
      {
        "name": "workflowJson",
        "displayName": "Workflow JSON",
        "type": "json"
      }
    ]
  },
  "Chat": {
    "name": "Chat",
    "displayName": "Chat",
    "type": "n8n-nodes-base.Chat",
    "subtitle": null,
    "description": "Sets the condition for the execution to resume. Can be a specified date or after some time.",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "limitType",
        "displayName": "Limit Type",
        "type": "options",
        "default": "afterTimeInterval"
      },
      {
        "name": "resumeAmount",
        "displayName": "Amount",
        "type": "number"
      },
      {
        "name": "resumeUnit",
        "displayName": "Unit",
        "type": "options"
      },
      {
        "name": "maxDateAndTime",
        "displayName": "Max Date and Time",
        "type": "dateTime"
      },
      {
        "name": "limitWaitTime",
        "displayName": "Limit Wait Time",
        "type": "fixedCollection"
      },
      {
        "name": "values",
        "displayName": "Values"
      },
      {
        "name": "chat",
        "displayName": "Respond to Chat"
      },
      {
        "name": "generalNotice",
        "displayName": "Verify you're using a chat trigger with the 'Response Mode' option set to 'Using Response Nodes'",
        "type": "notice",
        "default": ""
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "memoryConnection",
        "displayName": "Add Memory Input Connection",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "ChatTrigger": {
    "name": "ChatTrigger",
    "displayName": "ChatTrigger",
    "type": "n8n-nodes-base.ChatTrigger",
    "subtitle": null,
    "description": "Whether to allow file uploads in the chat",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ // eslint-disable-next-line n8n-nodes-base/node-class-description-credentials-name-unsuffixed name: 'httpBasicAuth', required: true, displayOptions: { show: { authentication: ['basicAuth'",
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', path: CHAT_TRIGGER_PATH_IDENTIFIER, ndvHideUrl: true, }, { name: 'default', httpMethod: 'POST', responseMode: '={{$parameter.options?.[\"responseMode\"",
    "properties": [
      {
        "name": "allowFileUploads",
        "displayName": "Allow File Uploads",
        "type": "boolean"
      },
      {
        "name": "allowedFilesMimeTypes",
        "displayName": "Allowed File Mime Types",
        "type": "string",
        "default": "*",
        "placeholder": "e.g. image/*, text/*, application/pdf"
      },
      {
        "name": "allowedOrigins",
        "displayName": "Allowed Origins (CORS)",
        "type": "string",
        "default": "*"
      },
      {
        "name": "inputPlaceholder",
        "displayName": "Input Placeholder",
        "type": "string"
      },
      {
        "name": "loadPreviousSession",
        "displayName": "Load Previous Session",
        "type": "options"
      },
      {
        "name": "showWelcomeScreen",
        "displayName": "Require Button Click to Start Chat",
        "type": "boolean"
      },
      {
        "name": "getStarted",
        "displayName": "Start Conversation Button Text",
        "type": "string"
      },
      {
        "name": "subtitle",
        "displayName": "Subtitle",
        "type": "string"
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string"
      },
      {
        "name": "customCss",
        "displayName": "Custom Chat Styling",
        "type": "string"
      },
      {
        "name": "chatTrigger",
        "displayName": "Chat Trigger"
      },
      {
        "name": "public",
        "displayName": "Make Chat Publicly Available",
        "type": "boolean"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "hostedChatNotice",
        "displayName": "Chat will be live at the URL above once you activate this workflow. Live executions will show up in the ‘executions’ tab",
        "type": "notice"
      },
      {
        "name": "embeddedChatNotice",
        "displayName": "Follow the instructions <a href=\"https://www.npmjs.com/package/@n8n/chat\" target=\"_blank\">here</a> to embed chat in a webpage (or just call the webhook URL at the top of this section). Chat will be live once you activate this workflow",
        "type": "notice"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "initialMessages",
        "displayName": "Initial Message(s)",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "responseMode",
        "displayName": "Response Mode",
        "type": "options",
        "default": "lastNode"
      }
    ]
  },
  "ManualChatTrigger": {
    "name": "ManualChatTrigger",
    "displayName": "ManualChatTrigger",
    "type": "n8n-nodes-base.ManualChatTrigger",
    "subtitle": null,
    "description": "Runs the flow on new manual chat message",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "manualChatTrigger",
        "displayName": "Manual Chat Trigger"
      },
      {
        "name": "notice",
        "displayName": "This node is where a manual chat workflow execution starts. To make one, go back to the canvas and click ‘Chat’",
        "type": "notice",
        "default": ""
      },
      {
        "name": "openChat",
        "displayName": "Chat and execute workflow",
        "type": "button"
      }
    ]
  },
  "VectorStoreInMemory": {
    "name": "VectorStoreInMemory",
    "displayName": "VectorStoreInMemory",
    "type": "n8n-nodes-base.VectorStoreInMemory",
    "subtitle": null,
    "description": "Whether to clear the store before inserting new data",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "notice",
        "displayName": "<strong>For experimental use only</strong>: Data is stored in memory and will be lost if n8n restarts. Data may also be cleared if available memory gets low, and is accessible to all users of this instance. <a href=\"https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/\">More info</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "clearStore",
        "displayName": "Clear Store",
        "type": "boolean"
      },
      {
        "name": "vectorStoreInMemory",
        "displayName": "Simple Vector Store"
      },
      {
        "name": "memoryKey",
        "displayName": "Memory Key",
        "type": "string"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list"
      },
      {
        "name": "id",
        "displayName": "Manual",
        "type": "string"
      }
    ]
  },
  "VectorStoreInMemoryInsert": {
    "name": "VectorStoreInMemoryInsert",
    "displayName": "VectorStoreInMemoryInsert",
    "type": "n8n-nodes-base.VectorStoreInMemoryInsert",
    "subtitle": null,
    "description": "Insert data into an in-memory vector store",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main, { displayName: 'Document', maxConnections: 1, type: NodeConnectionTypes.AiDocument, required: true, }, { displayName: 'Embedding', maxConnections: 1, type: NodeConnectionTypes.AiEmbedding, required: true, },",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "vectorStoreInMemoryInsert",
        "displayName": "In Memory Vector Store Insert"
      },
      {
        "name": "notice",
        "displayName": "The embbded data are stored in the server memory, so they will be lost when the server is restarted. Additionally, if the amount of data is too large, it may cause the server to crash due to insufficient memory.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "clearStore",
        "displayName": "Clear Store",
        "type": "boolean"
      },
      {
        "name": "memoryKey",
        "displayName": "Memory Key",
        "type": "string",
        "default": "vector_store_key"
      }
    ],
    "version": 1.0
  },
  "VectorStoreInMemoryLoad": {
    "name": "VectorStoreInMemoryLoad",
    "displayName": "VectorStoreInMemoryLoad",
    "type": "n8n-nodes-base.VectorStoreInMemoryLoad",
    "subtitle": null,
    "description": "Load embedded data from an in-memory vector store",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: 'Embedding', maxConnections: 1, type: NodeConnectionTypes.AiEmbedding, required: true, },",
    "outputs": "NodeConnectionTypes.AiVectorStore",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "vectorStoreInMemoryLoad",
        "displayName": "In Memory Vector Store Load"
      },
      {
        "name": "memoryKey",
        "displayName": "Memory Key",
        "type": "string",
        "default": "vector_store_key"
      }
    ],
    "version": 1.0
  },
  "VectorStoreMongoDBAtlas": {
    "name": "VectorStoreMongoDBAtlas",
    "displayName": "VectorStoreMongoDBAtlas",
    "type": "n8n-nodes-base.VectorStoreMongoDBAtlas",
    "subtitle": null,
    "description": "The name of the vector index",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": "{ name: 'mongoDb', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "list",
        "displayName": "From List",
        "type": "list"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "placeholder": "e.g. my_collection"
      },
      {
        "name": "namespace",
        "displayName": "Namespace",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "clearNamespace",
        "displayName": "Clear Namespace",
        "type": "boolean"
      },
      {
        "name": "vectorStoreMongoDBAtlas",
        "displayName": "MongoDB Atlas Vector Store"
      }
    ]
  },
  "VectorStorePinecone": {
    "name": "VectorStorePinecone",
    "displayName": "VectorStorePinecone",
    "type": "n8n-nodes-base.VectorStorePinecone",
    "subtitle": null,
    "description": "Partition the records in an index into namespaces. Queries and other operations are then limited to one namespace, so different requests can search different subsets of your index.",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": "{ name: 'pineconeApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "pineconeNamespace",
        "displayName": "Pinecone Namespace",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "clearNamespace",
        "displayName": "Clear Namespace",
        "type": "boolean"
      },
      {
        "name": "vectorStorePinecone",
        "displayName": "Pinecone Vector Store"
      }
    ]
  },
  "VectorStorePineconeInsert": {
    "name": "VectorStorePineconeInsert",
    "displayName": "VectorStorePineconeInsert",
    "type": "n8n-nodes-base.VectorStorePineconeInsert",
    "subtitle": null,
    "description": "Insert data into Pinecone Vector Store index",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main, { displayName: 'Document', maxConnections: 1, type: NodeConnectionTypes.AiDocument, required: true, }, { displayName: 'Embedding', maxConnections: 1, type: NodeConnectionTypes.AiEmbedding, required: true, },",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'pineconeApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "vectorStorePineconeInsert",
        "displayName": "Pinecone: Insert"
      },
      {
        "name": "pineconeNamespace",
        "displayName": "Pinecone Namespace",
        "type": "string",
        "default": ""
      },
      {
        "name": "notice",
        "displayName": "Specify the document to load in the document loader sub-node",
        "type": "notice",
        "default": ""
      },
      {
        "name": "clearNamespace",
        "displayName": "Clear Namespace",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "VectorStorePineconeLoad": {
    "name": "VectorStorePineconeLoad",
    "displayName": "VectorStorePineconeLoad",
    "type": "n8n-nodes-base.VectorStorePineconeLoad",
    "subtitle": null,
    "description": "Load data from Pinecone Vector Store index",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "{ displayName: 'Embedding', maxConnections: 1, type: NodeConnectionTypes.AiEmbedding, required: true, },",
    "outputs": "NodeConnectionTypes.AiVectorStore",
    "credentials": "{ name: 'pineconeApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "vectorStorePineconeLoad",
        "displayName": "Pinecone: Load"
      },
      {
        "name": "pineconeNamespace",
        "displayName": "Pinecone Namespace",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      }
    ],
    "version": 1.0
  },
  "VectorStoreQdrant": {
    "name": "VectorStoreQdrant",
    "displayName": "VectorStoreQdrant",
    "type": "n8n-nodes-base.VectorStoreQdrant",
    "subtitle": null,
    "description": "JSON options for creating a collection. <a href=\"https://qdrant.tech/documentation/concepts/collections\">Learn more</a>.",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": "{ name: 'qdrantApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "collectionConfig",
        "displayName": "Collection Config",
        "type": "json",
        "default": ""
      },
      {
        "name": "searchFilterJson",
        "displayName": "Search Filter",
        "type": "json"
      },
      {
        "name": "vectorStoreQdrant",
        "displayName": "Qdrant Vector Store",
        "required": true
      }
    ]
  },
  "VectorStoreWeaviate": {
    "name": "VectorStoreWeaviate",
    "displayName": "VectorStoreWeaviate",
    "type": "n8n-nodes-base.VectorStoreWeaviate",
    "subtitle": null,
    "description": "Tenant Name. Collection must have been created with tenant support enabled.",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": "{ name: 'weaviateApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "tenant",
        "displayName": "Tenant Name",
        "type": "string"
      },
      {
        "name": "textKey",
        "displayName": "Text Key",
        "type": "string",
        "default": "text"
      },
      {
        "name": "skip_init_checks",
        "displayName": "Skip Init Checks",
        "type": "boolean"
      },
      {
        "name": "timeout_init",
        "displayName": "Init Timeout",
        "type": "number",
        "default": "2"
      },
      {
        "name": "timeout_insert",
        "displayName": "Insert Timeout",
        "type": "number",
        "default": "90"
      },
      {
        "name": "timeout_query",
        "displayName": "Query Timeout",
        "type": "number",
        "default": "30"
      },
      {
        "name": "proxy_grpc",
        "displayName": "GRPC Proxy",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "clearStore",
        "displayName": "Clear Data",
        "type": "boolean"
      },
      {
        "name": "searchFilterJson",
        "displayName": "Search Filters",
        "type": "json"
      },
      {
        "name": "metadataKeys",
        "displayName": "Metadata Keys",
        "type": "string",
        "default": "source,page"
      },
      {
        "name": "vectorStoreWeaviate",
        "displayName": "Weaviate Vector Store",
        "required": true
      }
    ]
  },
  "Anthropic": {
    "name": "Anthropic",
    "displayName": "Anthropic",
    "type": "n8n-nodes-base.Anthropic",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "anthropic",
        "displayName": "Anthropic"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "GoogleGemini": {
    "name": "GoogleGemini",
    "displayName": "GoogleGemini",
    "type": "n8n-nodes-base.GoogleGemini",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "googleGemini",
        "displayName": "Google Gemini"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "OpenAi": {
    "name": "OpenAi",
    "displayName": "OpenAi",
    "type": "n8n-nodes-base.OpenAi",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Open AI",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'openAiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "openAi",
        "displayName": "OpenAI"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "ActionNetwork": {
    "name": "ActionNetwork",
    "displayName": "ActionNetwork",
    "type": "n8n-nodes-base.ActionNetwork",
    "subtitle": "={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}",
    "description": "Consume the Action Network API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'actionNetworkApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "actionNetwork",
        "displayName": "Action Network"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ActiveCampaign": {
    "name": "ActiveCampaign",
    "displayName": "ActiveCampaign",
    "type": "n8n-nodes-base.ActiveCampaign",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Create and edit data in ActiveCampaign",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'activeCampaignApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "activeCampaign",
        "displayName": "ActiveCampaign"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ActiveCampaignTrigger": {
    "name": "ActiveCampaignTrigger",
    "displayName": "ActiveCampaignTrigger",
    "type": "n8n-nodes-base.ActiveCampaignTrigger",
    "subtitle": null,
    "description": "Handle ActiveCampaign events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'activeCampaignApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "activeCampaignTrigger",
        "displayName": "ActiveCampaign Trigger"
      },
      {
        "name": "events",
        "displayName": "Event Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "sources",
        "displayName": "Source",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "AcuitySchedulingTrigger": {
    "name": "AcuitySchedulingTrigger",
    "displayName": "AcuitySchedulingTrigger",
    "type": "n8n-nodes-base.AcuitySchedulingTrigger",
    "subtitle": null,
    "description": "Handle Acuity Scheduling events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'acuitySchedulingApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "acuitySchedulingTrigger",
        "displayName": "Acuity Scheduling Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "resolveData",
        "displayName": "Resolve Data",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Adalo": {
    "name": "Adalo",
    "displayName": "Adalo",
    "type": "n8n-nodes-base.Adalo",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"collectionId\"]}}",
    "description": "Consume Adalo API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'adaloApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "adalo",
        "displayName": "Adalo"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "collection"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "collectionId",
        "displayName": "Collection ID",
        "type": "string",
        "default": "",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Affinity": {
    "name": "Affinity",
    "displayName": "Affinity",
    "type": "n8n-nodes-base.Affinity",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Affinity API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'affinityApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "affinity",
        "displayName": "Affinity"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "AffinityTrigger": {
    "name": "AffinityTrigger",
    "displayName": "AffinityTrigger",
    "type": "n8n-nodes-base.AffinityTrigger",
    "subtitle": null,
    "description": "Handle Affinity events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'affinityApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "affinityTrigger",
        "displayName": "Affinity Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "AgileCrm": {
    "name": "AgileCrm",
    "displayName": "AgileCrm",
    "type": "n8n-nodes-base.AgileCrm",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Agile CRM API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'agileCrmApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "agileCrm",
        "displayName": "Agile CRM"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Airtable": {
    "name": "airtable",
    "displayName": "Airtable",
    "type": "n8n-nodes-base.Airtable",
    "subtitle": null,
    "description": "Read, update, write and delete data from Airtable",
    "group": [
      "input"
    ],
    "defaultVersion": 2.1,
    "availableVersions": [
      1.0,
      2.0,
      2.1
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "airtable",
        "displayName": "Airtable"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "deprecated",
        "displayName": "This type of connection (API Key) was deprecated and can't be used anymore. Please create a new credential of type 'Access Token' instead.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "application",
        "displayName": "Base",
        "type": "resourceLocator"
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string",
        "placeholder": "https://airtable.com/app12DiScdfes/tblAAAAAAAAAAAAA/viwHdfasdfeieg5p"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "resourceLocator"
      },
      {
        "name": "addAllFields",
        "displayName": "Add All Fields",
        "type": "boolean"
      },
      {
        "name": "fields",
        "displayName": "Fields",
        "type": "string"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "downloadAttachments",
        "displayName": "Download Attachments",
        "type": "boolean"
      },
      {
        "name": "downloadFieldNames",
        "displayName": "Download Fields",
        "type": "string",
        "required": true
      },
      {
        "name": "additionalOptions",
        "displayName": "Additional Options",
        "type": "collection"
      },
      {
        "name": "filterByFormula",
        "displayName": "Filter By Formula",
        "type": "string",
        "default": ""
      },
      {
        "name": "sort",
        "displayName": "Sort",
        "type": "fixedCollection",
        "placeholder": "Add Sort Rule"
      },
      {
        "name": "property",
        "displayName": "Property",
        "type": "string",
        "default": ""
      },
      {
        "name": "direction",
        "displayName": "Direction",
        "type": "options"
      },
      {
        "name": "view",
        "displayName": "View",
        "type": "string",
        "default": "",
        "placeholder": "All Stories"
      },
      {
        "name": "updateAllFields",
        "displayName": "Update All Fields",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "bulkSize",
        "displayName": "Bulk Size",
        "type": "number",
        "typeOptions": {
          "minValue": 1,
          "maxValue": 10
        }
      },
      {
        "name": "ignoreFields",
        "displayName": "Ignore Fields",
        "type": "string"
      },
      {
        "name": "typecast",
        "displayName": "Typecast",
        "type": "boolean"
      }
    ]
  },
  "AirtableTrigger": {
    "name": "AirtableTrigger",
    "displayName": "AirtableTrigger",
    "type": "n8n-nodes-base.AirtableTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Starts the workflow when Airtable events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'airtableApi', required: true, displayOptions: { show: { authentication: ['airtableApi'",
    "webhooks": [],
    "properties": [
      {
        "name": "airtableTrigger",
        "displayName": "Airtable Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "baseId",
        "displayName": "Base",
        "type": "resourceLocator"
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string",
        "placeholder": "https://airtable.com/app12DiScdfes/tblAAAAAAAAAAAAA/viwHdfasdfeieg5p"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "tableId",
        "displayName": "Table",
        "type": "resourceLocator"
      },
      {
        "name": "triggerField",
        "displayName": "Trigger Field",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "downloadAttachments",
        "displayName": "Download Attachments",
        "type": "boolean"
      },
      {
        "name": "downloadFieldNames",
        "displayName": "Download Fields",
        "type": "string",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "fields",
        "displayName": "Fields",
        "type": "string",
        "default": ""
      },
      {
        "name": "formula",
        "displayName": "Formula",
        "type": "string",
        "default": ""
      },
      {
        "name": "viewId",
        "displayName": "View ID",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Airtop": {
    "name": "Airtop",
    "displayName": "Airtop",
    "type": "n8n-nodes-base.Airtop",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "Scrape and control any site with Airtop",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'airtopApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "airtop",
        "displayName": "Airtop"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "AiTransform": {
    "name": "AiTransform",
    "displayName": "AiTransform",
    "type": "n8n-nodes-base.AiTransform",
    "subtitle": null,
    "description": "Modify data based on instructions written in plain english",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "aiTransform",
        "displayName": "AI Transform"
      },
      {
        "name": "instructions",
        "displayName": "Instructions",
        "type": "button",
        "default": "",
        "placeholder": "Example: Merge 'firstname' and 'lastname' into a field 'details.name' and sort by 'email'"
      }
    ],
    "version": 1.0
  },
  "Amqp": {
    "name": "Amqp",
    "displayName": "Amqp",
    "type": "n8n-nodes-base.Amqp",
    "subtitle": null,
    "description": "Sends a raw-message via AMQP 1.0, executed once per item",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'amqp', required: true, testedBy: 'amqpConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "amqp",
        "displayName": "AMQP Sender"
      },
      {
        "name": "sink",
        "displayName": "Queue / Topic",
        "type": "string",
        "default": "",
        "placeholder": "e.g. topic://sourcename.something"
      },
      {
        "name": "headerParametersJson",
        "displayName": "Headers",
        "type": "json",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "containerId",
        "displayName": "Container ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "dataAsObject",
        "displayName": "Data as Object",
        "type": "boolean"
      },
      {
        "name": "reconnect",
        "displayName": "Reconnect",
        "type": "boolean"
      },
      {
        "name": "reconnectLimit",
        "displayName": "Reconnect Limit",
        "type": "number",
        "default": "50"
      },
      {
        "name": "sendOnlyProperty",
        "displayName": "Send Property",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "AmqpTrigger": {
    "name": "AmqpTrigger",
    "displayName": "AmqpTrigger",
    "type": "n8n-nodes-base.AmqpTrigger",
    "subtitle": null,
    "description": "Listens to AMQP 1.0 Messages",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'amqp', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "amqpTrigger",
        "displayName": "AMQP Trigger"
      },
      {
        "name": "sink",
        "displayName": "Queue / Topic",
        "type": "string",
        "default": "",
        "placeholder": "topic://sourcename.something"
      },
      {
        "name": "clientname",
        "displayName": "Clientname",
        "type": "string",
        "default": "",
        "placeholder": "e.g. n8n"
      },
      {
        "name": "subscription",
        "displayName": "Subscription",
        "type": "string",
        "default": "",
        "placeholder": "e.g. order-worker"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "containerId",
        "displayName": "Container ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "jsonConvertByteArrayToString",
        "displayName": "Convert Body To String",
        "type": "boolean"
      },
      {
        "name": "jsonParseBody",
        "displayName": "JSON Parse Body",
        "type": "boolean"
      },
      {
        "name": "pullMessagesNumber",
        "displayName": "Messages per Cicle",
        "type": "number",
        "default": "100"
      },
      {
        "name": "onlyBody",
        "displayName": "Only Body",
        "type": "boolean"
      },
      {
        "name": "parallelProcessing",
        "displayName": "Parallel Processing",
        "type": "boolean"
      },
      {
        "name": "reconnect",
        "displayName": "Reconnect",
        "type": "boolean"
      },
      {
        "name": "reconnectLimit",
        "displayName": "Reconnect Limit",
        "type": "number",
        "default": "50"
      },
      {
        "name": "sleepTime",
        "displayName": "Sleep Time",
        "type": "number",
        "default": "10"
      }
    ],
    "version": 1.0
  },
  "ApiTemplateIo": {
    "name": "ApiTemplateIo",
    "displayName": "ApiTemplateIo",
    "type": "n8n-nodes-base.ApiTemplateIo",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the APITemplate.io API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'apiTemplateIoApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "apiTemplateIo",
        "displayName": "APITemplate.io"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "default": "create",
        "required": true
      },
      {
        "name": "imageTemplateId",
        "displayName": "Template Name or ID",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "pdfTemplateId",
        "displayName": "Template Name or ID",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "jsonParameters",
        "displayName": "JSON Parameters",
        "type": "boolean"
      },
      {
        "name": "download",
        "displayName": "Download",
        "type": "boolean"
      },
      {
        "name": "binaryProperty",
        "displayName": "Put Output File in Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "overridesJson",
        "displayName": "Overrides (JSON)",
        "type": "json",
        "default": ""
      },
      {
        "name": "propertiesJson",
        "displayName": "Properties (JSON)",
        "type": "json",
        "default": ""
      },
      {
        "name": "overridesUi",
        "displayName": "Overrides",
        "type": "fixedCollection",
        "placeholder": "Add Override"
      },
      {
        "name": "overrideValues",
        "displayName": "Override",
        "type": "fixedCollection",
        "placeholder": "Add Property"
      },
      {
        "name": "propertyValues",
        "displayName": "Property",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "propertiesUi",
        "displayName": "Properties",
        "type": "fixedCollection",
        "placeholder": "Add Property"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "fileName",
        "displayName": "File Name",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Asana": {
    "name": "Asana",
    "displayName": "Asana",
    "type": "n8n-nodes-base.Asana",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Asana REST API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'asanaApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "asana",
        "displayName": "Asana"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "taskId",
        "displayName": "Parent Task ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "otherProperties",
        "displayName": "Additional Fields",
        "type": "collection"
      },
      {
        "name": "assignee",
        "displayName": "Assignee Name or ID",
        "type": "options"
      },
      {
        "name": "assignee_status",
        "displayName": "Assignee Status",
        "type": "options"
      },
      {
        "name": "completed",
        "displayName": "Completed",
        "type": "boolean"
      },
      {
        "name": "due_on",
        "displayName": "Due On",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "liked",
        "displayName": "Liked",
        "type": "boolean"
      },
      {
        "name": "notes",
        "displayName": "Notes",
        "type": "string"
      },
      {
        "name": "workspace",
        "displayName": "Workspace Name or ID",
        "type": "options"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "opt_fields",
        "displayName": "Field Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "opt_pretty",
        "displayName": "Pretty",
        "type": "boolean"
      },
      {
        "name": "id",
        "displayName": "Task ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection"
      },
      {
        "name": "project",
        "displayName": "Project Name or ID",
        "type": "options"
      },
      {
        "name": "section",
        "displayName": "Section Name or ID",
        "type": "options"
      },
      {
        "name": "completed_since",
        "displayName": "Completed Since",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "modified_since",
        "displayName": "Modified Since",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "projectId",
        "displayName": "Project Name or ID",
        "type": "options"
      },
      {
        "name": "searchTaskProperties",
        "displayName": "Filters",
        "type": "collection"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string"
      },
      {
        "name": "projects",
        "displayName": "Project Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "isTextHtml",
        "displayName": "Is Text HTML",
        "type": "boolean"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection"
      },
      {
        "name": "is_pinned",
        "displayName": "Pinned",
        "type": "boolean"
      },
      {
        "name": "insert_after",
        "displayName": "Insert After",
        "type": "string",
        "default": ""
      },
      {
        "name": "insert_before",
        "displayName": "Insert Before",
        "type": "string",
        "default": ""
      },
      {
        "name": "tag",
        "displayName": "Tags Name or ID",
        "type": "options"
      },
      {
        "name": "userId",
        "displayName": "User ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "team",
        "displayName": "Team Name or ID",
        "type": "options"
      },
      {
        "name": "color",
        "displayName": "Color",
        "type": "options",
        "default": "none"
      },
      {
        "name": "privacy_setting",
        "displayName": "Privacy Setting",
        "type": "options"
      },
      {
        "name": "archived",
        "displayName": "Archived",
        "type": "boolean"
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection"
      },
      {
        "name": "owner",
        "displayName": "Owner",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "AsanaTrigger": {
    "name": "AsanaTrigger",
    "displayName": "AsanaTrigger",
    "type": "n8n-nodes-base.AsanaTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Asana events occur.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'asanaApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "asanaTrigger",
        "displayName": "Asana Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "workspace",
        "displayName": "Workspace Name or ID",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Automizy": {
    "name": "Automizy",
    "displayName": "Automizy",
    "type": "n8n-nodes-base.Automizy",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Automizy API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'automizyApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "automizy",
        "displayName": "Automizy"
      },
      {
        "name": "deprecated",
        "displayName": "This service may no longer exist and will be removed from n8n in a future release.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Autopilot": {
    "name": "Autopilot",
    "displayName": "Autopilot",
    "type": "n8n-nodes-base.Autopilot",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Autopilot API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'autopilotApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "autopilot",
        "displayName": "Autopilot"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "AutopilotTrigger": {
    "name": "AutopilotTrigger",
    "displayName": "AutopilotTrigger",
    "type": "n8n-nodes-base.AutopilotTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle Autopilot events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'autopilotApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "autopilotTrigger",
        "displayName": "Autopilot Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "",
        "required": true
      }
    ],
    "version": 1.0
  },
  "AwsLambda": {
    "name": "AwsLambda",
    "displayName": "AwsLambda",
    "type": "n8n-nodes-base.AwsLambda",
    "subtitle": "={{$parameter[\"function\"]}}",
    "description": "Invoke functions on AWS Lambda",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsLambda",
        "displayName": "AWS Lambda"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "function",
        "displayName": "Function Name or ID",
        "type": "options"
      },
      {
        "name": "qualifier",
        "displayName": "Qualifier",
        "type": "string"
      },
      {
        "name": "invocationType",
        "displayName": "Invocation Type",
        "type": "options"
      },
      {
        "name": "payload",
        "displayName": "JSON Input",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "AwsSns": {
    "name": "AwsSns",
    "displayName": "AwsSns",
    "type": "n8n-nodes-base.AwsSns",
    "subtitle": "={{$parameter[\"topic\"]}}",
    "description": "Sends data to AWS SNS",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsSns",
        "displayName": "AWS SNS"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "displayName",
        "displayName": "Display Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "fifoTopic",
        "displayName": "Fifo Topic",
        "type": "boolean"
      },
      {
        "name": "topic",
        "displayName": "Topic",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a topic..."
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string",
        "placeholder": "https://us-east-1.console.aws.amazon.com/sns/v3/home?region=us-east-1#/topic/arn:aws:sns:us-east-1:777777777777:your_topic"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "subject",
        "displayName": "Subject",
        "type": "string"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "AwsSnsTrigger": {
    "name": "AwsSnsTrigger",
    "displayName": "AwsSnsTrigger",
    "type": "n8n-nodes-base.AwsSnsTrigger",
    "subtitle": "={{$parameter[\"topic\"].split(\\':\\')[5]}}",
    "description": "Handle AWS SNS events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "topic",
        "displayName": "Topic",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a topic..."
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string",
        "placeholder": "https://us-east-1.console.aws.amazon.com/sns/v3/home?region=us-east-1#/topic/arn:aws:sns:us-east-1:777777777777:your_topic"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "BambooHr": {
    "name": "BambooHr",
    "displayName": "BambooHr",
    "type": "n8n-nodes-base.BambooHr",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "Bannerbear": {
    "name": "Bannerbear",
    "displayName": "Bannerbear",
    "type": "n8n-nodes-base.Bannerbear",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Bannerbear API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'bannerbearApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "bannerbear",
        "displayName": "Bannerbear"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Baserow": {
    "name": "Baserow",
    "displayName": "Baserow",
    "type": "n8n-nodes-base.Baserow",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume the Baserow API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'baserowApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "baserow",
        "displayName": "Baserow"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Beeminder": {
    "name": "Beeminder",
    "displayName": "Beeminder",
    "type": "n8n-nodes-base.Beeminder",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Beeminder API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'beeminderApi', required: true, displayOptions: { show: { authentication: ['apiToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "beeminder",
        "displayName": "Beeminder"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "required": true
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "goalName",
        "displayName": "Goal Name or ID",
        "type": "options"
      },
      {
        "name": "amount",
        "displayName": "Amount",
        "type": "number"
      },
      {
        "name": "datapoints",
        "displayName": "Datapoints",
        "type": "json"
      },
      {
        "name": "slug",
        "displayName": "Goal Slug",
        "type": "string"
      },
      {
        "name": "title",
        "displayName": "Goal Title",
        "type": "string"
      },
      {
        "name": "goal_type",
        "displayName": "Goal Type",
        "type": "options"
      },
      {
        "name": "gunits",
        "displayName": "Goal Units",
        "type": "string"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "number",
        "default": "1",
        "placeholder": ""
      },
      {
        "name": "datapointId",
        "displayName": "Datapoint ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "comment",
        "displayName": "Comment",
        "type": "string",
        "default": ""
      },
      {
        "name": "timestamp",
        "displayName": "Timestamp",
        "type": "dateTime",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "requestid",
        "displayName": "Request ID",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "note",
        "displayName": "Note",
        "type": "string",
        "default": ""
      },
      {
        "name": "dryrun",
        "displayName": "Dry Run",
        "type": "boolean"
      },
      {
        "name": "goaldate",
        "displayName": "Goal Date",
        "type": "dateTime"
      },
      {
        "name": "goalval",
        "displayName": "Goal Value",
        "type": "number"
      },
      {
        "name": "rate",
        "displayName": "Rate",
        "type": "number"
      },
      {
        "name": "initval",
        "displayName": "Initial Value",
        "type": "number",
        "default": "0"
      },
      {
        "name": "secret",
        "displayName": "Secret",
        "type": "boolean"
      },
      {
        "name": "datapublic",
        "displayName": "Data Public",
        "type": "boolean"
      },
      {
        "name": "datasource",
        "displayName": "Data Source",
        "type": "options"
      },
      {
        "name": "tags",
        "displayName": "Tags",
        "type": "json",
        "default": "[]",
        "placeholder": "[\"tag1\", \"tag2\"]"
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "yaxis",
        "displayName": "Y-Axis",
        "type": "string",
        "default": ""
      },
      {
        "name": "tmin",
        "displayName": "Tmin",
        "type": "string",
        "default": "",
        "placeholder": "yyyy-mm-dd"
      },
      {
        "name": "tmax",
        "displayName": "Tmax",
        "type": "string",
        "default": "",
        "placeholder": "yyyy-mm-dd"
      },
      {
        "name": "roadall",
        "displayName": "Road All",
        "type": "json",
        "default": "[]",
        "placeholder": "[[\"2023-01-01\", 0, null], [null, 100, 1]]"
      },
      {
        "name": "emaciated",
        "displayName": "Emaciated",
        "type": "boolean"
      },
      {
        "name": "associations",
        "displayName": "Associations",
        "type": "boolean"
      },
      {
        "name": "diff_since",
        "displayName": "Diff Since",
        "type": "dateTime"
      },
      {
        "name": "skinny",
        "displayName": "Skinny",
        "type": "boolean"
      },
      {
        "name": "datapoints_count",
        "displayName": "Datapoints Count",
        "type": "number"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add field"
      },
      {
        "name": "sort",
        "displayName": "Sort",
        "type": "string",
        "default": "id",
        "placeholder": ""
      },
      {
        "name": "page",
        "displayName": "Page",
        "type": "number"
      },
      {
        "name": "per",
        "displayName": "Per Page",
        "type": "number"
      }
    ],
    "version": 1.0
  },
  "BitbucketTrigger": {
    "name": "BitbucketTrigger",
    "displayName": "BitbucketTrigger",
    "type": "n8n-nodes-base.BitbucketTrigger",
    "subtitle": null,
    "description": "Handle Bitbucket events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'bitbucketApi', required: true, testedBy: 'bitbucketApiTest', },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "bitbucketTrigger",
        "displayName": "Bitbucket Trigger"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "required": true
      },
      {
        "name": "workspace",
        "displayName": "Workspace Name or ID",
        "type": "options"
      },
      {
        "name": "events",
        "displayName": "Event Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "repository",
        "displayName": "Repository Name or ID",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Bitly": {
    "name": "Bitly",
    "displayName": "Bitly",
    "type": "n8n-nodes-base.Bitly",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Bitly API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'bitlyApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "bitly",
        "displayName": "Bitly"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Bitwarden": {
    "name": "Bitwarden",
    "displayName": "Bitwarden",
    "type": "n8n-nodes-base.Bitwarden",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Bitwarden API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'bitwardenApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "bitwarden",
        "displayName": "Bitwarden"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Box": {
    "name": "Box",
    "displayName": "Box",
    "type": "n8n-nodes-base.Box",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Box API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'boxOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "box",
        "displayName": "Box"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "BoxTrigger": {
    "name": "BoxTrigger",
    "displayName": "BoxTrigger",
    "type": "n8n-nodes-base.BoxTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Box events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'boxOAuth2Api', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "boxTrigger",
        "displayName": "Box Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      },
      {
        "name": "targetType",
        "displayName": "Target Type",
        "type": "options"
      },
      {
        "name": "targetId",
        "displayName": "Target ID",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Brandfetch": {
    "name": "Brandfetch",
    "displayName": "Brandfetch",
    "type": "n8n-nodes-base.Brandfetch",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Consume Brandfetch API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'brandfetchApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "Brandfetch",
        "displayName": "Brandfetch"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "domain",
        "displayName": "Domain",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "download",
        "displayName": "Download",
        "type": "boolean",
        "required": true
      },
      {
        "name": "imageTypes",
        "displayName": "Image Type",
        "type": "multiOptions"
      },
      {
        "name": "imageFormats",
        "displayName": "Image Format",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "Brevo": {
    "name": "Brevo",
    "displayName": "Brevo",
    "type": "n8n-nodes-base.Brevo",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Brevo API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'sendInBlueApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "sendInBlue",
        "displayName": "Brevo"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "BrevoTrigger": {
    "name": "BrevoTrigger",
    "displayName": "BrevoTrigger",
    "type": "n8n-nodes-base.BrevoTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Brevo events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'sendInBlueApi', required: true, displayOptions: { show: {}, }, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhooks', },",
    "properties": [
      {
        "name": "type",
        "displayName": "Resource",
        "default": "transactional"
      }
    ],
    "version": 1.0
  },
  "Bubble": {
    "name": "Bubble",
    "displayName": "Bubble",
    "type": "n8n-nodes-base.Bubble",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Bubble Data API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'bubbleApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "bubble",
        "displayName": "Bubble"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "CalTrigger": {
    "name": "CalTrigger",
    "displayName": "CalTrigger",
    "type": "n8n-nodes-base.CalTrigger",
    "subtitle": "=Events: {{$parameter[\"events\"].join(\", \")}}",
    "description": "Handle Cal.com events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'calApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "calTrigger",
        "displayName": "Cal.com Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      },
      {
        "name": "version",
        "displayName": "API Version",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "appId",
        "displayName": "App ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "eventTypeId",
        "displayName": "EventType Name or ID",
        "type": "options"
      },
      {
        "name": "payloadTemplate",
        "displayName": "Payload Template",
        "type": "string",
        "default": ""
      }
    ]
  },
  "CalendlyTrigger": {
    "name": "CalendlyTrigger",
    "displayName": "CalendlyTrigger",
    "type": "n8n-nodes-base.CalendlyTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Calendly events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'calendlyApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "calendlyTrigger",
        "displayName": "Calendly Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "deprecationNotice",
        "displayName": "Action required: Calendly will discontinue API Key authentication on May 31, 2025. Update node to use OAuth2 authentication now to ensure your workflows continue to work.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "scope",
        "displayName": "Scope",
        "type": "options",
        "default": "user",
        "required": true
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "Chargebee": {
    "name": "Chargebee",
    "displayName": "Chargebee",
    "type": "n8n-nodes-base.Chargebee",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Retrieve data from Chargebee API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'chargebeeApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "chargebee",
        "displayName": "Chargebee"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "properties",
        "displayName": "Properties",
        "type": "collection"
      },
      {
        "name": "id",
        "displayName": "User ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "first_name",
        "displayName": "First Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "last_name",
        "displayName": "Last Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "default": "",
        "placeholder": "name@email.com"
      },
      {
        "name": "phone",
        "displayName": "Phone",
        "type": "string",
        "default": ""
      },
      {
        "name": "company",
        "displayName": "Company",
        "type": "string",
        "default": ""
      },
      {
        "name": "customProperties",
        "displayName": "Custom Properties",
        "type": "fixedCollection",
        "placeholder": "Add Custom Property"
      },
      {
        "name": "property",
        "displayName": "Property",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Property Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "maxResults",
        "displayName": "Max Results",
        "type": "number",
        "typeOptions": {
          "minValue": 1,
          "maxValue": 100
        }
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "fixedCollection",
        "placeholder": "Add Filter"
      },
      {
        "name": "date",
        "displayName": "Invoice Date",
        "type": "options"
      },
      {
        "name": "total",
        "displayName": "Invoice Amount",
        "type": "options"
      },
      {
        "name": "invoiceId",
        "displayName": "Invoice ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "subscriptionId",
        "displayName": "Subscription ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "endOfTerm",
        "displayName": "Schedule End of Term",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "ChargebeeTrigger": {
    "name": "ChargebeeTrigger",
    "displayName": "ChargebeeTrigger",
    "type": "n8n-nodes-base.ChargebeeTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Chargebee events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "chargebeeTrigger",
        "displayName": "Chargebee Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions",
        "required": true
      }
    ],
    "version": 1.0
  },
  "CircleCi": {
    "name": "CircleCi",
    "displayName": "CircleCi",
    "type": "n8n-nodes-base.CircleCi",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume CircleCI API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'circleCiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "circleCi",
        "displayName": "CircleCI"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Clearbit": {
    "name": "Clearbit",
    "displayName": "Clearbit",
    "type": "n8n-nodes-base.Clearbit",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume Clearbit API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'clearbitApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "clearbit",
        "displayName": "Clearbit"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ClickUp": {
    "name": "ClickUp",
    "displayName": "ClickUp",
    "type": "n8n-nodes-base.ClickUp",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume ClickUp API (Beta)",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'clickUpApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "clickUp",
        "displayName": "ClickUp"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ClickUpTrigger": {
    "name": "ClickUpTrigger",
    "displayName": "ClickUpTrigger",
    "type": "n8n-nodes-base.ClickUpTrigger",
    "subtitle": null,
    "description": "Handle ClickUp events via webhooks (Beta)",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'clickUpApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "clickUpTrigger",
        "displayName": "ClickUp Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "team",
        "displayName": "Team Name or ID",
        "type": "options"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions",
        "required": true
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "folderId",
        "displayName": "Folder ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "listId",
        "displayName": "List ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "spaceId",
        "displayName": "Space ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "taskId",
        "displayName": "Task ID",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Clockify": {
    "name": "Clockify",
    "displayName": "Clockify",
    "type": "n8n-nodes-base.Clockify",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Clockify REST API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'clockifyApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "clockify",
        "displayName": "Clockify"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "workspaceId",
        "displayName": "Workspace Name or ID",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ClockifyTrigger": {
    "name": "ClockifyTrigger",
    "displayName": "ClockifyTrigger",
    "type": "n8n-nodes-base.ClockifyTrigger",
    "subtitle": null,
    "description": "Listens to Clockify events",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'clockifyApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "workspaceId",
        "displayName": "Workspace Name or ID",
        "type": "options"
      },
      {
        "name": "watchField",
        "displayName": "Trigger",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Cloudflare": {
    "name": "Cloudflare",
    "displayName": "Cloudflare",
    "type": "n8n-nodes-base.Cloudflare",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Cloudflare API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'cloudflareApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "cloudflare",
        "displayName": "Cloudflare"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Cockpit": {
    "name": "Cockpit",
    "displayName": "Cockpit",
    "type": "n8n-nodes-base.Cockpit",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "Consume Cockpit API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'cockpitApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "cockpit",
        "displayName": "Cockpit"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "collection"
      }
    ],
    "version": 1.0
  },
  "Coda": {
    "name": "Coda",
    "displayName": "Coda",
    "type": "n8n-nodes-base.Coda",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Coda API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'codaApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "coda",
        "displayName": "Coda"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "Code": {
    "name": "Code",
    "displayName": "Code",
    "type": "n8n-nodes-base.Code",
    "subtitle": null,
    "description": "Run custom JavaScript or Python code",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "code",
        "displayName": "Code"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "language",
        "displayName": "Language",
        "type": "options"
      }
    ]
  },
  "CoinGecko": {
    "name": "CoinGecko",
    "displayName": "CoinGecko",
    "type": "n8n-nodes-base.CoinGecko",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume CoinGecko API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "coinGecko",
        "displayName": "CoinGecko"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "CompareDatasets": {
    "name": "CompareDatasets",
    "displayName": "CompareDatasets",
    "type": "n8n-nodes-base.CompareDatasets",
    "subtitle": null,
    "description": "Compare two inputs for changes",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main, NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main, NodeConnectionTypes.Main, NodeConnectionTypes.Main, NodeConnectionTypes.Main,",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "compareDatasets",
        "displayName": "Compare Datasets"
      },
      {
        "name": "infoBox",
        "displayName": "Items from different branches are paired together when the fields below match. If paired, the rest of the fields are compared to determine whether the items are the same or different",
        "type": "notice",
        "default": ""
      },
      {
        "name": "mergeByFields",
        "displayName": "Fields to Match",
        "type": "fixedCollection",
        "placeholder": "Add Fields to Match"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "field2",
        "displayName": "Input B Field",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "resolve",
        "displayName": "When There Are Differences",
        "type": "options",
        "default": "preferInput2"
      },
      {
        "name": "fuzzyCompare",
        "displayName": "Fuzzy Compare",
        "type": "boolean"
      },
      {
        "name": "preferWhenMix",
        "displayName": "Prefer",
        "type": "options",
        "default": "input1"
      },
      {
        "name": "exceptWhenMix",
        "displayName": "For Everything Except",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id, country"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "skipFields",
        "displayName": "Fields to Skip Comparing",
        "type": "string",
        "default": "",
        "placeholder": "e.g. updated_at, updated_by"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      },
      {
        "name": "multipleMatches",
        "displayName": "Multiple Matches",
        "type": "options",
        "default": "first"
      }
    ]
  },
  "Compression": {
    "name": "Compression",
    "displayName": "Compression",
    "type": "n8n-nodes-base.Compression",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Compress and decompress files",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "compression",
        "displayName": "Compression"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field(s)",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "outputFormat",
        "displayName": "Output Format",
        "type": "options",
        "default": ""
      },
      {
        "name": "fileName",
        "displayName": "File Name",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. data.zip"
      },
      {
        "name": "binaryPropertyOutput",
        "displayName": "Put Output File in Field",
        "type": "string",
        "default": "data"
      },
      {
        "name": "outputPrefix",
        "displayName": "Output File Prefix",
        "type": "string",
        "default": "data",
        "required": true
      }
    ]
  },
  "Contentful": {
    "name": "Contentful",
    "displayName": "Contentful",
    "type": "n8n-nodes-base.Contentful",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Contentful API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'contentfulApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "contentful",
        "displayName": "Contentful"
      },
      {
        "name": "source",
        "displayName": "Source",
        "type": "options",
        "default": "deliveryApi"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "entry"
      }
    ],
    "version": 1.0
  },
  "ConvertKit": {
    "name": "ConvertKit",
    "displayName": "ConvertKit",
    "type": "n8n-nodes-base.ConvertKit",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume ConvertKit API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'convertKitApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "convertKit",
        "displayName": "ConvertKit"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ConvertKitTrigger": {
    "name": "ConvertKitTrigger",
    "displayName": "ConvertKitTrigger",
    "type": "n8n-nodes-base.ConvertKitTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle ConvertKit events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'convertKitApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "convertKitTrigger",
        "displayName": "ConvertKit Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "formId",
        "displayName": "Form Name or ID",
        "type": "options"
      },
      {
        "name": "courseId",
        "displayName": "Sequence Name or ID",
        "type": "options"
      },
      {
        "name": "link",
        "displayName": "Initiating Link",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "productId",
        "displayName": "Product ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "tagId",
        "displayName": "Tag Name or ID",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Copper": {
    "name": "Copper",
    "displayName": "Copper",
    "type": "n8n-nodes-base.Copper",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Copper API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'copperApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "copper",
        "displayName": "Copper"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "CopperTrigger": {
    "name": "CopperTrigger",
    "displayName": "CopperTrigger",
    "type": "n8n-nodes-base.CopperTrigger",
    "subtitle": null,
    "description": "Handle Copper events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'copperApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "copperTrigger",
        "displayName": "Copper Trigger"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Cortex": {
    "name": "Cortex",
    "displayName": "Cortex",
    "type": "n8n-nodes-base.Cortex",
    "subtitle": "={{$parameter[\"operation\"]+ \": \" + $parameter[\"resource\"]}}",
    "description": "Apply the Cortex analyzer/responder on the given entity",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'cortexApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "cortex",
        "displayName": "Cortex"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "CrateDb": {
    "name": "CrateDb",
    "displayName": "CrateDb",
    "type": "n8n-nodes-base.CrateDb",
    "subtitle": null,
    "description": "Add and update data in CrateDB",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'crateDb', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "crateDb",
        "displayName": "CrateDB"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string"
      },
      {
        "name": "schema",
        "displayName": "Schema",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "string"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      },
      {
        "name": "updateKey",
        "displayName": "Update Key",
        "type": "string"
      },
      {
        "name": "returnFields",
        "displayName": "Return Fields",
        "type": "string"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "queryParams",
        "displayName": "Query Parameters",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "Cron": {
    "name": "Cron",
    "displayName": "Cron",
    "type": "n8n-nodes-base.Cron",
    "subtitle": null,
    "description": "Triggers the workflow at a specific time",
    "group": [
      "trigger",
      "schedule"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "cron",
        "displayName": "Cron"
      },
      {
        "name": "notice",
        "displayName": "This workflow will run on the schedule you define here once you <a data-key=\"activate\">activate</a> it.<br><br>For testing, you can also trigger it manually: by going back to the canvas and clicking \\",
        "type": "notice",
        "default": ""
      },
      {
        "name": "triggerTimes",
        "displayName": "Trigger Times",
        "type": "fixedCollection"
      }
    ],
    "version": 1.0
  },
  "CrowdDev": {
    "name": "CrowdDev",
    "displayName": "CrowdDev",
    "type": "n8n-nodes-base.CrowdDev",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "crowd.dev is an open-source suite of community and data tools built to unlock community-led growth for your organization.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'crowdDevApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "crowdDev",
        "displayName": "crowd.dev"
      }
    ],
    "version": 1.0
  },
  "CrowdDevTrigger": {
    "name": "CrowdDevTrigger",
    "displayName": "CrowdDevTrigger",
    "type": "n8n-nodes-base.CrowdDevTrigger",
    "subtitle": null,
    "description": "Starts the workflow when crowd.dev events occur.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'crowdDevApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "crowdDevTrigger",
        "displayName": "crowd.dev Trigger"
      },
      {
        "name": "trigger",
        "displayName": "Trigger",
        "type": "options",
        "default": "new_activity",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Crypto": {
    "name": "Crypto",
    "displayName": "Crypto",
    "type": "n8n-nodes-base.Crypto",
    "subtitle": "={{$parameter[\"action\"]}}",
    "description": "Provide cryptographic utilities",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "crypto",
        "displayName": "Crypto"
      },
      {
        "name": "action",
        "displayName": "Action",
        "type": "options"
      },
      {
        "name": "type",
        "displayName": "Type"
      },
      {
        "name": "binaryData",
        "displayName": "Binary File",
        "type": "boolean",
        "required": true
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Binary Property Name"
      },
      {
        "name": "value",
        "displayName": "Value"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "encoding",
        "displayName": "Encoding"
      },
      {
        "name": "secret",
        "displayName": "Secret"
      },
      {
        "name": "algorithm",
        "displayName": "Algorithm Name or ID"
      },
      {
        "name": "privateKey",
        "displayName": "Private Key"
      },
      {
        "name": "encodingType",
        "displayName": "Type"
      },
      {
        "name": "stringLength",
        "displayName": "Length",
        "type": "number",
        "default": "32"
      }
    ],
    "version": 1.0
  },
  "CustomerIo": {
    "name": "CustomerIo",
    "displayName": "CustomerIo",
    "type": "n8n-nodes-base.CustomerIo",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Customer.io API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'customerIoApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "customerIo",
        "displayName": "Customer.io"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "CustomerIoTrigger": {
    "name": "CustomerIoTrigger",
    "displayName": "CustomerIoTrigger",
    "type": "n8n-nodes-base.CustomerIoTrigger",
    "subtitle": null,
    "description": "Starts the workflow on a Customer.io update (Beta)",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'customerIoApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "customerIoTrigger",
        "displayName": "Customer.io Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions",
        "required": true
      }
    ],
    "version": 1.0
  },
  "DataTable": {
    "name": "DataTable",
    "displayName": "DataTable",
    "type": "n8n-nodes-base.DataTable",
    "subtitle": "={{$parameter[\"action\"]}}",
    "description": "Permanently save data across workflow executions in a table",
    "group": [
      "input",
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "dataTable",
        "displayName": "Data table"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "DateTime": {
    "name": "dateTime",
    "displayName": "Date & Time",
    "type": "n8n-nodes-base.DateTime",
    "subtitle": "={{$parameter[\"action\"]}}",
    "description": "Allows you to manipulate date and time values",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "dateTime",
        "displayName": "Date & Time"
      },
      {
        "name": "action",
        "displayName": "Action",
        "type": "options"
      },
      {
        "name": "value",
        "displayName": "Value"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "custom",
        "displayName": "Custom Format"
      },
      {
        "name": "toFormat",
        "displayName": "To Format"
      },
      {
        "name": "options",
        "displayName": "Options"
      },
      {
        "name": "fromFormat",
        "displayName": "From Format",
        "type": "string",
        "default": ""
      },
      {
        "name": "fromTimezone",
        "displayName": "From Timezone Name or ID",
        "type": "options"
      },
      {
        "name": "toTimezone",
        "displayName": "To Timezone Name or ID",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation"
      },
      {
        "name": "duration",
        "displayName": "Duration"
      },
      {
        "name": "timeUnit",
        "displayName": "Time Unit"
      }
    ]
  },
  "DebugHelper": {
    "name": "DebugHelper",
    "displayName": "DebugHelper",
    "type": "n8n-nodes-base.DebugHelper",
    "subtitle": "={{$parameter[\"category\"]}}",
    "description": "Causes problems intentionally and generates useful data for debugging",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "debugHelper",
        "displayName": "DebugHelper"
      },
      {
        "name": "category",
        "displayName": "Category",
        "type": "options"
      },
      {
        "name": "throwErrorType",
        "displayName": "Error Type",
        "type": "options"
      },
      {
        "name": "throwErrorMessage",
        "displayName": "Error Message",
        "type": "string",
        "default": "Node has thrown an error"
      },
      {
        "name": "memorySizeValue",
        "displayName": "Memory Size to Generate",
        "type": "number",
        "default": "10"
      },
      {
        "name": "randomDataType",
        "displayName": "Data Type",
        "type": "options"
      },
      {
        "name": "nanoidAlphabet",
        "displayName": "NanoId Alphabet",
        "type": "string",
        "default": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
      },
      {
        "name": "nanoidLength",
        "displayName": "NanoId Length",
        "type": "string",
        "default": "16"
      },
      {
        "name": "randomDataSeed",
        "displayName": "Seed",
        "type": "string",
        "default": "",
        "placeholder": "Leave empty for random seed"
      },
      {
        "name": "randomDataCount",
        "displayName": "Number of Items to Generate",
        "type": "number",
        "default": "10"
      },
      {
        "name": "randomDataSingleArray",
        "displayName": "Output as Single Array",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "DeepL": {
    "name": "DeepL",
    "displayName": "DeepL",
    "type": "n8n-nodes-base.DeepL",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Translate data using DeepL",
    "group": [
      "input",
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'deepLApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "deepL",
        "displayName": "DeepL"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Demio": {
    "name": "Demio",
    "displayName": "Demio",
    "type": "n8n-nodes-base.Demio",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Demio API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'demioApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "demio",
        "displayName": "Demio"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Dhl": {
    "name": "Dhl",
    "displayName": "Dhl",
    "type": "n8n-nodes-base.Dhl",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume DHL API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'dhlApi', required: true, testedBy: 'dhlApiCredentialTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "dhl",
        "displayName": "DHL"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "trackingNumber",
        "displayName": "Tracking Number",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "recipientPostalCode",
        "displayName": "Recipient's Postal Code",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Discord": {
    "name": "discord",
    "displayName": "Discord",
    "type": "n8n-nodes-base.Discord",
    "subtitle": null,
    "description": "Sends data to Discord",
    "group": [
      "output"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "discord",
        "displayName": "Discord"
      },
      {
        "name": "webhookUri",
        "displayName": "Webhook URL",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "https://discord.com/api/webhooks/ID/TOKEN"
      },
      {
        "name": "text",
        "displayName": "Content",
        "type": "string",
        "typeOptions": {
          "maxValue": 2000
        }
      },
      {
        "name": "options",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "allowedMentions",
        "displayName": "Allowed Mentions",
        "type": "json"
      },
      {
        "name": "attachments",
        "displayName": "Attachments",
        "type": "json"
      },
      {
        "name": "avatarUrl",
        "displayName": "Avatar URL",
        "type": "string",
        "default": ""
      },
      {
        "name": "components",
        "displayName": "Components",
        "type": "json"
      },
      {
        "name": "embeds",
        "displayName": "Embeds",
        "type": "json"
      },
      {
        "name": "flags",
        "displayName": "Flags",
        "type": "number",
        "default": ""
      },
      {
        "name": "payloadJson",
        "displayName": "JSON Payload",
        "type": "json"
      },
      {
        "name": "username",
        "displayName": "Username",
        "type": "string",
        "default": "",
        "placeholder": "User"
      },
      {
        "name": "tts",
        "displayName": "TTS",
        "type": "boolean"
      }
    ]
  },
  "Discourse": {
    "name": "Discourse",
    "displayName": "Discourse",
    "type": "n8n-nodes-base.Discourse",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Discourse API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'discourseApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "discourse",
        "displayName": "Discourse"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Disqus": {
    "name": "Disqus",
    "displayName": "Disqus",
    "type": "n8n-nodes-base.Disqus",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Access data on Disqus",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'disqusApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "disqus",
        "displayName": "Disqus"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "id",
        "displayName": "Forum Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "attach",
        "displayName": "Attach",
        "type": "multiOptions"
      },
      {
        "name": "related",
        "displayName": "Related",
        "type": "multiOptions"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "multiOptions"
      },
      {
        "name": "include",
        "displayName": "Include",
        "type": "multiOptions"
      },
      {
        "name": "order",
        "displayName": "Order",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string",
        "default": ""
      },
      {
        "name": "since",
        "displayName": "Since",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "thread",
        "displayName": "Thread",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Drift": {
    "name": "Drift",
    "displayName": "Drift",
    "type": "n8n-nodes-base.Drift",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Drift API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'driftApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "drift",
        "displayName": "Drift"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Dropbox": {
    "name": "Dropbox",
    "displayName": "Dropbox",
    "type": "n8n-nodes-base.Dropbox",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Access data on Dropbox",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'dropboxApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "dropbox",
        "displayName": "Dropbox"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "path",
        "displayName": "From Path",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "toPath",
        "displayName": "To Path",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Put Output File in Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "binaryData",
        "displayName": "Binary File",
        "type": "boolean"
      },
      {
        "name": "fileContent",
        "displayName": "File Content",
        "type": "string",
        "default": ""
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "fileStatus",
        "displayName": "File Status",
        "type": "options"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "file_categories",
        "displayName": "File Categories",
        "type": "multiOptions"
      },
      {
        "name": "file_extensions",
        "displayName": "File Extensions",
        "type": "string",
        "default": ""
      },
      {
        "name": "include_deleted",
        "displayName": "Include Deleted",
        "type": "boolean"
      },
      {
        "name": "include_has_explicit_shared_members",
        "displayName": "Include Shared Members",
        "type": "boolean"
      },
      {
        "name": "include_mounted_folders",
        "displayName": "Include Mounted Folders",
        "type": "boolean"
      },
      {
        "name": "include_non_downloadable_files",
        "displayName": "Include Non Downloadable Files",
        "type": "boolean"
      },
      {
        "name": "recursive",
        "displayName": "Recursive",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Dropcontact": {
    "name": "Dropcontact",
    "displayName": "Dropcontact",
    "type": "n8n-nodes-base.Dropcontact",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Find B2B emails and enrich contacts",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'dropcontactApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "dropcontact",
        "displayName": "Dropcontact"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "requestId",
        "displayName": "Request ID",
        "type": "string",
        "required": true
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "placeholder": "name@email.com"
      },
      {
        "name": "simplify",
        "displayName": "Simplify Output (Faster)",
        "type": "boolean"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "num_siren",
        "displayName": "Company SIREN Number",
        "type": "string",
        "default": ""
      },
      {
        "name": "siret",
        "displayName": "Company SIRET Code",
        "type": "string",
        "default": ""
      },
      {
        "name": "company",
        "displayName": "Company Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "country",
        "displayName": "Country",
        "type": "string",
        "default": ""
      },
      {
        "name": "first_name",
        "displayName": "First Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "full_name",
        "displayName": "Full Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "last_name",
        "displayName": "Last Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "linkedin",
        "displayName": "LinkedIn Profile",
        "type": "string",
        "default": ""
      },
      {
        "name": "phone",
        "displayName": "Phone Number",
        "type": "string",
        "default": ""
      },
      {
        "name": "website",
        "displayName": "Website",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "waitTime",
        "displayName": "Data Fetch Wait Time",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "siren",
        "displayName": "French Company Enrich",
        "type": "boolean"
      },
      {
        "name": "language",
        "displayName": "Language",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "E2eTest": {
    "name": "E2eTest",
    "displayName": "E2eTest",
    "type": "n8n-nodes-base.E2eTest",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Dummy node used for e2e testing",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "e2eTest",
        "displayName": "E2E Test"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "fieldId",
        "displayName": "Field ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "remoteOptions",
        "displayName": "Remote Options Name or ID",
        "type": "options"
      },
      {
        "name": "rlc",
        "displayName": "Resource Locator",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list"
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string",
        "placeholder": "https://example.com/user/a4071e98-7d40-41fb-8911-ce3e7bf94fb2"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "resourceMapper",
        "displayName": "Resource Mapping Component",
        "type": "resourceMapper"
      },
      {
        "name": "otherField",
        "displayName": "Other Non Important Field",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "EditImage": {
    "name": "EditImage",
    "displayName": "EditImage",
    "type": "n8n-nodes-base.EditImage",
    "subtitle": null,
    "description": "Adds a blur to the image and so makes it less sharp",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "backgroundColor",
        "displayName": "Background Color",
        "type": "color",
        "default": "#ffffff00"
      },
      {
        "name": "width",
        "displayName": "Image Width",
        "type": "number",
        "default": "50",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "height",
        "displayName": "Image Height",
        "type": "number",
        "default": "50",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "primitive",
        "displayName": "Primitive",
        "type": "options"
      },
      {
        "name": "color",
        "displayName": "Color",
        "type": "color",
        "default": "#ff000000"
      },
      {
        "name": "startPositionX",
        "displayName": "Start Position X",
        "type": "number",
        "default": "50"
      },
      {
        "name": "startPositionY",
        "displayName": "Start Position Y",
        "type": "number",
        "default": "50"
      },
      {
        "name": "endPositionX",
        "displayName": "End Position X",
        "type": "number",
        "default": "250"
      },
      {
        "name": "endPositionY",
        "displayName": "End Position Y",
        "type": "number",
        "default": "250"
      },
      {
        "name": "cornerRadius",
        "displayName": "Corner Radius",
        "type": "number",
        "default": "0"
      },
      {
        "name": "text",
        "displayName": "Text"
      },
      {
        "name": "fontSize",
        "displayName": "Font Size",
        "type": "number",
        "default": "18"
      },
      {
        "name": "fontColor",
        "displayName": "Font Color",
        "type": "color",
        "default": "#000000"
      },
      {
        "name": "positionX",
        "displayName": "Position X",
        "type": "number",
        "default": "50"
      },
      {
        "name": "positionY",
        "displayName": "Position Y",
        "type": "number",
        "default": "50"
      },
      {
        "name": "lineLength",
        "displayName": "Max Line Length",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "blur",
        "displayName": "Blur",
        "type": "number",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1000
        }
      },
      {
        "name": "sigma",
        "displayName": "Sigma",
        "type": "number",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1000
        }
      },
      {
        "name": "borderWidth",
        "displayName": "Border Width",
        "type": "number",
        "default": "10"
      },
      {
        "name": "borderHeight",
        "displayName": "Border Height",
        "type": "number",
        "default": "10"
      },
      {
        "name": "borderColor",
        "displayName": "Border Color",
        "type": "color",
        "default": "#000000"
      },
      {
        "name": "dataPropertyNameComposite",
        "displayName": "Composite Image Property",
        "type": "string",
        "default": "",
        "placeholder": "data2"
      },
      {
        "name": "operator",
        "displayName": "Operator",
        "type": "options"
      },
      {
        "name": "resizeOption",
        "displayName": "Option",
        "type": "options"
      },
      {
        "name": "rotate",
        "displayName": "Rotate",
        "type": "number",
        "typeOptions": {
          "maxValue": 360
        }
      },
      {
        "name": "degreesX",
        "displayName": "Degrees X",
        "type": "number",
        "default": "0"
      },
      {
        "name": "degreesY",
        "displayName": "Degrees Y",
        "type": "number",
        "default": "0"
      },
      {
        "name": "editImage",
        "displayName": "Edit Image"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data"
      },
      {
        "name": "operations",
        "displayName": "Operations",
        "type": "fixedCollection",
        "placeholder": "Add Operation"
      },
      {
        "name": "font",
        "displayName": "Font Name or ID",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "fileName",
        "displayName": "File Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "format",
        "displayName": "Format",
        "type": "options"
      },
      {
        "name": "quality",
        "displayName": "Quality",
        "type": "number",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 100
        }
      }
    ],
    "version": 1.0
  },
  "Egoi": {
    "name": "Egoi",
    "displayName": "Egoi",
    "type": "n8n-nodes-base.Egoi",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume E-goi API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'egoiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "egoi",
        "displayName": "E-goi"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "required": true
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "required": true
      },
      {
        "name": "list",
        "displayName": "List Name or ID",
        "type": "options"
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "placeholder": "name@email.com"
      },
      {
        "name": "contactId",
        "displayName": "Contact ID",
        "type": "string"
      },
      {
        "name": "resolveData",
        "displayName": "Resolve Data",
        "type": "boolean"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "birth_date",
        "displayName": "Birth Date",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "cellphone",
        "displayName": "Cellphone",
        "type": "string",
        "default": ""
      },
      {
        "name": "extraFieldsUi",
        "displayName": "Extra Fields",
        "type": "fixedCollection",
        "placeholder": "Add Field"
      },
      {
        "name": "extraFieldValues",
        "displayName": "Extra Field"
      },
      {
        "name": "field_id",
        "displayName": "Field Name or ID",
        "type": "options"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "first_name",
        "displayName": "First Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "last_name",
        "displayName": "Last Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "status",
        "displayName": "Status",
        "type": "options"
      },
      {
        "name": "tagIds",
        "displayName": "Tag Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "by",
        "displayName": "By",
        "type": "options"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "EmailReadImap": {
    "name": "emailReadImap",
    "displayName": "Email Trigger (IMAP)",
    "type": "n8n-nodes-base.EmailReadImap",
    "subtitle": null,
    "description": "Triggers the workflow when a new email is received",
    "group": [
      "trigger"
    ],
    "defaultVersion": 2.1,
    "availableVersions": [
      1.0,
      2.0,
      2.1
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "emailReadImap",
        "displayName": "Email Trigger (IMAP)"
      },
      {
        "name": "mailbox",
        "displayName": "Mailbox Name",
        "type": "string",
        "default": "INBOX"
      },
      {
        "name": "postProcessAction",
        "displayName": "Action",
        "type": "options"
      },
      {
        "name": "downloadAttachments",
        "displayName": "Download Attachments",
        "type": "boolean"
      },
      {
        "name": "format",
        "displayName": "Format",
        "type": "options"
      },
      {
        "name": "dataPropertyAttachmentsPrefixName",
        "displayName": "Property Prefix Name",
        "type": "string",
        "default": "attachment_"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "customEmailConfig",
        "displayName": "Custom Email Rules",
        "type": "string",
        "default": "[\"UNSEEN\"]"
      },
      {
        "name": "allowUnauthorizedCerts",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      },
      {
        "name": "forceReconnect",
        "displayName": "Force Reconnect",
        "type": "number",
        "default": "60"
      },
      {
        "name": "trackLastMessageId",
        "displayName": "Fetch Only New Emails",
        "type": "boolean"
      }
    ]
  },
  "EmailSend": {
    "name": "emailSend",
    "displayName": "Send Email",
    "type": "n8n-nodes-base.EmailSend",
    "subtitle": null,
    "description": "Sends an email using SMTP protocol",
    "group": [
      "output"
    ],
    "defaultVersion": 2.1,
    "availableVersions": [
      1.0,
      2.0,
      2.1
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "emailSend",
        "displayName": "Send Email"
      },
      {
        "name": "fromEmail",
        "displayName": "From Email",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "admin@example.com"
      },
      {
        "name": "toEmail",
        "displayName": "To Email",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "info@example.com"
      },
      {
        "name": "ccEmail",
        "displayName": "CC Email",
        "type": "string",
        "default": "",
        "placeholder": "cc@example.com"
      },
      {
        "name": "bccEmail",
        "displayName": "BCC Email",
        "type": "string",
        "default": "",
        "placeholder": "bcc@example.com"
      },
      {
        "name": "subject",
        "displayName": "Subject",
        "type": "string",
        "default": "",
        "placeholder": "My subject line"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string"
      },
      {
        "name": "html",
        "displayName": "HTML",
        "type": "string"
      },
      {
        "name": "attachments",
        "displayName": "Attachments",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "allowUnauthorizedCerts",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      },
      {
        "name": "replyTo",
        "displayName": "Reply To",
        "type": "string",
        "default": "",
        "placeholder": "info@example.com"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden",
        "default": "email"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "default": "send"
      }
    ]
  },
  "Emelia": {
    "name": "Emelia",
    "displayName": "Emelia",
    "type": "n8n-nodes-base.Emelia",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Emelia API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'emeliaApi', required: true, testedBy: 'emeliaApiTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "emelia",
        "displayName": "Emelia"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "EmeliaTrigger": {
    "name": "EmeliaTrigger",
    "displayName": "EmeliaTrigger",
    "type": "n8n-nodes-base.EmeliaTrigger",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Handle Emelia campaign activity events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'emeliaApi', required: true, testedBy: 'emeliaApiTest', },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "emeliaTrigger",
        "displayName": "Emelia Trigger"
      },
      {
        "name": "campaignId",
        "displayName": "Campaign Name or ID",
        "type": "options"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions",
        "required": true
      }
    ],
    "version": 1.0
  },
  "ERPNext": {
    "name": "ERPNext",
    "displayName": "ERPNext",
    "type": "n8n-nodes-base.ERPNext",
    "subtitle": "={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}",
    "description": "Consume ERPNext API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'erpNextApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "erpNext",
        "displayName": "ERPNext"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ErrorTrigger": {
    "name": "ErrorTrigger",
    "displayName": "ErrorTrigger",
    "type": "n8n-nodes-base.ErrorTrigger",
    "subtitle": null,
    "description": "Triggers the workflow when another workflow has an error",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "errorTrigger",
        "displayName": "Error Trigger"
      },
      {
        "name": "notice",
        "displayName": "This node will trigger when there is an error in another workflow, as long as that workflow is set up to do so. <a href=\"https://docs.n8n.io/integrations/core-nodes/n8n-nodes-base.errortrigger\" target=\"_blank\">More info<a>",
        "type": "notice",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "EventbriteTrigger": {
    "name": "EventbriteTrigger",
    "displayName": "EventbriteTrigger",
    "type": "n8n-nodes-base.EventbriteTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle Eventbrite events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'eventbriteApi', required: true, displayOptions: { show: { authentication: ['privateKey'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "eventbriteTrigger",
        "displayName": "Eventbrite Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "organization",
        "displayName": "Organization Name or ID",
        "type": "options",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event Name or ID",
        "type": "options",
        "required": true
      },
      {
        "name": "actions",
        "displayName": "Actions",
        "type": "multiOptions"
      },
      {
        "name": "resolveData",
        "displayName": "Resolve Data",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "ExecuteCommand": {
    "name": "ExecuteCommand",
    "displayName": "ExecuteCommand",
    "type": "n8n-nodes-base.ExecuteCommand",
    "subtitle": null,
    "description": "Executes a command on the host",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "executeCommand",
        "displayName": "Execute Command"
      },
      {
        "name": "executeOnce",
        "displayName": "Execute Once",
        "type": "boolean"
      },
      {
        "name": "command",
        "displayName": "Command"
      }
    ],
    "version": 1.0
  },
  "ExecutionData": {
    "name": "ExecutionData",
    "displayName": "ExecutionData",
    "type": "n8n-nodes-base.ExecutionData",
    "subtitle": null,
    "description": "Add execution data for search",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "executionData",
        "displayName": "Execution Data"
      },
      {
        "name": "notice",
        "displayName": "Save important data using this node. It will be displayed on each execution for easy reference and you can filter by it.<br />Filtering is available on Pro and Enterprise plans. <a href='https://n8n.io/pricing/' target='_blank'>More Info</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "default": "save"
      },
      {
        "name": "dataToSave",
        "displayName": "Data to Save",
        "type": "fixedCollection",
        "placeholder": "Add Saved Field"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": "",
        "placeholder": "e.g. myKey"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": "",
        "placeholder": "e.g. myValue"
      }
    ]
  },
  "FacebookGraphApi": {
    "name": "FacebookGraphApi",
    "displayName": "FacebookGraphApi",
    "type": "n8n-nodes-base.FacebookGraphApi",
    "subtitle": null,
    "description": "Interacts with Facebook using the Graph API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'facebookGraphApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "facebookGraphApi",
        "displayName": "Facebook Graph API"
      },
      {
        "name": "hostUrl",
        "displayName": "Host URL",
        "type": "options"
      },
      {
        "name": "httpRequestMethod",
        "displayName": "HTTP Request Method",
        "type": "options"
      },
      {
        "name": "graphApiVersion",
        "displayName": "Graph API Version",
        "type": "options"
      },
      {
        "name": "node",
        "displayName": "Node",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "me"
      },
      {
        "name": "edge",
        "displayName": "Edge",
        "type": "string",
        "default": "",
        "placeholder": "videos"
      },
      {
        "name": "allowUnauthorizedCerts",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      },
      {
        "name": "sendBinaryData",
        "displayName": "Send Binary File",
        "type": "boolean"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "",
        "placeholder": "file:data"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "fields",
        "displayName": "Fields",
        "type": "fixedCollection",
        "placeholder": "Add Field"
      },
      {
        "name": "field",
        "displayName": "Field",
        "type": "string",
        "default": ""
      },
      {
        "name": "queryParameters",
        "displayName": "Query Parameters",
        "type": "fixedCollection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "parameter",
        "displayName": "Parameter",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "queryParametersJson",
        "displayName": "Query Parameters JSON",
        "type": "json"
      }
    ],
    "version": 1.0
  },
  "FacebookTrigger": {
    "name": "FacebookTrigger",
    "displayName": "FacebookTrigger",
    "type": "n8n-nodes-base.FacebookTrigger",
    "subtitle": "={{$parameter[\"appId\"] +\"/\"+ $parameter[\"object\"]}}",
    "description": "Starts the workflow when Facebook events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'facebookGraphAppApi', required: true, },",
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', path: 'webhook', }, { name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "facebookTrigger",
        "displayName": "Facebook Trigger"
      },
      {
        "name": "appId",
        "displayName": "APP ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "whatsappBusinessAccountNotice",
        "displayName": "To watch Whatsapp business account events use the Whatsapp trigger node",
        "type": "notice",
        "default": ""
      },
      {
        "name": "object",
        "displayName": "Object",
        "type": "options"
      },
      {
        "name": "fields",
        "displayName": "Field Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "includeValues",
        "displayName": "Include Values",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "FacebookLeadAdsTrigger": {
    "name": "FacebookLeadAdsTrigger",
    "displayName": "FacebookLeadAdsTrigger",
    "type": "n8n-nodes-base.FacebookLeadAdsTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle Facebook Lead Ads events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'facebookLeadAdsOAuth2Api', required: true, },",
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', path: 'webhook', }, { name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "facebookLeadAdsTrigger",
        "displayName": "Facebook Lead Ads Trigger"
      },
      {
        "name": "facebookLeadAdsNotice",
        "displayName": "Due to Facebook API limitations, you can use just one Facebook Lead Ads trigger for each Facebook App",
        "type": "notice",
        "default": ""
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "newLead",
        "required": true
      },
      {
        "name": "page",
        "displayName": "Page",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list"
      },
      {
        "name": "id",
        "displayName": "By ID",
        "type": "string",
        "placeholder": "121637951029080"
      },
      {
        "name": "form",
        "displayName": "Form",
        "type": "resourceLocator"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "simplifyOutput",
        "displayName": "Simplify Output",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "FigmaTrigger": {
    "name": "FigmaTrigger",
    "displayName": "FigmaTrigger",
    "type": "n8n-nodes-base.FigmaTrigger",
    "subtitle": "={{$parameter[\"triggerOn\"]}}",
    "description": "Starts the workflow when Figma events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'figmaApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "figmaTrigger",
        "displayName": "Figma Trigger (Beta)"
      },
      {
        "name": "teamId",
        "displayName": "Team ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "triggerOn",
        "displayName": "Trigger On",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "FileMaker": {
    "name": "FileMaker",
    "displayName": "FileMaker",
    "type": "n8n-nodes-base.FileMaker",
    "subtitle": null,
    "description": "Retrieve data from the FileMaker data API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'fileMaker', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "filemaker",
        "displayName": "FileMaker"
      },
      {
        "name": "action",
        "displayName": "Action",
        "type": "options",
        "default": "record"
      },
      {
        "name": "layout",
        "displayName": "Layout Name or ID",
        "type": "options"
      },
      {
        "name": "recid",
        "displayName": "Record ID",
        "type": "number",
        "default": "",
        "required": true
      },
      {
        "name": "offset",
        "displayName": "Offset",
        "type": "number",
        "default": "1",
        "placeholder": "0"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number",
        "placeholder": "100",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "getPortals",
        "displayName": "Get Portals",
        "type": "boolean"
      },
      {
        "name": "portals",
        "displayName": "Portals Name or ID",
        "type": "options"
      },
      {
        "name": "responseLayout",
        "displayName": "Response Layout Name or ID",
        "type": "options"
      },
      {
        "name": "queries",
        "displayName": "Queries",
        "type": "fixedCollection",
        "placeholder": "Add query"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "fixedCollection",
        "placeholder": "Add field"
      },
      {
        "name": "field",
        "displayName": "Field",
        "type": "options",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "omit",
        "displayName": "Omit",
        "type": "boolean"
      },
      {
        "name": "setSort",
        "displayName": "Sort Data?",
        "type": "boolean"
      },
      {
        "name": "sortParametersUi",
        "displayName": "Sort",
        "type": "fixedCollection",
        "placeholder": "Add Sort Rules"
      },
      {
        "name": "rules",
        "displayName": "Rules",
        "type": "options",
        "default": ""
      },
      {
        "name": "setScriptBefore",
        "displayName": "Before Find Script",
        "type": "boolean"
      },
      {
        "name": "scriptBefore",
        "displayName": "Script Name or ID",
        "type": "options"
      },
      {
        "name": "scriptBeforeParam",
        "displayName": "Script Parameter",
        "type": "string",
        "default": ""
      },
      {
        "name": "setScriptSort",
        "displayName": "Before Sort Script",
        "type": "boolean"
      },
      {
        "name": "scriptSort",
        "displayName": "Script Name or ID",
        "type": "options"
      },
      {
        "name": "scriptSortParam",
        "displayName": "Script Parameter",
        "type": "string",
        "default": ""
      },
      {
        "name": "setScriptAfter",
        "displayName": "After Sort Script",
        "type": "boolean"
      },
      {
        "name": "scriptAfter",
        "displayName": "Script Name or ID",
        "type": "options"
      },
      {
        "name": "scriptAfterParam",
        "displayName": "Script Parameter",
        "type": "string",
        "default": ""
      },
      {
        "name": "fieldData",
        "displayName": "fieldData"
      },
      {
        "name": "modId",
        "displayName": "Mod ID",
        "type": "number",
        "default": ""
      },
      {
        "name": "fieldsParametersUi",
        "displayName": "Fields",
        "type": "fixedCollection",
        "placeholder": "Add field"
      },
      {
        "name": "fields",
        "displayName": "Fields",
        "type": "options",
        "default": ""
      },
      {
        "name": "script",
        "displayName": "Script Name or ID",
        "type": "options"
      },
      {
        "name": "scriptParam",
        "displayName": "Script Parameter",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Filter": {
    "name": "filter",
    "displayName": "Filter",
    "type": "n8n-nodes-base.Filter",
    "subtitle": null,
    "description": "Remove items matching a condition",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.2,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      2.2
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "filter",
        "displayName": "Filter"
      },
      {
        "name": "conditions",
        "displayName": "Conditions",
        "type": "fixedCollection",
        "placeholder": "Add Condition"
      },
      {
        "name": "boolean",
        "displayName": "Boolean",
        "type": "boolean"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "value2",
        "displayName": "Value 2",
        "type": "boolean"
      },
      {
        "name": "dateTime",
        "displayName": "Date & Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "number",
        "displayName": "Number",
        "type": "number",
        "default": "0"
      },
      {
        "name": "string",
        "displayName": "String",
        "type": "string",
        "default": ""
      },
      {
        "name": "combineConditions",
        "displayName": "Combine Conditions",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "ignoreCase",
        "displayName": "Ignore Case",
        "type": "boolean"
      }
    ]
  },
  "Flow": {
    "name": "Flow",
    "displayName": "Flow",
    "type": "n8n-nodes-base.Flow",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Flow API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'flowApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "flow",
        "displayName": "Flow"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "FlowTrigger": {
    "name": "FlowTrigger",
    "displayName": "FlowTrigger",
    "type": "n8n-nodes-base.FlowTrigger",
    "subtitle": null,
    "description": "Handle Flow events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'flowApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "flowTrigger",
        "displayName": "Flow Trigger"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": ""
      },
      {
        "name": "listIds",
        "displayName": "Project ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "taskIds",
        "displayName": "Task ID",
        "type": "string",
        "default": "",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Form": {
    "name": "Form",
    "displayName": "Form",
    "type": "n8n-nodes-base.Form",
    "subtitle": null,
    "description": "Whether to limit the time this node should wait for a user response before execution resumes",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": "{ name: 'default', httpMethod: 'GET', responseMode: 'onReceived', path: '', restartWebhook: true, isFullPath: true, nodeType: 'form', }, { name: 'default', httpMethod: 'POST', responseMode: 'responseNode', path: '', restartWebhook: true, isFullPath: true, nodeType: 'form', },",
    "properties": [
      {
        "name": "limitWaitTime",
        "displayName": "Limit Wait Time",
        "type": "boolean"
      },
      {
        "name": "defineForm",
        "displayName": "Define Form",
        "type": "options"
      },
      {
        "name": "jsonOutput",
        "displayName": "Form Fields",
        "type": "json"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "buttonLabel",
        "displayName": "Button Label",
        "type": "string",
        "default": "Submit"
      },
      {
        "name": "customCss",
        "displayName": "Custom Form Styling",
        "type": "string"
      },
      {
        "name": "respondWith",
        "displayName": "On n8n Form Submission",
        "type": "options",
        "default": "text"
      },
      {
        "name": "redirectUrl",
        "displayName": "URL",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "completionTitle",
        "displayName": "Completion Title",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "completionMessage",
        "displayName": "Completion Message",
        "type": "string",
        "default": ""
      },
      {
        "name": "responseText",
        "displayName": "Text",
        "type": "string"
      },
      {
        "name": "inputDataFieldName",
        "displayName": "Input Data Field Name",
        "type": "string"
      },
      {
        "name": "form",
        "displayName": "n8n Form"
      },
      {
        "name": "triggerNotice",
        "displayName": "An n8n Form Trigger node must be set up before this node",
        "type": "notice",
        "default": ""
      },
      {
        "name": "operation",
        "displayName": "Page Type",
        "type": "options",
        "default": "page"
      }
    ]
  },
  "FormTrigger": {
    "name": "formTrigger",
    "displayName": "n8n Form Trigger",
    "type": "n8n-nodes-base.FormTrigger",
    "subtitle": null,
    "description": "Generate webforms in n8n and pass their responses to the workflow",
    "group": [
      "trigger"
    ],
    "defaultVersion": 2.3,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      2.2,
      2.3
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "formTrigger",
        "displayName": "n8n Form Trigger"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "formSubmittedText",
        "displayName": "Form Submitted Text",
        "type": "string",
        "default": "Your response has been recorded"
      },
      {
        "name": "useWorkflowTimezone",
        "displayName": "Use Workflow Timezone",
        "type": "boolean"
      },
      {
        "name": "Basic Auth",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "formNotice",
        "displayName": "In the 'Respond to Webhook' node, select 'Respond With JSON' and set the <strong>formSubmittedText</strong> key to display a custom response in the form, or the <strong>redirectURL</strong> key to redirect users to a URL",
        "type": "notice"
      },
      {
        "name": "buttonLabel",
        "displayName": "Button Label",
        "type": "string",
        "default": "Submit"
      },
      {
        "name": "ignoreBots",
        "displayName": "Ignore Bots",
        "type": "boolean"
      },
      {
        "name": "customCss",
        "displayName": "Custom Form Styling",
        "type": "string"
      }
    ]
  },
  "FormIoTrigger": {
    "name": "FormIoTrigger",
    "displayName": "FormIoTrigger",
    "type": "n8n-nodes-base.FormIoTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle form.io events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'formIoApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "formIoTrigger",
        "displayName": "Form.io Trigger"
      },
      {
        "name": "projectId",
        "displayName": "Project Name or ID",
        "type": "options"
      },
      {
        "name": "formId",
        "displayName": "Form Name or ID",
        "type": "options"
      },
      {
        "name": "events",
        "displayName": "Trigger Events",
        "type": "multiOptions"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "FormstackTrigger": {
    "name": "FormstackTrigger",
    "displayName": "FormstackTrigger",
    "type": "n8n-nodes-base.FormstackTrigger",
    "subtitle": "=Form ID: {{$parameter[\"formId\"]}}",
    "description": "Starts the workflow on a Formstack form submission.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'formstackApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "formstackTrigger",
        "displayName": "Formstack Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "formId",
        "displayName": "Form Name or ID",
        "type": "options"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Freshdesk": {
    "name": "Freshdesk",
    "displayName": "Freshdesk",
    "type": "n8n-nodes-base.Freshdesk",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Freshdesk API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'freshdeskApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "freshdesk",
        "displayName": "Freshdesk"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "required": true
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "required": true
      },
      {
        "name": "requester",
        "displayName": "Requester Identification",
        "type": "options",
        "required": true
      },
      {
        "name": "requesterIdentificationValue",
        "displayName": "Value",
        "type": "string",
        "required": true
      },
      {
        "name": "status",
        "displayName": "Status",
        "type": "options",
        "required": true
      },
      {
        "name": "priority",
        "displayName": "Priority",
        "type": "options",
        "required": true
      },
      {
        "name": "source",
        "displayName": "Source",
        "type": "options",
        "required": true
      },
      {
        "name": "jsonParameters",
        "displayName": "JSON Parameters",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "agent",
        "displayName": "Agent Name or ID",
        "type": "options",
        "default": ""
      },
      {
        "name": "ccEmails",
        "displayName": "CC Emails",
        "type": "string",
        "default": ""
      },
      {
        "name": "company",
        "displayName": "Company Name or ID",
        "type": "options",
        "default": ""
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": ""
      },
      {
        "name": "dueBy",
        "displayName": "Due By",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "emailConfigId",
        "displayName": "Email Config ID",
        "type": "number",
        "default": ""
      },
      {
        "name": "frDueBy",
        "displayName": "FR Due By",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "group",
        "displayName": "Group Name or ID",
        "type": "options",
        "default": ""
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "product",
        "displayName": "Product Name or ID",
        "type": "options",
        "default": ""
      },
      {
        "name": "subject",
        "displayName": "Subject",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "tags",
        "displayName": "Tags",
        "type": "string",
        "default": ""
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options",
        "default": "Question"
      },
      {
        "name": "customFieldsUi",
        "displayName": "Custom Fields",
        "type": "fixedCollection",
        "default": "",
        "required": false,
        "placeholder": "Add Custom fields"
      },
      {
        "name": "customFieldsValues",
        "displayName": "Custom fields",
        "type": "string",
        "default": "",
        "required": false
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": "",
        "required": false
      },
      {
        "name": "customFieldsJson",
        "displayName": "Custom Fields",
        "type": "json"
      },
      {
        "name": "ticketId",
        "displayName": "Ticket ID",
        "type": "string",
        "required": true
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "companyId",
        "displayName": "Company ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "include",
        "displayName": "Include",
        "type": "multiOptions"
      },
      {
        "name": "order",
        "displayName": "Order",
        "type": "options"
      },
      {
        "name": "orderBy",
        "displayName": "Order By",
        "type": "options"
      },
      {
        "name": "requesterEmail",
        "displayName": "Requester Email",
        "type": "string",
        "default": ""
      },
      {
        "name": "requesterId",
        "displayName": "Requester ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "updatedSince",
        "displayName": "Updated Since",
        "type": "dateTime",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Freshservice": {
    "name": "Freshservice",
    "displayName": "Freshservice",
    "type": "n8n-nodes-base.Freshservice",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Freshservice API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'freshserviceApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "freshservice",
        "displayName": "Freshservice"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "FreshworksCrm": {
    "name": "FreshworksCrm",
    "displayName": "FreshworksCrm",
    "type": "n8n-nodes-base.FreshworksCrm",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Freshworks CRM API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'freshworksCrmApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "freshworksCrm",
        "displayName": "Freshworks CRM"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Ftp": {
    "name": "Ftp",
    "displayName": "Ftp",
    "type": "n8n-nodes-base.Ftp",
    "subtitle": "={{$parameter[\"protocol\"] + \": \" + $parameter[\"operation\"]}}",
    "description": "Transfer files via FTP or SFTP",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ // nodelinter-ignore-next-line name: 'ftp', required: true, displayOptions: { show: { protocol: ['ftp'",
    "webhooks": [],
    "properties": [
      {
        "name": "ftp",
        "displayName": "FTP"
      },
      {
        "name": "protocol",
        "displayName": "Protocol",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "folder",
        "displayName": "Folder",
        "type": "boolean"
      },
      {
        "name": "enableConcurrentReads",
        "displayName": "Enable Concurrent Reads",
        "type": "boolean"
      },
      {
        "name": "maxConcurrentReads",
        "displayName": "Max Concurrent Reads",
        "type": "number",
        "default": "5"
      },
      {
        "name": "chunkSize",
        "displayName": "Chunk Size",
        "type": "number",
        "default": "64"
      },
      {
        "name": "createDirectories",
        "displayName": "Create Directories",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "GetResponse": {
    "name": "GetResponse",
    "displayName": "GetResponse",
    "type": "n8n-nodes-base.GetResponse",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume GetResponse API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'getResponseApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": [],
    "properties": [
      {
        "name": "getResponse",
        "displayName": "GetResponse"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GetResponseTrigger": {
    "name": "GetResponseTrigger",
    "displayName": "GetResponseTrigger",
    "type": "n8n-nodes-base.GetResponseTrigger",
    "subtitle": null,
    "description": "Starts the workflow when GetResponse events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'getResponseApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": "{ name: 'default', httpMethod: 'GET', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "getResponseTrigger",
        "displayName": "GetResponse Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      },
      {
        "name": "listIds",
        "displayName": "List Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "delete",
        "displayName": "Delete Current Subscription",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Ghost": {
    "name": "Ghost",
    "displayName": "Ghost",
    "type": "n8n-nodes-base.Ghost",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Ghost API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'ghostAdminApi', required: true, displayOptions: { show: { source: ['adminApi'",
    "webhooks": [],
    "properties": [
      {
        "name": "ghost",
        "displayName": "Ghost"
      },
      {
        "name": "source",
        "displayName": "Source",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Git": {
    "name": "Git",
    "displayName": "Git",
    "type": "n8n-nodes-base.Git",
    "subtitle": null,
    "description": "Control git.",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'gitPassword', required: true, displayOptions: { show: { authentication: ['gitPassword'",
    "webhooks": [],
    "properties": [
      {
        "name": "git",
        "displayName": "Git"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "default": "log"
      },
      {
        "name": "repositoryPath",
        "displayName": "Repository Path",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "Github": {
    "name": "Github",
    "displayName": "Github",
    "type": "n8n-nodes-base.Github",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume GitHub API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'githubApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": "{ ...defaultWebhookDescription, path: '', restartWebhook: true, httpMethod: 'POST', responseMode: 'onReceived', },",
    "properties": [
      {
        "name": "github",
        "displayName": "GitHub"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "webhookNotice",
        "displayName": "Your execution will pause until a webhook is called. This URL will be generated at runtime and passed to your Github workflow as a resumeUrl input.",
        "type": "notice"
      },
      {
        "name": "owner",
        "displayName": "Repository Owner",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "Repository Owner",
        "type": "list",
        "placeholder": "Select an owner..."
      },
      {
        "name": "url",
        "displayName": "Link",
        "type": "string",
        "placeholder": "e.g. https://github.com/n8n-io"
      },
      {
        "name": "name",
        "displayName": "By Name",
        "type": "string",
        "placeholder": "e.g. n8n-io"
      },
      {
        "name": "repository",
        "displayName": "Repository Name",
        "type": "resourceLocator"
      },
      {
        "name": "workflowId",
        "displayName": "Workflow",
        "type": "resourceLocator"
      },
      {
        "name": "filename",
        "displayName": "By File Name",
        "type": "string",
        "placeholder": "e.g. main.yaml or main.yml"
      },
      {
        "name": "ref",
        "displayName": "Ref",
        "type": "string",
        "default": "main",
        "required": true
      },
      {
        "name": "inputs",
        "displayName": "Inputs",
        "type": "json"
      },
      {
        "name": "filePath",
        "displayName": "File Path",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "binaryData",
        "displayName": "Binary File",
        "type": "boolean",
        "required": true
      },
      {
        "name": "fileContent",
        "displayName": "File Content",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "commitMessage",
        "displayName": "Commit Message",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "additionalParameters",
        "displayName": "Additional Parameters",
        "type": "fixedCollection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "author",
        "displayName": "Author",
        "type": "string",
        "default": ""
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "default": "",
        "placeholder": "name@email.com"
      },
      {
        "name": "branch",
        "displayName": "Branch",
        "type": "string",
        "default": ""
      },
      {
        "name": "committer",
        "displayName": "Committer",
        "type": "string",
        "default": ""
      },
      {
        "name": "asBinaryProperty",
        "displayName": "As Binary Property",
        "type": "boolean"
      },
      {
        "name": "reference",
        "displayName": "Reference",
        "type": "string",
        "default": "",
        "placeholder": "master"
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "body",
        "displayName": "Body",
        "type": "string"
      },
      {
        "name": "labels",
        "displayName": "Labels",
        "type": "collection"
      },
      {
        "name": "label",
        "displayName": "Label",
        "type": "string",
        "default": ""
      },
      {
        "name": "assignees",
        "displayName": "Assignees",
        "type": "collection"
      },
      {
        "name": "assignee",
        "displayName": "Assignee",
        "type": "string",
        "default": ""
      },
      {
        "name": "issueNumber",
        "displayName": "Issue Number",
        "type": "number",
        "default": "0",
        "required": true
      },
      {
        "name": "editFields",
        "displayName": "Edit Fields",
        "type": "collection"
      },
      {
        "name": "state",
        "displayName": "State",
        "type": "options"
      },
      {
        "name": "state_reason",
        "displayName": "State Reason",
        "type": "options"
      },
      {
        "name": "lockReason",
        "displayName": "Lock Reason",
        "type": "options"
      },
      {
        "name": "releaseTag",
        "displayName": "Tag",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection"
      },
      {
        "name": "draft",
        "displayName": "Draft",
        "type": "boolean"
      },
      {
        "name": "prerelease",
        "displayName": "Prerelease",
        "type": "boolean"
      },
      {
        "name": "target_commitish",
        "displayName": "Target Commitish",
        "type": "string",
        "default": ""
      },
      {
        "name": "release_id",
        "displayName": "Release ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "tag_name",
        "displayName": "Tag Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "getRepositoryIssuesFilters",
        "displayName": "Filters",
        "type": "collection"
      },
      {
        "name": "creator",
        "displayName": "Creator",
        "type": "string",
        "default": ""
      },
      {
        "name": "mentioned",
        "displayName": "Mentioned",
        "type": "string",
        "default": ""
      },
      {
        "name": "since",
        "displayName": "Updated Since",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "sort",
        "displayName": "Sort",
        "type": "options"
      },
      {
        "name": "direction",
        "displayName": "Direction",
        "type": "options"
      },
      {
        "name": "getRepositoryPullRequestsFilters",
        "displayName": "Filters",
        "type": "collection"
      },
      {
        "name": "pullRequestNumber",
        "displayName": "PR Number",
        "type": "number",
        "default": "0",
        "required": true
      },
      {
        "name": "reviewId",
        "displayName": "Review ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      },
      {
        "name": "commitId",
        "displayName": "Commit ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "organization",
        "displayName": "Organization",
        "type": "string",
        "default": "",
        "required": true
      }
    ]
  },
  "GithubTrigger": {
    "name": "GithubTrigger",
    "displayName": "GithubTrigger",
    "type": "n8n-nodes-base.GithubTrigger",
    "subtitle": "={{$parameter[\"owner\"] + \"/\" + $parameter[\"repository\"] + \": \" + $parameter[\"events\"].join(\", \")}}",
    "description": "Starts the workflow when Github events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'githubApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "githubTrigger",
        "displayName": "Github Trigger"
      },
      {
        "name": "notice",
        "displayName": "Only members with owner privileges for an organization or admin privileges for a repository can set up the webhooks this node requires.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "owner",
        "displayName": "Repository Owner",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "Repository Owner",
        "type": "list",
        "placeholder": "Select an owner..."
      },
      {
        "name": "url",
        "displayName": "Link",
        "type": "string",
        "placeholder": "e.g. https://github.com/n8n-io"
      },
      {
        "name": "name",
        "displayName": "By Name",
        "type": "string",
        "placeholder": "e.g. n8n-io"
      },
      {
        "name": "repository",
        "displayName": "Repository Name",
        "type": "resourceLocator"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "insecureSSL",
        "displayName": "Insecure SSL",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Gitlab": {
    "name": "Gitlab",
    "displayName": "Gitlab",
    "type": "n8n-nodes-base.Gitlab",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Retrieve data from GitLab API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'gitlabApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "gitlab",
        "displayName": "GitLab"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "owner",
        "displayName": "Project Owner",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "n8n-io"
      },
      {
        "name": "repository",
        "displayName": "Project Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "body",
        "displayName": "Body",
        "type": "string"
      },
      {
        "name": "due_date",
        "displayName": "Due Date",
        "type": "dateTime"
      },
      {
        "name": "labels",
        "displayName": "Labels",
        "type": "collection"
      },
      {
        "name": "label",
        "displayName": "Label",
        "type": "string",
        "default": ""
      },
      {
        "name": "assignee_ids",
        "displayName": "Assignees",
        "type": "collection"
      },
      {
        "name": "assignee",
        "displayName": "Assignee",
        "type": "number",
        "default": "0"
      },
      {
        "name": "issueNumber",
        "displayName": "Issue Number",
        "type": "number",
        "default": "0",
        "required": true
      },
      {
        "name": "editFields",
        "displayName": "Edit Fields",
        "type": "collection"
      },
      {
        "name": "description",
        "displayName": "Body",
        "type": "string"
      },
      {
        "name": "state",
        "displayName": "State",
        "type": "options"
      },
      {
        "name": "lockReason",
        "displayName": "Lock Reason",
        "type": "options"
      },
      {
        "name": "releaseTag",
        "displayName": "Tag",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "ref",
        "displayName": "Ref",
        "type": "string",
        "default": ""
      },
      {
        "name": "projectId",
        "displayName": "Project ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "tag_name",
        "displayName": "Tag Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "order_by",
        "displayName": "Order By",
        "type": "options"
      },
      {
        "name": "sort",
        "displayName": "Sort",
        "type": "options"
      },
      {
        "name": "milestones",
        "displayName": "Milestones",
        "type": "string",
        "default": ""
      },
      {
        "name": "released_at",
        "displayName": "Released At",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "getRepositoryIssuesFilters",
        "displayName": "Filters",
        "type": "collection"
      },
      {
        "name": "assignee_username",
        "displayName": "Assignee",
        "type": "string",
        "default": ""
      },
      {
        "name": "author_username",
        "displayName": "Creator",
        "type": "string",
        "default": ""
      },
      {
        "name": "search",
        "displayName": "Search",
        "type": "string",
        "default": ""
      },
      {
        "name": "updated_after",
        "displayName": "Updated After",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "filePath",
        "displayName": "File Path",
        "type": "string",
        "default": ""
      },
      {
        "name": "page",
        "displayName": "Page",
        "type": "number"
      },
      {
        "name": "additionalParameters",
        "displayName": "Additional Parameters",
        "type": "collection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "recursive",
        "displayName": "Recursive",
        "type": "boolean"
      },
      {
        "name": "asBinaryProperty",
        "displayName": "As Binary Property",
        "type": "boolean"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Put Output File in Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "reference",
        "displayName": "Reference",
        "type": "string",
        "default": "",
        "placeholder": "main"
      },
      {
        "name": "binaryData",
        "displayName": "Binary File",
        "type": "boolean",
        "required": true
      },
      {
        "name": "fileContent",
        "displayName": "File Content",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "commitMessage",
        "displayName": "Commit Message",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "branch",
        "displayName": "Branch",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "branchStart",
        "displayName": "Start Branch",
        "type": "string",
        "default": ""
      },
      {
        "name": "author",
        "displayName": "Author",
        "type": "string",
        "default": ""
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "default": "",
        "placeholder": "name@email.com"
      },
      {
        "name": "encoding",
        "displayName": "Encoding",
        "type": "string",
        "default": "text"
      }
    ],
    "version": 1.0
  },
  "GitlabTrigger": {
    "name": "GitlabTrigger",
    "displayName": "GitlabTrigger",
    "type": "n8n-nodes-base.GitlabTrigger",
    "subtitle": "={{$parameter[\"owner\"] + \"/\" + $parameter[\"repository\"] + \": \" + $parameter[\"events\"].join(\", \")}}",
    "description": "Triggered when a new comment is made on commits, merge requests, issues, and code snippets",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'gitlabApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "gitlabTrigger",
        "displayName": "GitLab Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "owner",
        "displayName": "Repository Owner",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "n8n-io"
      },
      {
        "name": "repository",
        "displayName": "Repository Name",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "n8n"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "Gong": {
    "name": "Gong",
    "displayName": "Gong",
    "type": "n8n-nodes-base.Gong",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Interact with Gong API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'gongApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "gong",
        "displayName": "Gong"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Gotify": {
    "name": "Gotify",
    "displayName": "Gotify",
    "type": "n8n-nodes-base.Gotify",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Gotify API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'gotifyApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "gotify",
        "displayName": "Gotify"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "priority",
        "displayName": "Priority",
        "type": "number",
        "default": "1"
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "contentType",
        "displayName": "Content Type",
        "type": "options",
        "default": "text/plain"
      },
      {
        "name": "messageId",
        "displayName": "Message ID",
        "type": "string",
        "required": true
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "GoToWebinar": {
    "name": "GoToWebinar",
    "displayName": "GoToWebinar",
    "type": "n8n-nodes-base.GoToWebinar",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the GoToWebinar API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'goToWebinarOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "goToWebinar",
        "displayName": "GoToWebinar"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Grafana": {
    "name": "Grafana",
    "displayName": "Grafana",
    "type": "n8n-nodes-base.Grafana",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Grafana API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'grafanaApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "grafana",
        "displayName": "Grafana"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GraphQL": {
    "name": "GraphQL",
    "displayName": "GraphQL",
    "type": "n8n-nodes-base.GraphQL",
    "subtitle": null,
    "description": "Makes a GraphQL request and returns the received data",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'httpBasicAuth', required: true, displayOptions: { show: { authentication: ['basicAuth'",
    "webhooks": [],
    "properties": [
      {
        "name": "graphql",
        "displayName": "GraphQL"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "requestMethod",
        "displayName": "HTTP Request Method",
        "type": "options"
      },
      {
        "name": "endpoint",
        "displayName": "Endpoint",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "http://example.com/graphql"
      },
      {
        "name": "allowUnauthorizedCerts",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      },
      {
        "name": "requestFormat",
        "displayName": "Request Format",
        "type": "options",
        "required": true
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "variables",
        "displayName": "Variables",
        "type": "json",
        "default": ""
      },
      {
        "name": "operationName",
        "displayName": "Operation Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "responseFormat",
        "displayName": "Response Format",
        "type": "options"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Response Data Property Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "headerParametersUi",
        "displayName": "Headers",
        "type": "fixedCollection",
        "placeholder": "Add Header"
      },
      {
        "name": "parameter",
        "displayName": "Header",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      }
    ]
  },
  "Grist": {
    "name": "Grist",
    "displayName": "Grist",
    "type": "n8n-nodes-base.Grist",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Consume the Grist API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'gristApi', required: true, testedBy: 'gristApiTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "grist",
        "displayName": "Grist"
      }
    ],
    "version": 1.0
  },
  "GumroadTrigger": {
    "name": "GumroadTrigger",
    "displayName": "GumroadTrigger",
    "type": "n8n-nodes-base.GumroadTrigger",
    "subtitle": null,
    "description": "Handle Gumroad events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'gumroadApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "gumroadTrigger",
        "displayName": "Gumroad Trigger"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "",
        "required": true
      }
    ],
    "version": 1.0
  },
  "HackerNews": {
    "name": "HackerNews",
    "displayName": "HackerNews",
    "type": "n8n-nodes-base.HackerNews",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Hacker News API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "hackerNews",
        "displayName": "Hacker News"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "articleId",
        "displayName": "Article ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "username",
        "displayName": "Username",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "includeComments",
        "displayName": "Include Comments",
        "type": "boolean"
      },
      {
        "name": "keyword",
        "displayName": "Keyword",
        "type": "string",
        "default": ""
      },
      {
        "name": "tags",
        "displayName": "Tags",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "HaloPSA": {
    "name": "HaloPSA",
    "displayName": "HaloPSA",
    "type": "n8n-nodes-base.HaloPSA",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume HaloPSA API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'haloPSAApi', required: true, testedBy: 'haloPSAApiCredentialTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "haloPSA",
        "displayName": "HaloPSA"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Harvest": {
    "name": "Harvest",
    "displayName": "Harvest",
    "type": "n8n-nodes-base.Harvest",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Access data on Harvest",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'harvestApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "harvest",
        "displayName": "Harvest"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "accountId",
        "displayName": "Account Name or ID",
        "type": "options",
        "required": true
      }
    ],
    "version": 1.0
  },
  "HelpScout": {
    "name": "HelpScout",
    "displayName": "HelpScout",
    "type": "n8n-nodes-base.HelpScout",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Help Scout API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'helpScoutOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "helpScout",
        "displayName": "Help Scout"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "HelpScoutTrigger": {
    "name": "HelpScoutTrigger",
    "displayName": "HelpScoutTrigger",
    "type": "n8n-nodes-base.HelpScoutTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Help Scout events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'helpScoutOAuth2Api', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "helpScoutTrigger",
        "displayName": "Help Scout Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "HighLevel": {
    "name": "highLevel",
    "displayName": "HighLevel",
    "type": "n8n-nodes-base.HighLevel",
    "subtitle": null,
    "description": "Consume HighLevel API",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "highLevel",
        "displayName": "HighLevel"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "HomeAssistant": {
    "name": "HomeAssistant",
    "displayName": "HomeAssistant",
    "type": "n8n-nodes-base.HomeAssistant",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Home Assistant API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'homeAssistantApi', required: true, testedBy: 'homeAssistantApiTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "homeAssistant",
        "displayName": "Home Assistant"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Html": {
    "name": "Html",
    "displayName": "Html",
    "type": "n8n-nodes-base.Html",
    "subtitle": "={{ $parameter[\"operation\"] }}",
    "description": "The key under which the extracted value should be saved",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "extractionValues",
        "displayName": "Extraction Values",
        "type": "fixedCollection",
        "placeholder": "Add Value"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": ""
      },
      {
        "name": "cssSelector",
        "displayName": "CSS Selector",
        "type": "string",
        "default": "",
        "placeholder": ".price"
      },
      {
        "name": "returnValue",
        "displayName": "Return Value",
        "type": "options"
      },
      {
        "name": "attribute",
        "displayName": "Attribute",
        "type": "string"
      },
      {
        "name": "skipSelectors",
        "displayName": "Skip Selectors",
        "type": "string"
      },
      {
        "name": "returnArray",
        "displayName": "Return Array",
        "type": "boolean"
      },
      {
        "name": "html",
        "displayName": "HTML"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "notice",
        "displayName": "<b>Tips</b>: Type ctrl+space for completions. Use <code>{{ }}</code> for expressions and <code>&lt;style&gt;</code> tags for CSS. JS in <code>&lt;script&gt;</code> tags is included but not executed in n8n.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "sourceData",
        "displayName": "Source Data",
        "type": "options"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Input Binary Field",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "trimValues",
        "displayName": "Trim Values",
        "type": "boolean"
      },
      {
        "name": "cleanUpText",
        "displayName": "Clean Up Text",
        "type": "boolean"
      },
      {
        "name": "capitalize",
        "displayName": "Capitalize Headers",
        "type": "boolean"
      },
      {
        "name": "customStyling",
        "displayName": "Custom Styling",
        "type": "boolean"
      },
      {
        "name": "caption",
        "displayName": "Caption",
        "type": "string",
        "default": ""
      },
      {
        "name": "tableAttributes",
        "displayName": "Table Attributes",
        "type": "string",
        "default": "",
        "placeholder": "e.g. style=\"padding:10px\""
      },
      {
        "name": "headerAttributes",
        "displayName": "Header Attributes",
        "type": "string",
        "default": "",
        "placeholder": "e.g. style=\"padding:10px\""
      },
      {
        "name": "rowAttributes",
        "displayName": "Row Attributes",
        "type": "string",
        "default": "",
        "placeholder": "e.g. style=\"padding:10px\""
      },
      {
        "name": "cellAttributes",
        "displayName": "Cell Attributes",
        "type": "string",
        "default": "",
        "placeholder": "e.g. style=\"padding:10px\""
      }
    ]
  },
  "HtmlExtract": {
    "name": "HtmlExtract",
    "displayName": "HtmlExtract",
    "type": "n8n-nodes-base.HtmlExtract",
    "subtitle": "={{$parameter[\"sourceData\"] + \": \" + $parameter[\"dataPropertyName\"]}}",
    "description": "Extracts data from HTML",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "htmlExtract",
        "displayName": "HTML Extract"
      },
      {
        "name": "sourceData",
        "displayName": "Source Data",
        "type": "options"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Input Binary Field",
        "type": "string"
      },
      {
        "name": "extractionValues",
        "displayName": "Extraction Values",
        "type": "fixedCollection",
        "placeholder": "Add Value"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": ""
      },
      {
        "name": "cssSelector",
        "displayName": "CSS Selector",
        "type": "string",
        "default": "",
        "placeholder": ".price"
      },
      {
        "name": "returnValue",
        "displayName": "Return Value",
        "type": "options"
      },
      {
        "name": "attribute",
        "displayName": "Attribute",
        "type": "string"
      },
      {
        "name": "returnArray",
        "displayName": "Return Array",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "trimValues",
        "displayName": "Trim Values",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "HttpRequest": {
    "name": "httpRequest",
    "displayName": "HTTP Request",
    "type": "n8n-nodes-base.HttpRequest",
    "subtitle": "={{$parameter[\"requestMethod\"] + \": \" + $parameter[\"url\"]}}",
    "description": "Makes an HTTP request and returns the response data",
    "group": [
      "output"
    ],
    "defaultVersion": 4.2,
    "availableVersions": [
      1.0,
      2.0,
      3.0,
      4.0,
      4.1,
      4.2
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "httpRequest",
        "displayName": "HTTP Request"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "requestMethod",
        "displayName": "Request Method",
        "type": "options"
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "http://example.com/index.html"
      },
      {
        "name": "allowUnauthorizedCerts",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      },
      {
        "name": "responseFormat",
        "displayName": "Response Format",
        "type": "options"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "jsonParameters",
        "displayName": "JSON/RAW Parameters",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "batchInterval",
        "displayName": "Batch Interval",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "type": "number"
      },
      {
        "name": "bodyContentType",
        "displayName": "Body Content Type",
        "type": "options"
      },
      {
        "name": "fullResponse",
        "displayName": "Full Response",
        "type": "boolean"
      },
      {
        "name": "followAllRedirects",
        "displayName": "Follow All Redirects",
        "type": "boolean"
      },
      {
        "name": "followRedirect",
        "displayName": "Follow GET/HEAD Redirect",
        "type": "boolean"
      },
      {
        "name": "ignoreResponseCode",
        "displayName": "Ignore Response Code",
        "type": "boolean"
      },
      {
        "name": "bodyContentCustomMimeType",
        "displayName": "MIME Type",
        "type": "string",
        "default": "",
        "placeholder": "text/xml"
      },
      {
        "name": "proxy",
        "displayName": "Proxy",
        "type": "string",
        "default": "",
        "placeholder": "http://myproxy:3128"
      },
      {
        "name": "splitIntoItems",
        "displayName": "Split Into Items",
        "type": "boolean"
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "useQueryString",
        "displayName": "Use Querystring",
        "type": "boolean"
      },
      {
        "name": "sendBinaryData",
        "displayName": "Send Binary File",
        "type": "boolean"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "bodyParametersJson",
        "displayName": "Body Parameters",
        "type": "json"
      },
      {
        "name": "bodyParametersUi",
        "displayName": "Body Parameters",
        "type": "fixedCollection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "parameter",
        "displayName": "Parameter",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "headerParametersJson",
        "displayName": "Headers",
        "type": "json"
      },
      {
        "name": "headerParametersUi",
        "displayName": "Headers",
        "type": "fixedCollection",
        "placeholder": "Add Header"
      },
      {
        "name": "queryParametersJson",
        "displayName": "Query Parameters",
        "type": "json"
      },
      {
        "name": "queryParametersUi",
        "displayName": "Query Parameters",
        "type": "fixedCollection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "infoMessage",
        "displayName": "You can view the raw requests this node makes in your browser's developer console",
        "type": "notice",
        "default": ""
      },
      {
        "name": "body",
        "displayName": "Body Parameters"
      },
      {
        "name": "headers",
        "displayName": "Headers"
      },
      {
        "name": "qs",
        "displayName": "Query Parameters"
      },
      {
        "name": "nodeCredentialType",
        "displayName": "Credential Type",
        "type": "credentialsSelect",
        "default": "",
        "required": true
      },
      {
        "name": "genericAuthType",
        "displayName": "Generic Auth Type",
        "type": "credentialsSelect",
        "default": "",
        "required": true
      }
    ]
  },
  "Hubspot": {
    "name": "hubspot",
    "displayName": "HubSpot",
    "type": "n8n-nodes-base.Hubspot",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume HubSpot API",
    "group": [
      "output"
    ],
    "defaultVersion": 2.2,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      2.2
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "hubspot",
        "displayName": "HubSpot"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "HubspotTrigger": {
    "name": "HubspotTrigger",
    "displayName": "HubspotTrigger",
    "type": "n8n-nodes-base.HubspotTrigger",
    "subtitle": null,
    "description": "Starts the workflow when HubSpot events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'hubspotDeveloperApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', }, { name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "hubspotTrigger",
        "displayName": "HubSpot Trigger"
      },
      {
        "name": "eventsUi",
        "displayName": "Events",
        "type": "fixedCollection"
      },
      {
        "name": "eventValues",
        "displayName": "Event",
        "type": "options"
      },
      {
        "name": "property",
        "displayName": "Property Name or ID",
        "type": "options"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "maxConcurrentRequests",
        "displayName": "Max Concurrent Requests",
        "type": "number",
        "typeOptions": {
          "minValue": 5
        }
      }
    ],
    "version": 1.0
  },
  "HumanticAi": {
    "name": "HumanticAi",
    "displayName": "HumanticAi",
    "type": "n8n-nodes-base.HumanticAi",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Humantic AI API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'humanticAiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "humanticAi",
        "displayName": "Humantic AI"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Hunter": {
    "name": "Hunter",
    "displayName": "Hunter",
    "type": "n8n-nodes-base.Hunter",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Consume Hunter API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'hunterApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "hunter",
        "displayName": "Hunter"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "domain",
        "displayName": "Domain",
        "type": "string"
      },
      {
        "name": "onlyEmails",
        "displayName": "Only Emails",
        "type": "boolean"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options",
        "default": ""
      },
      {
        "name": "seniority",
        "displayName": "Seniority",
        "type": "multiOptions"
      },
      {
        "name": "department",
        "displayName": "Department",
        "type": "multiOptions"
      },
      {
        "name": "firstname",
        "displayName": "First Name",
        "type": "string"
      },
      {
        "name": "lastname",
        "displayName": "Last Name",
        "type": "string"
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "placeholder": "name@email.com"
      }
    ],
    "version": 1.0
  },
  "ICalendar": {
    "name": "ICalendar",
    "displayName": "ICalendar",
    "type": "n8n-nodes-base.ICalendar",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Create iCalendar file",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "iCal",
        "displayName": "iCalendar"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "If": {
    "name": "if",
    "displayName": "If",
    "type": "n8n-nodes-base.If",
    "subtitle": null,
    "description": "Route items to different branches (true/false)",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.2,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      2.2
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "if",
        "displayName": "If"
      },
      {
        "name": "conditions",
        "displayName": "Conditions",
        "type": "fixedCollection",
        "placeholder": "Add Condition"
      },
      {
        "name": "boolean",
        "displayName": "Boolean",
        "type": "boolean"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "value2",
        "displayName": "Value 2",
        "type": "boolean"
      },
      {
        "name": "dateTime",
        "displayName": "Date & Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "number",
        "displayName": "Number",
        "type": "number",
        "default": "0"
      },
      {
        "name": "string",
        "displayName": "String",
        "type": "string",
        "default": ""
      },
      {
        "name": "combineOperation",
        "displayName": "Combine",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "ignoreCase",
        "displayName": "Ignore Case",
        "type": "boolean"
      }
    ]
  },
  "Intercom": {
    "name": "Intercom",
    "displayName": "Intercom",
    "type": "n8n-nodes-base.Intercom",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Intercom API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'intercomApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "intercom",
        "displayName": "Intercom"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Interval": {
    "name": "Interval",
    "displayName": "Interval",
    "type": "n8n-nodes-base.Interval",
    "subtitle": null,
    "description": "Triggers the workflow in a given interval",
    "group": [
      "trigger",
      "schedule"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "interval",
        "displayName": "Interval"
      },
      {
        "name": "notice",
        "displayName": "This workflow will run on the schedule you define here once you <a data-key=\"activate\">activate</a> it.<br><br>For testing, you can also trigger it manually: by going back to the canvas and clicking \\",
        "type": "notice",
        "default": ""
      },
      {
        "name": "unit",
        "displayName": "Unit",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "InvoiceNinja": {
    "name": "InvoiceNinja",
    "displayName": "InvoiceNinja",
    "type": "n8n-nodes-base.InvoiceNinja",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Invoice Ninja API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'invoiceNinjaApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "invoiceNinja",
        "displayName": "Invoice Ninja"
      },
      {
        "name": "apiVersion",
        "displayName": "API Version",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "InvoiceNinjaTrigger": {
    "name": "InvoiceNinjaTrigger",
    "displayName": "InvoiceNinjaTrigger",
    "type": "n8n-nodes-base.InvoiceNinjaTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Invoice Ninja events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'invoiceNinjaApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "invoiceNinjaTrigger",
        "displayName": "Invoice Ninja Trigger"
      },
      {
        "name": "apiVersion",
        "displayName": "API Version",
        "type": "options"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      }
    ]
  },
  "ItemLists": {
    "name": "itemLists",
    "displayName": "Item Lists",
    "type": "n8n-nodes-base.ItemLists",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Helper for working with lists of items and transforming arrays",
    "group": [
      "input"
    ],
    "defaultVersion": 3.1,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      2.2,
      3.0,
      3.1
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "itemLists",
        "displayName": "Item Lists"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "fieldToSplitOut",
        "displayName": "Field To Split Out",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "include",
        "displayName": "Include",
        "type": "options"
      },
      {
        "name": "fieldsToInclude",
        "displayName": "Fields To Include",
        "type": "fixedCollection"
      },
      {
        "name": "fields",
        "displayName": "",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "aggregate",
        "displayName": "Aggregate",
        "type": "options",
        "default": "aggregateIndividualFields"
      },
      {
        "name": "fieldsToAggregate",
        "displayName": "Fields To Aggregate",
        "type": "fixedCollection"
      },
      {
        "name": "fieldToAggregate",
        "displayName": "",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "renameField",
        "displayName": "Rename Field",
        "type": "boolean"
      },
      {
        "name": "outputFieldName",
        "displayName": "Output Field Name"
      },
      {
        "name": "destinationFieldName",
        "displayName": "Put Output in Field",
        "type": "string"
      },
      {
        "name": "fieldsToExclude",
        "displayName": "Fields To Exclude",
        "type": "fixedCollection"
      },
      {
        "name": "compare",
        "displayName": "Compare",
        "type": "options"
      },
      {
        "name": "fieldsToCompare",
        "displayName": "Fields To Compare",
        "type": "fixedCollection"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "sortFieldsUi",
        "displayName": "Fields To Sort By",
        "type": "fixedCollection"
      },
      {
        "name": "sortField",
        "displayName": "",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. id"
      },
      {
        "name": "order",
        "displayName": "Order",
        "type": "options"
      },
      {
        "name": "code",
        "displayName": "Code",
        "type": "string"
      },
      {
        "name": "maxItems",
        "displayName": "Max Items",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "keep",
        "displayName": "Keep",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "removeOtherFields",
        "displayName": "Remove Other Fields",
        "type": "boolean"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      },
      {
        "name": "mergeLists",
        "displayName": "Merge Lists",
        "type": "boolean"
      },
      {
        "name": "keepMissing",
        "displayName": "Keep Missing And Null Values",
        "type": "boolean"
      }
    ]
  },
  "Iterable": {
    "name": "Iterable",
    "displayName": "Iterable",
    "type": "n8n-nodes-base.Iterable",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Iterable API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'iterableApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "iterable",
        "displayName": "Iterable"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Jenkins": {
    "name": "Jenkins",
    "displayName": "Jenkins",
    "type": "n8n-nodes-base.Jenkins",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Jenkins API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'jenkinsApi', required: true, testedBy: 'jenkinApiCredentialTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "jenkins",
        "displayName": "Jenkins"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "triggerParamsNotice",
        "displayName": "Make sure the job is setup to support triggering with parameters. <a href=\"https://wiki.jenkins.io/display/JENKINS/Parameterized+Build\" target=\"_blank\">More info</a>",
        "type": "notice"
      },
      {
        "name": "job",
        "displayName": "Job Name or ID",
        "type": "options"
      },
      {
        "name": "param",
        "displayName": "Parameters",
        "type": "fixedCollection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "params",
        "displayName": "Parameters",
        "type": "options"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "newJob",
        "displayName": "New Job Name",
        "type": "string"
      },
      {
        "name": "xml",
        "displayName": "XML",
        "type": "string"
      },
      {
        "name": "createNotice",
        "displayName": "To get the XML of an existing job, add ‘config.xml’ to the end of the job URL",
        "type": "notice",
        "default": ""
      },
      {
        "name": "reason",
        "displayName": "Reason",
        "type": "string"
      },
      {
        "name": "instanceNotice",
        "displayName": "Instance operation can shutdown Jenkins instance and make it unresponsive. Some commands may not be available depending on instance implementation.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number",
        "default": "50",
        "typeOptions": {
          "minValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "JinaAi": {
    "name": "JinaAi",
    "displayName": "JinaAi",
    "type": "n8n-nodes-base.JinaAi",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "Interact with Jina AI API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'jinaAiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "jinaAi",
        "displayName": "Jina AI"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "https://jina.ai/"
      },
      {
        "name": "simplify",
        "displayName": "Simplify",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "outputFormat",
        "displayName": "Output Format",
        "type": "options"
      },
      {
        "name": "targetSelector",
        "displayName": "Target CSS Selector",
        "type": "string",
        "default": "",
        "placeholder": "e.g. #main-content .article"
      },
      {
        "name": "excludeSelector",
        "displayName": "Exclude CSS Selector",
        "type": "string",
        "default": "",
        "placeholder": "e.g. header, footer, .ads"
      },
      {
        "name": "enableImageCaptioning",
        "displayName": "Enable Image Captioning",
        "type": "boolean"
      },
      {
        "name": "waitForSelector",
        "displayName": "Wait for CSS Selector",
        "type": "string",
        "default": "",
        "placeholder": "e.g. #results-loaded"
      },
      {
        "name": "searchQuery",
        "displayName": "Search Query",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. Jina AI"
      },
      {
        "name": "siteFilter",
        "displayName": "Site Filter",
        "type": "string",
        "default": "",
        "placeholder": "e.g. jina.ai, github.com"
      },
      {
        "name": "pageNumber",
        "displayName": "Page Number",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "researchQuery",
        "displayName": "Research Query",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. Analyze the impact of renewable energy sources on climate change mitigation"
      },
      {
        "name": "maxReturnedSources",
        "displayName": "Max Returned Sources",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "prioritizeSources",
        "displayName": "Prioritize Sources",
        "type": "string",
        "default": "",
        "placeholder": "e.g. jina.ai, github.com"
      },
      {
        "name": "excludeSources",
        "displayName": "Exclude Sources",
        "type": "string",
        "default": "",
        "placeholder": "e.g. jina.ai, github.com"
      }
    ],
    "version": 1.0
  },
  "Jira": {
    "name": "Jira",
    "displayName": "Jira",
    "type": "n8n-nodes-base.Jira",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Jira Software API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'jiraSoftwareCloudApi', required: true, displayOptions: { show: { jiraVersion: ['cloud'",
    "webhooks": [],
    "properties": [
      {
        "name": "jira",
        "displayName": "Jira Software"
      },
      {
        "name": "jiraVersion",
        "displayName": "Jira Version",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "JiraTrigger": {
    "name": "JiraTrigger",
    "displayName": "JiraTrigger",
    "type": "n8n-nodes-base.JiraTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Jira events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ displayName: 'Credentials to Connect to Jira', name: 'jiraSoftwareCloudApi', required: true, displayOptions: { show: { jiraVersion: ['cloud'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "jiraTrigger",
        "displayName": "Jira Trigger"
      },
      {
        "name": "jiraSoftwareCloudApi",
        "displayName": "Credentials to Connect to Jira",
        "required": true
      },
      {
        "name": "jiraSoftwareServerApi",
        "displayName": "Credentials to Connect to Jira",
        "required": true
      },
      {
        "name": "jiraSoftwareServerPatApi",
        "displayName": "Credentials to Connect to Jira",
        "required": true
      },
      {
        "name": "httpQueryAuth",
        "displayName": "Credentials to Authenticate Webhook"
      },
      {
        "name": "jiraVersion",
        "displayName": "Jira Version",
        "type": "options"
      },
      {
        "name": "authenticateWebhook",
        "displayName": "Authenticate Incoming Webhook",
        "type": "boolean"
      },
      {
        "name": "incomingAuthentication",
        "displayName": "Authenticate Webhook With",
        "type": "options"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "excludeBody",
        "displayName": "Exclude Body",
        "type": "boolean"
      },
      {
        "name": "filter",
        "displayName": "Filter",
        "type": "string",
        "default": "",
        "placeholder": "Project = JRA AND resolution = Fixed"
      },
      {
        "name": "includeFields",
        "displayName": "Include Fields",
        "type": "multiOptions"
      }
    ]
  },
  "JotFormTrigger": {
    "name": "JotFormTrigger",
    "displayName": "JotFormTrigger",
    "type": "n8n-nodes-base.JotFormTrigger",
    "subtitle": null,
    "description": "Handle JotForm events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'jotFormApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "jotFormTrigger",
        "displayName": "JotForm Trigger"
      },
      {
        "name": "form",
        "displayName": "Form Name or ID",
        "type": "options",
        "required": true
      },
      {
        "name": "resolveData",
        "displayName": "Resolve Data",
        "type": "boolean"
      },
      {
        "name": "onlyAnswers",
        "displayName": "Only Answers",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Jwt": {
    "name": "Jwt",
    "displayName": "Jwt",
    "type": "n8n-nodes-base.Jwt",
    "subtitle": null,
    "description": "Be sure to add a valid JWT token to the 'Token' parameter",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ // eslint-disable-next-line n8n-nodes-base/node-class-description-credentials-name-unsuffixed name: 'jwtAuth', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "jwt",
        "displayName": "JWT"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "useJson",
        "displayName": "Use JSON to Build Payload",
        "type": "boolean"
      },
      {
        "name": "claims",
        "displayName": "Payload Claims",
        "type": "collection",
        "placeholder": "Add Claim"
      },
      {
        "name": "audience",
        "displayName": "Audience",
        "type": "string",
        "default": "",
        "placeholder": "e.g. https://example.com"
      },
      {
        "name": "expiresIn",
        "displayName": "Expires In",
        "type": "number",
        "default": "3600",
        "placeholder": "e.g. 3600",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "issuer",
        "displayName": "Issuer",
        "type": "string",
        "default": "",
        "placeholder": "e.g. https://example.com"
      },
      {
        "name": "jwtid",
        "displayName": "JWT ID",
        "type": "string",
        "default": "",
        "placeholder": "e.g. 123456"
      },
      {
        "name": "notBefore",
        "displayName": "Not Before",
        "type": "number",
        "default": "0",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "subject",
        "displayName": "Subject",
        "type": "string",
        "default": ""
      },
      {
        "name": "claimsJson",
        "displayName": "Payload Claims (JSON)",
        "type": "json"
      },
      {
        "name": "token",
        "displayName": "Token",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "complete",
        "displayName": "Return Additional Info",
        "type": "boolean"
      },
      {
        "name": "ignoreExpiration",
        "displayName": "Ignore Expiration",
        "type": "boolean"
      },
      {
        "name": "ignoreNotBefore",
        "displayName": "Ignore Not Before Claim",
        "type": "boolean"
      },
      {
        "name": "clockTolerance",
        "displayName": "Clock Tolerance",
        "type": "number",
        "default": "0",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "kid",
        "displayName": "Key ID",
        "type": "string",
        "default": "",
        "placeholder": "e.g. 123456"
      },
      {
        "name": "algorithm",
        "displayName": "Override Algorithm",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Kafka": {
    "name": "Kafka",
    "displayName": "Kafka",
    "type": "n8n-nodes-base.Kafka",
    "subtitle": null,
    "description": "Sends messages to a Kafka topic",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'kafka', required: true, testedBy: 'kafkaConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "kafka",
        "displayName": "Kafka"
      },
      {
        "name": "topic",
        "displayName": "Topic",
        "type": "string",
        "default": "",
        "placeholder": "topic-name"
      },
      {
        "name": "sendInputData",
        "displayName": "Send Input Data",
        "type": "boolean"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string"
      },
      {
        "name": "jsonParameters",
        "displayName": "JSON Parameters",
        "type": "boolean"
      },
      {
        "name": "useSchemaRegistry",
        "displayName": "Use Schema Registry",
        "type": "boolean"
      },
      {
        "name": "schemaRegistryUrl",
        "displayName": "Schema Registry URL",
        "type": "string",
        "required": true
      },
      {
        "name": "useKey",
        "displayName": "Use Key",
        "type": "boolean"
      },
      {
        "name": "key",
        "displayName": "Key",
        "type": "string",
        "required": true
      },
      {
        "name": "eventName",
        "displayName": "Event Name",
        "type": "string",
        "required": true
      },
      {
        "name": "headersUi",
        "displayName": "Headers",
        "type": "fixedCollection",
        "placeholder": "Add Header"
      },
      {
        "name": "headerValues",
        "displayName": "Header",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "headerParametersJson",
        "displayName": "Headers (JSON)",
        "type": "json"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "acks",
        "displayName": "Acks",
        "type": "boolean"
      },
      {
        "name": "compression",
        "displayName": "Compression",
        "type": "boolean"
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "default": "30000"
      }
    ],
    "version": 1.0
  },
  "KafkaTrigger": {
    "name": "KafkaTrigger",
    "displayName": "KafkaTrigger",
    "type": "n8n-nodes-base.KafkaTrigger",
    "subtitle": null,
    "description": "Consume messages from a Kafka topic",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'kafka', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "kafkaTrigger",
        "displayName": "Kafka Trigger"
      },
      {
        "name": "topic",
        "displayName": "Topic",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "topic-name"
      },
      {
        "name": "groupId",
        "displayName": "Group ID",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "n8n-kafka"
      },
      {
        "name": "useSchemaRegistry",
        "displayName": "Use Schema Registry",
        "type": "boolean"
      },
      {
        "name": "schemaRegistryUrl",
        "displayName": "Schema Registry URL",
        "type": "string",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "allowAutoTopicCreation",
        "displayName": "Allow Topic Creation",
        "type": "boolean"
      },
      {
        "name": "autoCommitThreshold",
        "displayName": "Auto Commit Threshold",
        "type": "number",
        "default": "0"
      },
      {
        "name": "autoCommitInterval",
        "displayName": "Auto Commit Interval",
        "type": "number",
        "default": "0"
      },
      {
        "name": "heartbeatInterval",
        "displayName": "Heartbeat Interval",
        "type": "number",
        "default": "3000"
      },
      {
        "name": "maxInFlightRequests",
        "displayName": "Max Number of Requests",
        "type": "number",
        "default": "1"
      },
      {
        "name": "fromBeginning",
        "displayName": "Read Messages From Beginning",
        "type": "boolean"
      },
      {
        "name": "jsonParseMessage",
        "displayName": "JSON Parse Message",
        "type": "boolean"
      },
      {
        "name": "parallelProcessing",
        "displayName": "Parallel Processing",
        "type": "boolean"
      },
      {
        "name": "onlyMessage",
        "displayName": "Only Message",
        "type": "boolean"
      },
      {
        "name": "returnHeaders",
        "displayName": "Return Headers",
        "type": "boolean"
      },
      {
        "name": "sessionTimeout",
        "displayName": "Session Timeout",
        "type": "number",
        "default": "30000"
      }
    ]
  },
  "Keap": {
    "name": "Keap",
    "displayName": "Keap",
    "type": "n8n-nodes-base.Keap",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Keap API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'keapOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "keap",
        "displayName": "Keap"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "KeapTrigger": {
    "name": "KeapTrigger",
    "displayName": "KeapTrigger",
    "type": "n8n-nodes-base.KeapTrigger",
    "subtitle": "={{$parameter[\"eventId\"]}}",
    "description": "Starts the workflow when Infusionsoft events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'keapOAuth2Api', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "keapTrigger",
        "displayName": "Keap Trigger"
      },
      {
        "name": "eventId",
        "displayName": "Event Name or ID",
        "type": "options"
      },
      {
        "name": "rawData",
        "displayName": "RAW Data",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Kitemaker": {
    "name": "Kitemaker",
    "displayName": "Kitemaker",
    "type": "n8n-nodes-base.Kitemaker",
    "subtitle": "={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}",
    "description": "Consume the Kitemaker GraphQL API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'kitemakerApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "kitemaker",
        "displayName": "Kitemaker"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "KoBoToolbox": {
    "name": "KoBoToolbox",
    "displayName": "KoBoToolbox",
    "type": "n8n-nodes-base.KoBoToolbox",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Work with KoBoToolbox forms and submissions",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'koBoToolboxApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "koBoToolbox",
        "displayName": "KoBoToolbox"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "KoBoToolboxTrigger": {
    "name": "KoBoToolboxTrigger",
    "displayName": "KoBoToolboxTrigger",
    "type": "n8n-nodes-base.KoBoToolboxTrigger",
    "subtitle": null,
    "description": "Process KoBoToolbox submissions",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'koBoToolboxApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "koBoToolboxTrigger",
        "displayName": "KoBoToolbox Trigger"
      },
      {
        "name": "formId",
        "displayName": "Form Name or ID",
        "type": "options"
      },
      {
        "name": "triggerOn",
        "displayName": "Trigger On",
        "type": "options",
        "default": "formSubmission",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Ldap": {
    "name": "Ldap",
    "displayName": "Ldap",
    "type": "n8n-nodes-base.Ldap",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Interact with LDAP servers",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ // eslint-disable-next-line n8n-nodes-base/node-class-description-credentials-name-unsuffixed name: 'ldap', required: true, testedBy: 'ldapConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "ldap",
        "displayName": "Ldap"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "nodeDebug",
        "displayName": "Debug",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Lemlist": {
    "name": "lemlist",
    "displayName": "Lemlist",
    "type": "n8n-nodes-base.Lemlist",
    "subtitle": null,
    "description": "Consume the Lemlist API",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "lemlist",
        "displayName": "Lemlist"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "LemlistTrigger": {
    "name": "LemlistTrigger",
    "displayName": "LemlistTrigger",
    "type": "n8n-nodes-base.LemlistTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle Lemlist events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'lemlistApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "lemlistTrigger",
        "displayName": "Lemlist Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "campaignId",
        "displayName": "Campaign Name or ID",
        "type": "options"
      },
      {
        "name": "isFirst",
        "displayName": "Is First",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Line": {
    "name": "Line",
    "displayName": "Line",
    "type": "n8n-nodes-base.Line",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Line API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'lineNotifyOAuth2Api', required: true, displayOptions: { show: { resource: ['notification'",
    "webhooks": [],
    "properties": [
      {
        "name": "line",
        "displayName": "Line"
      },
      {
        "name": "notice",
        "displayName": "End of service: LINE Notify will be discontinued from April 1st 2025, You can find more information <a href=\"https://notify-bot.line.me/closing-announce\" target=\"_blank\">here</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Linear": {
    "name": "Linear",
    "displayName": "Linear",
    "type": "n8n-nodes-base.Linear",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Linear API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'linearApi', required: true, testedBy: 'linearApiTest', displayOptions: { show: { authentication: ['apiToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "linear",
        "displayName": "Linear"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "LinearTrigger": {
    "name": "LinearTrigger",
    "displayName": "LinearTrigger",
    "type": "n8n-nodes-base.LinearTrigger",
    "subtitle": "={{$parameter[\"triggerOn\"]}}",
    "description": "Starts the workflow when Linear events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'linearApi', required: true, testedBy: 'linearApiTest', displayOptions: { show: { authentication: ['apiToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "linearTrigger",
        "displayName": "Linear Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "notice",
        "displayName": "Make sure your credential has the \"Admin\" scope to create webhooks.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "teamId",
        "displayName": "Team Name or ID",
        "type": "options"
      },
      {
        "name": "resources",
        "displayName": "Listen to Resources",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "LingvaNex": {
    "name": "LingvaNex",
    "displayName": "LingvaNex",
    "type": "n8n-nodes-base.LingvaNex",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume LingvaNex API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'lingvaNexApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lingvaNex",
        "displayName": "LingvaNex"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "translateTo",
        "displayName": "Translate To",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Additional Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "from",
        "displayName": "From",
        "type": "options"
      },
      {
        "name": "platform",
        "displayName": "Platform",
        "type": "string",
        "default": "api"
      },
      {
        "name": "translateMode",
        "displayName": "Translate Mode",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "LinkedIn": {
    "name": "LinkedIn",
    "displayName": "LinkedIn",
    "type": "n8n-nodes-base.LinkedIn",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume LinkedIn API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'linkedInOAuth2Api', required: true, displayOptions: { show: { authentication: ['standard'",
    "webhooks": [],
    "properties": [
      {
        "name": "linkedIn",
        "displayName": "LinkedIn"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "LocalFileTrigger": {
    "name": "LocalFileTrigger",
    "displayName": "LocalFileTrigger",
    "type": "n8n-nodes-base.LocalFileTrigger",
    "subtitle": "=Path: {{$parameter[\"path\"]}}",
    "description": "Triggers a workflow on file system changes",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "localFileTrigger",
        "displayName": "Local File Trigger"
      },
      {
        "name": "triggerOn",
        "displayName": "Trigger On",
        "type": "options"
      },
      {
        "name": "path",
        "displayName": "File to Watch",
        "type": "string"
      },
      {
        "name": "events",
        "displayName": "Watch for",
        "type": "multiOptions"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "awaitWriteFinish",
        "displayName": "Await Write Finish",
        "type": "boolean"
      },
      {
        "name": "followSymlinks",
        "displayName": "Include Linked Files/Folders",
        "type": "boolean"
      },
      {
        "name": "ignored",
        "displayName": "Ignore",
        "type": "string",
        "default": "",
        "placeholder": "**/*.txt or ignore-me/subfolder"
      },
      {
        "name": "ignoreInitial",
        "displayName": "Ignore Existing Files/Folders",
        "type": "boolean"
      },
      {
        "name": "depth",
        "displayName": "Max Folder Depth",
        "type": "options"
      },
      {
        "name": "usePolling",
        "displayName": "Use Polling",
        "type": "boolean"
      },
      {
        "name": "ignoreMode",
        "displayName": "Ignore Mode",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "LoneScale": {
    "name": "LoneScale",
    "displayName": "LoneScale",
    "type": "n8n-nodes-base.LoneScale",
    "subtitle": "={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}",
    "description": "Create List, add / delete items",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'loneScaleApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "loneScale",
        "displayName": "LoneScale"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options",
        "required": true
      },
      {
        "name": "list",
        "displayName": "List Name or ID",
        "type": "options"
      },
      {
        "name": "first_name",
        "displayName": "First Name",
        "type": "string"
      },
      {
        "name": "last_name",
        "displayName": "Last Name",
        "type": "string"
      },
      {
        "name": "company_name",
        "displayName": "Company Name",
        "type": "string"
      },
      {
        "name": "peopleAdditionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "full_name",
        "displayName": "Full Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "email",
        "displayName": "Contact Email",
        "type": "string",
        "default": "",
        "placeholder": "name@email.com"
      },
      {
        "name": "current_position",
        "displayName": "Current Position",
        "type": "string",
        "default": ""
      },
      {
        "name": "domain",
        "displayName": "Company Domain",
        "type": "string",
        "default": ""
      },
      {
        "name": "linkedin_url",
        "displayName": "Linkedin Url",
        "type": "string",
        "default": ""
      },
      {
        "name": "location",
        "displayName": "Contact Location",
        "type": "string",
        "default": ""
      },
      {
        "name": "contact_id",
        "displayName": "Contact ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "companyAdditionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "required": true
      }
    ],
    "version": 1.0
  },
  "LoneScaleTrigger": {
    "name": "LoneScaleTrigger",
    "displayName": "LoneScaleTrigger",
    "type": "n8n-nodes-base.LoneScaleTrigger",
    "subtitle": null,
    "description": "Trigger LoneScale Workflow",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'loneScaleApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "loneScaleTrigger",
        "displayName": "LoneScale Trigger"
      },
      {
        "name": "workflow",
        "displayName": "Workflow Name",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Magento2": {
    "name": "Magento2",
    "displayName": "Magento2",
    "type": "n8n-nodes-base.Magento2",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Magento API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'magento2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "magento2",
        "displayName": "Magento 2"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Mailcheck": {
    "name": "Mailcheck",
    "displayName": "Mailcheck",
    "type": "n8n-nodes-base.Mailcheck",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Mailcheck API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailcheckApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "mailcheck",
        "displayName": "Mailcheck"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "placeholder": "name@email.com"
      }
    ],
    "version": 1.0
  },
  "Mailchimp": {
    "name": "Mailchimp",
    "displayName": "Mailchimp",
    "type": "n8n-nodes-base.Mailchimp",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Mailchimp API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailchimpApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": [],
    "properties": [
      {
        "name": "mailchimp",
        "displayName": "Mailchimp"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "required": true
      },
      {
        "name": "list",
        "displayName": "List Name or ID",
        "type": "options"
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "required": true,
        "placeholder": "name@email.com"
      },
      {
        "name": "status",
        "displayName": "Status",
        "type": "options",
        "required": true
      },
      {
        "name": "jsonParameters",
        "displayName": "JSON Parameters",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "emailType",
        "displayName": "Email Type",
        "type": "options"
      },
      {
        "name": "language",
        "displayName": "Language",
        "type": "string",
        "default": ""
      },
      {
        "name": "ipOptIn",
        "displayName": "Opt-in IP",
        "type": "string",
        "default": ""
      },
      {
        "name": "ipSignup",
        "displayName": "Signup IP",
        "type": "string",
        "default": ""
      },
      {
        "name": "timestampSignup",
        "displayName": "Signup Timestamp",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "tags",
        "displayName": "Tags",
        "type": "string",
        "default": ""
      },
      {
        "name": "vip",
        "displayName": "Vip",
        "type": "boolean"
      },
      {
        "name": "timestampOpt",
        "displayName": "Opt-in Timestamp",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "locationFieldsUi",
        "displayName": "Location",
        "type": "fixedCollection",
        "placeholder": "Add Location"
      },
      {
        "name": "locationFieldsValues",
        "displayName": "Location",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "longitude",
        "displayName": "Longitude",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "mergeFieldsUi",
        "displayName": "Merge Fields",
        "type": "fixedCollection",
        "placeholder": "Add Merge Fields"
      },
      {
        "name": "mergeFieldsValues",
        "displayName": "Field"
      },
      {
        "name": "name",
        "displayName": "Field Name or ID",
        "type": "options"
      },
      {
        "name": "value",
        "displayName": "Field Value",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "mergeFieldsJson",
        "displayName": "Merge Fields",
        "type": "json"
      },
      {
        "name": "locationJson",
        "displayName": "Location",
        "type": "json"
      },
      {
        "name": "groupsUi",
        "displayName": "Interest Groups",
        "type": "fixedCollection",
        "placeholder": "Add Interest Group"
      },
      {
        "name": "groupsValues",
        "displayName": "Group"
      },
      {
        "name": "categoryId",
        "displayName": "Category Name or ID",
        "type": "options"
      },
      {
        "name": "categoryFieldId",
        "displayName": "Category Field ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "groupJson",
        "displayName": "Interest Groups",
        "type": "json"
      },
      {
        "name": "fields",
        "displayName": "Fields",
        "type": "string",
        "default": ""
      },
      {
        "name": "excludeFields",
        "displayName": "Exclude Fields",
        "type": "string",
        "default": ""
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "beforeLastChanged",
        "displayName": "Before Last Changed",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "beforeTimestampOpt",
        "displayName": "Before Timestamp Opt",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "sinceLastChanged",
        "displayName": "Since Last Changed",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "skipMergeValidation",
        "displayName": "Skip Merge Validation",
        "type": "boolean"
      },
      {
        "name": "isSyncing",
        "displayName": "Is Syncing",
        "type": "boolean"
      },
      {
        "name": "groupCategory",
        "displayName": "Group Category Name or ID",
        "type": "options"
      },
      {
        "name": "beforeCreateTime",
        "displayName": "Before Create Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "beforeSendTime",
        "displayName": "Before Send Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "listId",
        "displayName": "List Name or ID",
        "type": "options"
      },
      {
        "name": "sinceCreateTime",
        "displayName": "Since Create Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "sinceSendTime",
        "displayName": "Since Send Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "sortDirection",
        "displayName": "Sort Direction",
        "type": "options"
      },
      {
        "name": "sortField",
        "displayName": "Sort Field",
        "type": "options"
      },
      {
        "name": "campaignId",
        "displayName": "Campaign ID",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "MailchimpTrigger": {
    "name": "MailchimpTrigger",
    "displayName": "MailchimpTrigger",
    "type": "n8n-nodes-base.MailchimpTrigger",
    "subtitle": null,
    "description": "Handle Mailchimp events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailchimpApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', path: 'webhook', }, { name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "mailchimpTrigger",
        "displayName": "Mailchimp Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "list",
        "displayName": "List Name or ID",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions",
        "required": true
      },
      {
        "name": "sources",
        "displayName": "Sources",
        "type": "multiOptions",
        "required": true
      }
    ],
    "version": 1.0
  },
  "MailerLite": {
    "name": "mailerLite",
    "displayName": "MailerLite",
    "type": "n8n-nodes-base.MailerLite",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume MailerLite API",
    "group": [
      "input"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mailerLite",
        "displayName": "MailerLite"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "MailerLiteTrigger": {
    "name": "mailerLiteTrigger",
    "displayName": "MailerLite Trigger",
    "type": "n8n-nodes-base.MailerLiteTrigger",
    "subtitle": null,
    "description": "Starts the workflow when MailerLite events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mailerLiteTrigger",
        "displayName": "MailerLite Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      }
    ]
  },
  "Mailgun": {
    "name": "Mailgun",
    "displayName": "Mailgun",
    "type": "n8n-nodes-base.Mailgun",
    "subtitle": null,
    "description": "Sends an email via Mailgun",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailgunApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "mailgun",
        "displayName": "Mailgun"
      },
      {
        "name": "fromEmail",
        "displayName": "From Email",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "Admin <admin@example.com>"
      },
      {
        "name": "toEmail",
        "displayName": "To Email",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "info@example.com"
      },
      {
        "name": "ccEmail",
        "displayName": "Cc Email",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "bccEmail",
        "displayName": "Bcc Email",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "subject",
        "displayName": "Subject",
        "type": "string",
        "default": "",
        "placeholder": "My subject line"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string"
      },
      {
        "name": "html",
        "displayName": "HTML",
        "type": "string"
      },
      {
        "name": "attachments",
        "displayName": "Attachments",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Mailjet": {
    "name": "Mailjet",
    "displayName": "Mailjet",
    "type": "n8n-nodes-base.Mailjet",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Mailjet API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailjetEmailApi', required: true, displayOptions: { show: { resource: ['email'",
    "webhooks": [],
    "properties": [
      {
        "name": "mailjet",
        "displayName": "Mailjet"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MailjetTrigger": {
    "name": "MailjetTrigger",
    "displayName": "MailjetTrigger",
    "type": "n8n-nodes-base.MailjetTrigger",
    "subtitle": null,
    "description": "Handle Mailjet events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailjetEmailApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "mailjetTrigger",
        "displayName": "Mailjet Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "open",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Mandrill": {
    "name": "Mandrill",
    "displayName": "Mandrill",
    "type": "n8n-nodes-base.Mandrill",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Mandrill API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mandrillApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "mandrill",
        "displayName": "Mandrill"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "template",
        "displayName": "Template Name or ID",
        "type": "options"
      },
      {
        "name": "fromEmail",
        "displayName": "From Email",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "Admin <example@yourdomain.com>"
      },
      {
        "name": "toEmail",
        "displayName": "To Email",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "info@example.com"
      },
      {
        "name": "jsonParameters",
        "displayName": "JSON Parameters",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "async",
        "displayName": "Async",
        "type": "boolean"
      },
      {
        "name": "autoText",
        "displayName": "Auto Text",
        "type": "boolean"
      },
      {
        "name": "autoHtml",
        "displayName": "Auto HTML",
        "type": "boolean"
      },
      {
        "name": "bccAddress",
        "displayName": "BCC Address",
        "type": "string",
        "default": "",
        "placeholder": "message.bcc_address@example.com"
      },
      {
        "name": "fromName",
        "displayName": "From Name",
        "type": "string",
        "default": "",
        "placeholder": "John Doe"
      },
      {
        "name": "googleAnalyticsCampaign",
        "displayName": "Google Analytics Campaign",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "googleAnalyticsDomains",
        "displayName": "Google Analytics Domains",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "html",
        "displayName": "HTML",
        "type": "string",
        "default": ""
      },
      {
        "name": "important",
        "displayName": "Important",
        "type": "boolean"
      },
      {
        "name": "inlineCss",
        "displayName": "Inline CSS",
        "type": "boolean"
      },
      {
        "name": "ipPool",
        "displayName": "Ip Pool",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "preserveRecipients",
        "displayName": "Preserve Recipients",
        "type": "boolean"
      },
      {
        "name": "returnPathDomain",
        "displayName": "Return Path Domain",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "sendAt",
        "displayName": "Sent At",
        "type": "dateTime",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "signingDomain",
        "displayName": "Signing Domain",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "subAccount",
        "displayName": "Subaccount",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "subject",
        "displayName": "Subject",
        "type": "string",
        "default": "",
        "placeholder": "My subject line"
      },
      {
        "name": "tags",
        "displayName": "Tags",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "default": ""
      },
      {
        "name": "trackClicks",
        "displayName": "Track Clicks",
        "type": "boolean"
      },
      {
        "name": "trackOpens",
        "displayName": "Track Opens",
        "type": "boolean"
      },
      {
        "name": "trackingDomain",
        "displayName": "Tracking Domain",
        "type": "string",
        "default": "",
        "placeholder": ""
      },
      {
        "name": "urlStripQs",
        "displayName": "Url Strip Qs",
        "type": "boolean"
      },
      {
        "name": "viewContentLink",
        "displayName": "View Content Link",
        "type": "boolean"
      },
      {
        "name": "mergeVarsJson",
        "displayName": "Merge Vars",
        "type": "json"
      },
      {
        "name": "mergeVarsUi",
        "displayName": "Merge Vars",
        "type": "fixedCollection",
        "placeholder": "Add Merge Vars"
      },
      {
        "name": "mergeVarsValues",
        "displayName": "Vars",
        "type": "string",
        "default": ""
      },
      {
        "name": "content",
        "displayName": "Content",
        "type": "string",
        "default": ""
      },
      {
        "name": "metadataUi",
        "displayName": "Metadata",
        "type": "fixedCollection",
        "placeholder": "Add Metadata"
      },
      {
        "name": "metadataValues",
        "displayName": "Metadata",
        "type": "string",
        "default": "Name of the metadata key to add."
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "metadataJson",
        "displayName": "Metadata",
        "type": "json"
      },
      {
        "name": "attachmentsJson",
        "displayName": "Attachments",
        "type": "json"
      },
      {
        "name": "attachmentsUi",
        "displayName": "Attachments",
        "type": "fixedCollection",
        "placeholder": "Add Attachments"
      },
      {
        "name": "attachmentsValues",
        "displayName": "Attachments Values",
        "type": "string",
        "default": "",
        "placeholder": "text/plain"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "placeholder": "myfile.txt"
      },
      {
        "name": "attachmentsBinary",
        "displayName": "Attachments Binary",
        "type": "string",
        "default": ""
      },
      {
        "name": "headersJson",
        "displayName": "Headers",
        "type": "json",
        "default": ""
      },
      {
        "name": "headersUi",
        "displayName": "Headers",
        "type": "fixedCollection",
        "placeholder": "Add Headers"
      },
      {
        "name": "headersValues",
        "displayName": "Values",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "ManualTrigger": {
    "name": "ManualTrigger",
    "displayName": "ManualTrigger",
    "type": "n8n-nodes-base.ManualTrigger",
    "subtitle": null,
    "description": "Runs the flow on clicking a button in n8n",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "manualTrigger",
        "displayName": "Manual Trigger"
      },
      {
        "name": "notice",
        "displayName": "This node is where the workflow execution starts (when you click the ‘test’ button on the canvas).<br><br> <a data-action=\"showNodeCreator\">Explore other ways to trigger your workflow</a> (e.g on a schedule, or a webhook)",
        "type": "notice",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Markdown": {
    "name": "Markdown",
    "displayName": "Markdown",
    "type": "n8n-nodes-base.Markdown",
    "subtitle": "={{$parameter[\"mode\"]===\"markdownToHtml\" ? \"Markdown to HTML\" : \"HTML to Markdown\"}}",
    "description": "Convert data between Markdown and HTML",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "markdown",
        "displayName": "Markdown"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "html",
        "displayName": "HTML",
        "type": "string"
      },
      {
        "name": "destinationKey",
        "displayName": "Destination Key",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "bulletMarker",
        "displayName": "Bullet Marker",
        "type": "string",
        "default": "*"
      },
      {
        "name": "codeFence",
        "displayName": "Code Block Fence",
        "type": "string",
        "default": "```"
      },
      {
        "name": "emDelimiter",
        "displayName": "Emphasis Delimiter",
        "type": "string",
        "default": "_"
      },
      {
        "name": "globalEscape",
        "displayName": "Global Escape Pattern",
        "type": "fixedCollection"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "replacement",
        "displayName": "Replacement",
        "type": "string",
        "default": ""
      },
      {
        "name": "ignore",
        "displayName": "Ignored Elements",
        "type": "string",
        "default": "",
        "placeholder": "e.g. h1, p ..."
      },
      {
        "name": "keepDataImages",
        "displayName": "Keep Images With Data",
        "type": "boolean"
      },
      {
        "name": "lineStartEscape",
        "displayName": "Line Start Escape Pattern",
        "type": "fixedCollection"
      },
      {
        "name": "maxConsecutiveNewlines",
        "displayName": "Max Consecutive New Lines",
        "type": "number",
        "default": "3"
      },
      {
        "name": "useLinkReferenceDefinitions",
        "displayName": "Place URLs At The Bottom",
        "type": "boolean"
      },
      {
        "name": "strongDelimiter",
        "displayName": "Strong Delimiter",
        "type": "string",
        "default": "**"
      },
      {
        "name": "codeBlockStyle",
        "displayName": "Style For Code Block",
        "type": "options",
        "default": "fence"
      },
      {
        "name": "textReplace",
        "displayName": "Text Replacement Pattern",
        "type": "fixedCollection"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": ""
      },
      {
        "name": "blockElements",
        "displayName": "Treat As Blocks",
        "type": "string",
        "default": "",
        "placeholder": "e.g. p, div, ..."
      },
      {
        "name": "openLinksInNewWindow",
        "displayName": "Add Blank To Links",
        "type": "boolean"
      },
      {
        "name": "simplifiedAutoLink",
        "displayName": "Automatic Linking to URLs",
        "type": "boolean"
      },
      {
        "name": "backslashEscapesHTMLTags",
        "displayName": "Backslash Escapes HTML Tags",
        "type": "boolean"
      },
      {
        "name": "completeHTMLDocument",
        "displayName": "Complete HTML Document",
        "type": "boolean"
      },
      {
        "name": "customizedHeaderId",
        "displayName": "Customized Header ID",
        "type": "boolean"
      },
      {
        "name": "emoji",
        "displayName": "Emoji Support",
        "type": "boolean"
      },
      {
        "name": "encodeEmails",
        "displayName": "Encode Emails",
        "type": "boolean"
      },
      {
        "name": "excludeTrailingPunctuationFromURLs",
        "displayName": "Exclude Trailing Punctuation From URLs",
        "type": "boolean"
      },
      {
        "name": "ghCodeBlocks",
        "displayName": "GitHub Code Blocks",
        "type": "boolean"
      },
      {
        "name": "ghCompatibleHeaderId",
        "displayName": "GitHub Compatible Header IDs",
        "type": "boolean"
      },
      {
        "name": "ghMentionsLink",
        "displayName": "GitHub Mention Link",
        "type": "string"
      },
      {
        "name": "ghMentions",
        "displayName": "GitHub Mentions",
        "type": "boolean"
      },
      {
        "name": "tasklists",
        "displayName": "GitHub Task Lists",
        "type": "boolean"
      },
      {
        "name": "headerLevelStart",
        "displayName": "Header Level Start",
        "type": "number",
        "default": "1"
      },
      {
        "name": "requireSpaceBeforeHeadingText",
        "displayName": "Mandatory Space Before Header",
        "type": "boolean"
      },
      {
        "name": "literalMidWordAsterisks",
        "displayName": "Middle Word Asterisks",
        "type": "boolean"
      },
      {
        "name": "literalMidWordUnderscores",
        "displayName": "Middle Word Underscores",
        "type": "boolean"
      },
      {
        "name": "noHeaderId",
        "displayName": "No Header ID",
        "type": "boolean"
      },
      {
        "name": "parseImgDimensions",
        "displayName": "Parse Image Dimensions",
        "type": "boolean"
      },
      {
        "name": "prefixHeaderId",
        "displayName": "Prefix Header ID",
        "type": "string",
        "default": "section"
      },
      {
        "name": "rawHeaderId",
        "displayName": "Raw Header ID",
        "type": "boolean"
      },
      {
        "name": "rawPrefixHeaderId",
        "displayName": "Raw Prefix Header ID",
        "type": "boolean"
      },
      {
        "name": "simpleLineBreaks",
        "displayName": "Simple Line Breaks",
        "type": "boolean"
      },
      {
        "name": "smartIndentationFix",
        "displayName": "Smart Indentation Fix",
        "type": "boolean"
      },
      {
        "name": "disableForced4SpacesIndentedSublists",
        "displayName": "Spaces Indented Sublists",
        "type": "boolean"
      },
      {
        "name": "splitAdjacentBlockquotes",
        "displayName": "Split Adjacent Blockquotes",
        "type": "boolean"
      },
      {
        "name": "strikethrough",
        "displayName": "Strikethrough",
        "type": "boolean"
      },
      {
        "name": "tablesHeaderId",
        "displayName": "Tables Header ID",
        "type": "boolean"
      },
      {
        "name": "tables",
        "displayName": "Tables Support",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Marketstack": {
    "name": "Marketstack",
    "displayName": "Marketstack",
    "type": "n8n-nodes-base.Marketstack",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Marketstack API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'marketstackApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "marketstack",
        "displayName": "Marketstack"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Matrix": {
    "name": "Matrix",
    "displayName": "Matrix",
    "type": "n8n-nodes-base.Matrix",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Matrix API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'matrixApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "matrix",
        "displayName": "Matrix"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Mattermost": {
    "name": "mattermost",
    "displayName": "Mattermost",
    "type": "n8n-nodes-base.Mattermost",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to Mattermost",
    "group": [
      "output"
    ],
    "defaultVersion": 1.0,
    "availableVersions": [
      1.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mattermost",
        "displayName": "Mattermost"
      }
    ]
  },
  "Mautic": {
    "name": "Mautic",
    "displayName": "Mautic",
    "type": "n8n-nodes-base.Mautic",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Mautic API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mauticApi', required: true, displayOptions: { show: { authentication: ['credentials'",
    "webhooks": [],
    "properties": [
      {
        "name": "mautic",
        "displayName": "Mautic"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MauticTrigger": {
    "name": "MauticTrigger",
    "displayName": "MauticTrigger",
    "type": "n8n-nodes-base.MauticTrigger",
    "subtitle": null,
    "description": "Handle Mautic events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mauticApi', required: true, displayOptions: { show: { authentication: ['credentials'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "mauticTrigger",
        "displayName": "Mautic Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "events",
        "displayName": "Event Names or IDs",
        "type": "multiOptions",
        "required": true
      },
      {
        "name": "eventsOrder",
        "displayName": "Events Order",
        "type": "options",
        "default": "ASC"
      }
    ],
    "version": 1.0
  },
  "Medium": {
    "name": "Medium",
    "displayName": "Medium",
    "type": "n8n-nodes-base.Medium",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Medium API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mediumApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "medium",
        "displayName": "Medium"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "publication",
        "displayName": "Publication",
        "type": "boolean"
      },
      {
        "name": "publicationId",
        "displayName": "Publication Name or ID",
        "type": "options"
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "My Open Source Contribution"
      },
      {
        "name": "contentFormat",
        "displayName": "Content Format",
        "default": "",
        "required": true
      },
      {
        "name": "content",
        "displayName": "Content",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "My open source contribution"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "canonicalUrl",
        "displayName": "Canonical Url",
        "type": "string",
        "default": ""
      },
      {
        "name": "license",
        "displayName": "License",
        "type": "options",
        "default": "all-rights-reserved"
      },
      {
        "name": "notifyFollowers",
        "displayName": "Notify Followers",
        "type": "boolean"
      },
      {
        "name": "publishStatus",
        "displayName": "Publish Status",
        "type": "options",
        "default": "public"
      },
      {
        "name": "tags",
        "displayName": "Tags",
        "type": "string",
        "default": "",
        "placeholder": "open-source,mlh,fellowship"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      }
    ],
    "version": 1.0
  },
  "Merge": {
    "name": "merge",
    "displayName": "Merge",
    "type": "n8n-nodes-base.Merge",
    "subtitle": "={{$parameter[\"mode\"]}}",
    "description": "Merges data of multiple streams once data from both is available",
    "group": [
      "transform"
    ],
    "defaultVersion": 3.2,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      3.0,
      3.1,
      3.2
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "merge",
        "displayName": "Merge"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "join",
        "displayName": "Join",
        "type": "options"
      },
      {
        "name": "propertyName1",
        "displayName": "Property Input 1",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "propertyName2",
        "displayName": "Property Input 2",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "output",
        "displayName": "Output Data",
        "type": "options"
      },
      {
        "name": "overwrite",
        "displayName": "Overwrite",
        "type": "options"
      },
      {
        "name": "combinationMode",
        "displayName": "Combination Mode",
        "type": "options"
      },
      {
        "name": "mergeByFields",
        "displayName": "Fields to Match",
        "type": "fixedCollection",
        "placeholder": "Add Fields to Match"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "field2",
        "displayName": "Input 2 Field",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "joinMode",
        "displayName": "Output Type",
        "type": "options"
      },
      {
        "name": "outputDataFrom",
        "displayName": "Output Data From",
        "type": "options"
      },
      {
        "name": "chooseBranchMode",
        "displayName": "Output Type",
        "type": "options"
      }
    ]
  },
  "MessageBird": {
    "name": "MessageBird",
    "displayName": "MessageBird",
    "type": "n8n-nodes-base.MessageBird",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends SMS via MessageBird",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'messageBirdApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "messageBird",
        "displayName": "MessageBird"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "originator",
        "displayName": "From",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "14155238886"
      },
      {
        "name": "recipients",
        "displayName": "To",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "14155238886/+14155238886"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection"
      },
      {
        "name": "createdDatetime",
        "displayName": "Created Date-Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "datacoding",
        "displayName": "Datacoding",
        "type": "options"
      },
      {
        "name": "gateway",
        "displayName": "Gateway",
        "type": "number",
        "default": ""
      },
      {
        "name": "groupIds",
        "displayName": "Group IDs",
        "type": "string",
        "default": "",
        "placeholder": "1,2"
      },
      {
        "name": "mclass",
        "displayName": "Message Type",
        "type": "options",
        "placeholder": "Permissible values from 0-3"
      },
      {
        "name": "reference",
        "displayName": "Reference",
        "type": "string",
        "default": ""
      },
      {
        "name": "reportUrl",
        "displayName": "Report Url",
        "type": "string",
        "default": ""
      },
      {
        "name": "scheduledDatetime",
        "displayName": "Scheduled Date-Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "typeDetails",
        "displayName": "Type Details",
        "type": "string",
        "default": ""
      },
      {
        "name": "validity",
        "displayName": "Validity",
        "type": "number",
        "default": "1",
        "typeOptions": {
          "minValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "Metabase": {
    "name": "Metabase",
    "displayName": "Metabase",
    "type": "n8n-nodes-base.Metabase",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Use the Metabase API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'metabaseApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "metabase",
        "displayName": "Metabase"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Mindee": {
    "name": "Mindee",
    "displayName": "Mindee",
    "type": "n8n-nodes-base.Mindee",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Mindee API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mindeeReceiptApi', required: true, displayOptions: { show: { resource: ['receipt'",
    "webhooks": [],
    "properties": [
      {
        "name": "mindee",
        "displayName": "Mindee"
      },
      {
        "name": "apiVersion",
        "displayName": "API Version",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "rawData",
        "displayName": "RAW Data",
        "type": "boolean"
      }
    ]
  },
  "Misp": {
    "name": "Misp",
    "displayName": "Misp",
    "type": "n8n-nodes-base.Misp",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the MISP API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mispApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "misp",
        "displayName": "MISP"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MistralAi": {
    "name": "MistralAi",
    "displayName": "MistralAi",
    "type": "n8n-nodes-base.MistralAi",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "Consume Mistral AI API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mistralCloudApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "mistralAi",
        "displayName": "Mistral AI"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Mocean": {
    "name": "Mocean",
    "displayName": "Mocean",
    "type": "n8n-nodes-base.Mocean",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Send SMS and voice messages via Mocean",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'moceanApi', required: true, testedBy: 'moceanApiTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "mocean",
        "displayName": "Mocean"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "from",
        "displayName": "From",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "Sender Number"
      },
      {
        "name": "to",
        "displayName": "To",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "Receipient number"
      },
      {
        "name": "language",
        "displayName": "Language",
        "type": "options"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "dlrUrl",
        "displayName": "Delivery Report URL",
        "type": "string",
        "default": "",
        "placeholder": ""
      }
    ],
    "version": 1.0
  },
  "MondayCom": {
    "name": "MondayCom",
    "displayName": "MondayCom",
    "type": "n8n-nodes-base.MondayCom",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Monday.com API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mondayComApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "mondayCom",
        "displayName": "Monday.com"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MongoDb": {
    "name": "MongoDb",
    "displayName": "MongoDb",
    "type": "n8n-nodes-base.MongoDb",
    "subtitle": null,
    "description": "Find, insert and update documents in MongoDB",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mongoDb', required: true, testedBy: 'mongoDbCredentialTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "mongoDb",
        "displayName": "MongoDB"
      }
    ]
  },
  "MonicaCrm": {
    "name": "MonicaCrm",
    "displayName": "MonicaCrm",
    "type": "n8n-nodes-base.MonicaCrm",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Monica CRM API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'monicaCrmApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "monicaCrm",
        "displayName": "Monica CRM"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MoveBinaryData": {
    "name": "MoveBinaryData",
    "displayName": "MoveBinaryData",
    "type": "n8n-nodes-base.MoveBinaryData",
    "subtitle": "={{$parameter[\"mode\"]===\"binaryToJson\" ? \"Binary to JSON\" : \"JSON to Binary\"}}",
    "description": "Move data between binary and JSON properties",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "moveBinaryData",
        "displayName": "Convert to/from binary data"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "setAllData",
        "displayName": "Set All Data",
        "type": "boolean"
      },
      {
        "name": "sourceKey",
        "displayName": "Source Key",
        "type": "string"
      },
      {
        "name": "destinationKey",
        "displayName": "Destination Key",
        "type": "string"
      },
      {
        "name": "convertAllData",
        "displayName": "Convert All Data",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "addBOM",
        "displayName": "Add Byte Order Mark (BOM)"
      },
      {
        "name": "dataIsBase64",
        "displayName": "Data Is Base64",
        "type": "boolean"
      },
      {
        "name": "encoding",
        "displayName": "Encoding",
        "type": "options"
      },
      {
        "name": "stripBOM",
        "displayName": "Strip BOM"
      },
      {
        "name": "fileName",
        "displayName": "File Name",
        "type": "string"
      },
      {
        "name": "jsonParse",
        "displayName": "JSON Parse",
        "type": "boolean"
      },
      {
        "name": "keepSource",
        "displayName": "Keep Source",
        "type": "boolean"
      },
      {
        "name": "keepAsBase64",
        "displayName": "Keep As Base64",
        "type": "boolean"
      },
      {
        "name": "mimeType",
        "displayName": "MIME Type",
        "type": "string"
      },
      {
        "name": "useRawData",
        "displayName": "Use Raw Data",
        "type": "boolean"
      }
    ]
  },
  "Mqtt": {
    "name": "Mqtt",
    "displayName": "Mqtt",
    "type": "n8n-nodes-base.Mqtt",
    "subtitle": null,
    "description": "Push messages to MQTT",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mqtt', required: true, testedBy: 'mqttConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "mqtt",
        "displayName": "MQTT"
      },
      {
        "name": "topic",
        "displayName": "Topic",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "sendInputData",
        "displayName": "Send Input Data",
        "type": "boolean"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "qos",
        "displayName": "QoS",
        "type": "options"
      },
      {
        "name": "retain",
        "displayName": "Retain",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "MqttTrigger": {
    "name": "MqttTrigger",
    "displayName": "MqttTrigger",
    "type": "n8n-nodes-base.MqttTrigger",
    "subtitle": null,
    "description": "Listens to MQTT events",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mqtt', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "mqttTrigger",
        "displayName": "MQTT Trigger"
      },
      {
        "name": "topics",
        "displayName": "Topics",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "jsonParseBody",
        "displayName": "JSON Parse Body",
        "type": "boolean"
      },
      {
        "name": "onlyMessage",
        "displayName": "Only Message",
        "type": "boolean"
      },
      {
        "name": "parallelProcessing",
        "displayName": "Parallel Processing",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Msg91": {
    "name": "Msg91",
    "displayName": "Msg91",
    "type": "n8n-nodes-base.Msg91",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends transactional SMS via MSG91",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'msg91Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "msg91",
        "displayName": "MSG91"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "from",
        "displayName": "Sender ID",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "4155238886"
      },
      {
        "name": "to",
        "displayName": "To",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "+14155238886"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "default": "",
        "required": true
      }
    ],
    "version": 1.0
  },
  "MySql": {
    "name": "mySql",
    "displayName": "MySQL",
    "type": "n8n-nodes-base.MySql",
    "subtitle": null,
    "description": "Get, add and update data in MySQL",
    "group": [
      "input"
    ],
    "defaultVersion": 2.5,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      2.2,
      2.3,
      2.4,
      2.5
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mySql",
        "displayName": "MySQL"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a Table..."
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "placeholder": "table_name"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "ignore",
        "displayName": "Ignore",
        "type": "boolean"
      },
      {
        "name": "priority",
        "displayName": "Priority",
        "type": "options"
      },
      {
        "name": "updateKey",
        "displayName": "Update Key",
        "type": "string"
      }
    ]
  },
  "N8n": {
    "name": "N8n",
    "displayName": "N8n",
    "type": "n8n-nodes-base.N8n",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Handle events and perform actions on your n8n instance",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'n8nApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "n8n",
        "displayName": "n8n"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "N8nTrainingCustomerDatastore": {
    "name": "N8nTrainingCustomerDatastore",
    "displayName": "N8nTrainingCustomerDatastore",
    "type": "n8n-nodes-base.N8nTrainingCustomerDatastore",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Dummy node used for n8n training",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "n8nTrainingCustomerDatastore",
        "displayName": "Customer Datastore (n8n training)"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      }
    ],
    "version": 1.0
  },
  "N8nTrainingCustomerMessenger": {
    "name": "N8nTrainingCustomerMessenger",
    "displayName": "N8nTrainingCustomerMessenger",
    "type": "n8n-nodes-base.N8nTrainingCustomerMessenger",
    "subtitle": null,
    "description": "Dummy node used for n8n training",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "n8nTrainingCustomerMessenger",
        "displayName": "Customer Messenger (n8n training)"
      },
      {
        "name": "customerId",
        "displayName": "Customer ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "required": true
      }
    ],
    "version": 1.0
  },
  "N8nTrigger": {
    "name": "N8nTrigger",
    "displayName": "N8nTrigger",
    "type": "n8n-nodes-base.N8nTrigger",
    "subtitle": null,
    "description": "Handle events and perform actions on your n8n instance",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "n8nTrigger",
        "displayName": "n8n Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Nasa": {
    "name": "Nasa",
    "displayName": "Nasa",
    "type": "n8n-nodes-base.Nasa",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Retrieve data from the NASA API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'nasaApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "nasa",
        "displayName": "NASA"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "asteroidId",
        "displayName": "Asteroid ID",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "3542519"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "includeCloseApproachData",
        "displayName": "Include Close Approach Data",
        "type": "boolean"
      },
      {
        "name": "download",
        "displayName": "Download Image",
        "type": "boolean"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Put Output File in Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "date",
        "displayName": "Date",
        "type": "dateTime",
        "default": "",
        "placeholder": "YYYY-MM-DD"
      },
      {
        "name": "startDate",
        "displayName": "Start Date",
        "type": "dateTime",
        "default": "",
        "placeholder": "YYYY-MM-DD"
      },
      {
        "name": "endDate",
        "displayName": "End Date",
        "type": "dateTime",
        "default": "",
        "placeholder": "YYYY-MM-DD"
      },
      {
        "name": "location",
        "displayName": "Location",
        "type": "options",
        "default": "ALL"
      },
      {
        "name": "catalog",
        "displayName": "Catalog",
        "type": "options",
        "default": "ALL"
      },
      {
        "name": "lat",
        "displayName": "Latitude",
        "type": "number",
        "default": "",
        "placeholder": "47.751076"
      },
      {
        "name": "lon",
        "displayName": "Longitude",
        "type": "number",
        "default": "",
        "placeholder": "-120.740135"
      },
      {
        "name": "dim",
        "displayName": "Degrees",
        "type": "number",
        "default": "",
        "placeholder": "0.025"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "Netlify": {
    "name": "Netlify",
    "displayName": "Netlify",
    "type": "n8n-nodes-base.Netlify",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Netlify API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'netlifyApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "netlify",
        "displayName": "Netlify"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "NetlifyTrigger": {
    "name": "NetlifyTrigger",
    "displayName": "NetlifyTrigger",
    "type": "n8n-nodes-base.NetlifyTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle netlify events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'netlifyApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "netlifyTrigger",
        "displayName": "Netlify Trigger"
      },
      {
        "name": "siteId",
        "displayName": "Site Name or ID",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "formId",
        "displayName": "Form Name or ID",
        "type": "options",
        "required": true
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "NextCloud": {
    "name": "NextCloud",
    "displayName": "NextCloud",
    "type": "n8n-nodes-base.NextCloud",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Access data on Nextcloud",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'nextCloudApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "nextCloud",
        "displayName": "Nextcloud"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "path",
        "displayName": "From Path",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "toPath",
        "displayName": "To Path",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Put Output File in Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "binaryDataUpload",
        "displayName": "Binary File",
        "type": "boolean",
        "required": true
      },
      {
        "name": "fileContent",
        "displayName": "File Content",
        "type": "string",
        "default": ""
      },
      {
        "name": "shareType",
        "displayName": "Share Type",
        "type": "options"
      },
      {
        "name": "circleId",
        "displayName": "Circle ID",
        "type": "string"
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "placeholder": "name@email.com"
      },
      {
        "name": "groupId",
        "displayName": "Group ID",
        "type": "string"
      },
      {
        "name": "user",
        "displayName": "User",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "password",
        "displayName": "Password",
        "type": "string"
      },
      {
        "name": "permissions",
        "displayName": "Permissions",
        "type": "options"
      },
      {
        "name": "userId",
        "displayName": "Username",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "displayName",
        "displayName": "Display Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "search",
        "displayName": "Search",
        "type": "string",
        "default": ""
      },
      {
        "name": "offset",
        "displayName": "Offset",
        "type": "number",
        "default": ""
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "fixedCollection"
      },
      {
        "name": "field",
        "displayName": "Fields",
        "type": "options",
        "default": "email"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "NocoDB": {
    "name": "NocoDB",
    "displayName": "NocoDB",
    "type": "n8n-nodes-base.NocoDB",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Read, update, write and delete data from NocoDB",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'nocoDb', required: true, displayOptions: { show: { authentication: ['nocoDb'",
    "webhooks": [],
    "properties": [
      {
        "name": "nocoDb",
        "displayName": "NocoDB"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "version",
        "displayName": "API Version",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      }
    ]
  },
  "NoOp": {
    "name": "NoOp",
    "displayName": "NoOp",
    "type": "n8n-nodes-base.NoOp",
    "subtitle": null,
    "description": "No Operation",
    "group": [
      "organization"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "noOp",
        "displayName": "No Operation, do nothing"
      }
    ],
    "version": 1.0
  },
  "Notion": {
    "name": "notion",
    "displayName": "Notion",
    "type": "n8n-nodes-base.Notion",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Notion API",
    "group": [
      "output"
    ],
    "defaultVersion": 2.2,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      2.2
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "notion",
        "displayName": "Notion"
      }
    ]
  },
  "NotionTrigger": {
    "name": "NotionTrigger",
    "displayName": "NotionTrigger",
    "type": "n8n-nodes-base.NotionTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Starts the workflow when Notion events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'notionApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "notionTrigger",
        "displayName": "Notion Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      },
      {
        "name": "notionNotice",
        "displayName": "In Notion, make sure to <a href=\"https://www.notion.so/help/add-and-manage-connections-with-the-api\" target=\"_blank\">add your connection</a> to the pages you want to access.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "databaseId",
        "displayName": "Database",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "Database",
        "type": "list",
        "placeholder": "Select a Database..."
      },
      {
        "name": "url",
        "displayName": "Link",
        "type": "string",
        "placeholder": "https://www.notion.so/0fe2f7de558b471eab07e9d871cdf4a9?v=f2d424ba0c404733a3f500c78c881610"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string",
        "placeholder": "ab1545b247fb49fa92d6f4b49f4d8116"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Npm": {
    "name": "Npm",
    "displayName": "Npm",
    "type": "n8n-nodes-base.Npm",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "Consume NPM registry API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'npmApi', required: false, },",
    "webhooks": [],
    "properties": [
      {
        "name": "npm",
        "displayName": "Npm"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Odoo": {
    "name": "Odoo",
    "displayName": "Odoo",
    "type": "n8n-nodes-base.Odoo",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Odoo API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'odooApi', required: true, testedBy: 'odooApiTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "odoo",
        "displayName": "Odoo"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "contact"
      }
    ],
    "version": 1.0
  },
  "Okta": {
    "name": "Okta",
    "displayName": "Okta",
    "type": "n8n-nodes-base.Okta",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Use the Okta API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'oktaApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "okta",
        "displayName": "Okta"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "OneSimpleApi": {
    "name": "OneSimpleApi",
    "displayName": "OneSimpleApi",
    "type": "n8n-nodes-base.OneSimpleApi",
    "subtitle": null,
    "description": "A toolbox of no-code utilities",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'oneSimpleApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "oneSimpleApi",
        "displayName": "One Simple API"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "link",
        "displayName": "Webpage URL",
        "type": "string",
        "required": true
      },
      {
        "name": "download",
        "displayName": "Download PDF?",
        "type": "boolean",
        "required": true
      },
      {
        "name": "output",
        "displayName": "Put Output In Field",
        "type": "string",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "page",
        "displayName": "Page Size",
        "type": "options"
      },
      {
        "name": "force",
        "displayName": "Force Refresh",
        "type": "boolean"
      },
      {
        "name": "message",
        "displayName": "QR Content",
        "type": "string",
        "required": true
      },
      {
        "name": "size",
        "displayName": "Size",
        "type": "options"
      },
      {
        "name": "format",
        "displayName": "Format",
        "type": "options"
      },
      {
        "name": "screen",
        "displayName": "Screen Size",
        "type": "options"
      },
      {
        "name": "fullpage",
        "displayName": "Full Page",
        "type": "boolean"
      },
      {
        "name": "profileName",
        "displayName": "Profile Name",
        "type": "string",
        "required": true
      },
      {
        "name": "artistName",
        "displayName": "Artist Name",
        "type": "string",
        "required": true
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "required": true
      },
      {
        "name": "fromCurrency",
        "displayName": "From Currency",
        "type": "string",
        "required": true,
        "placeholder": "USD"
      },
      {
        "name": "toCurrency",
        "displayName": "To Currency",
        "type": "string",
        "required": true,
        "placeholder": "EUR"
      },
      {
        "name": "headers",
        "displayName": "Include Headers?",
        "type": "boolean"
      },
      {
        "name": "emailAddress",
        "displayName": "Email Address",
        "type": "string",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Onfleet": {
    "name": "Onfleet",
    "displayName": "Onfleet",
    "type": "n8n-nodes-base.Onfleet",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Onfleet API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'onfleetApi', required: true, testedBy: 'onfleetApiTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "onfleet",
        "displayName": "Onfleet"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "OnfleetTrigger": {
    "name": "OnfleetTrigger",
    "displayName": "OnfleetTrigger",
    "type": "n8n-nodes-base.OnfleetTrigger",
    "subtitle": "={{$parameter[\"triggerOn\"]}}",
    "description": "Starts the workflow when Onfleet events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'onfleetApi', required: true, testedBy: 'onfleetApiTest', },",
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', path: 'webhook', }, { name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "onfleetTrigger",
        "displayName": "Onfleet Trigger"
      }
    ],
    "version": 1.0
  },
  "OpenThesaurus": {
    "name": "OpenThesaurus",
    "displayName": "OpenThesaurus",
    "type": "n8n-nodes-base.OpenThesaurus",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Get synonmns for German words using the OpenThesaurus API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "openThesaurus",
        "displayName": "OpenThesaurus"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "baseform",
        "displayName": "Baseform",
        "type": "boolean"
      },
      {
        "name": "similar",
        "displayName": "Similar",
        "type": "boolean"
      },
      {
        "name": "startswith",
        "displayName": "Starts With",
        "type": "boolean"
      },
      {
        "name": "substring",
        "displayName": "Substring",
        "type": "boolean"
      },
      {
        "name": "substringFromResults",
        "displayName": "Substring From Results",
        "type": "number",
        "default": "0"
      },
      {
        "name": "substringMaxResults",
        "displayName": "Substring Max Results",
        "type": "number",
        "typeOptions": {
          "maxValue": 250
        }
      },
      {
        "name": "subsynsets",
        "displayName": "Subsynsets",
        "type": "boolean"
      },
      {
        "name": "supersynsets",
        "displayName": "Supersynsets",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "OpenWeatherMap": {
    "name": "OpenWeatherMap",
    "displayName": "OpenWeatherMap",
    "type": "n8n-nodes-base.OpenWeatherMap",
    "subtitle": null,
    "description": "Gets current and future weather information",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'openWeatherMapApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "openWeatherMap",
        "displayName": "OpenWeatherMap"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "format",
        "displayName": "Format",
        "type": "options"
      },
      {
        "name": "locationSelection",
        "displayName": "Location Selection",
        "type": "options"
      },
      {
        "name": "cityName",
        "displayName": "City",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "berlin,de"
      },
      {
        "name": "cityId",
        "displayName": "City ID",
        "type": "number",
        "default": "160001123",
        "required": true
      },
      {
        "name": "latitude",
        "displayName": "Latitude",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "13.39"
      },
      {
        "name": "longitude",
        "displayName": "Longitude",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "52.52"
      },
      {
        "name": "zipCode",
        "displayName": "Zip Code",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "10115,de"
      },
      {
        "name": "language",
        "displayName": "Language",
        "type": "string",
        "default": "",
        "placeholder": "en"
      }
    ],
    "version": 1.0
  },
  "Orbit": {
    "name": "Orbit",
    "displayName": "Orbit",
    "type": "n8n-nodes-base.Orbit",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Orbit API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'orbitApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "orbit",
        "displayName": "Orbit"
      },
      {
        "name": "deprecated",
        "displayName": "Orbit has been shutdown and will no longer function from July 11th, You can read more <a target=\"_blank\" href=\"https://orbit.love/blog/orbit-is-joining-postman\">here</a>.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Oura": {
    "name": "Oura",
    "displayName": "Oura",
    "type": "n8n-nodes-base.Oura",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Oura API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'ouraApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "oura",
        "displayName": "Oura"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Paddle": {
    "name": "Paddle",
    "displayName": "Paddle",
    "type": "n8n-nodes-base.Paddle",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Paddle API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'paddleApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "paddle",
        "displayName": "Paddle"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "PagerDuty": {
    "name": "PagerDuty",
    "displayName": "PagerDuty",
    "type": "n8n-nodes-base.PagerDuty",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume PagerDuty API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'pagerDutyApi', required: true, displayOptions: { show: { authentication: ['apiToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "pagerDuty",
        "displayName": "PagerDuty"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "PayPal": {
    "name": "PayPal",
    "displayName": "PayPal",
    "type": "n8n-nodes-base.PayPal",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume PayPal API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'payPalApi', required: true, testedBy: 'payPalApiTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "payPal",
        "displayName": "PayPal"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "PayPalTrigger": {
    "name": "PayPalTrigger",
    "displayName": "PayPalTrigger",
    "type": "n8n-nodes-base.PayPalTrigger",
    "subtitle": null,
    "description": "Handle PayPal events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'payPalApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "payPalTrigger",
        "displayName": "PayPal Trigger"
      },
      {
        "name": "events",
        "displayName": "Event Names or IDs",
        "type": "multiOptions",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Peekalink": {
    "name": "Peekalink",
    "displayName": "Peekalink",
    "type": "n8n-nodes-base.Peekalink",
    "subtitle": "={{$parameter[\"operation\"]",
    "description": "Consume the Peekalink API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'peekalinkApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "peekalink",
        "displayName": "Peekalink"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": "",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Perplexity": {
    "name": "Perplexity",
    "displayName": "Perplexity",
    "type": "n8n-nodes-base.Perplexity",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "Interact with the Perplexity API to generate AI responses with citations",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'perplexityApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "perplexity",
        "displayName": "Perplexity"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden"
      }
    ],
    "version": 1.0
  },
  "Phantombuster": {
    "name": "Phantombuster",
    "displayName": "Phantombuster",
    "type": "n8n-nodes-base.Phantombuster",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Phantombuster API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'phantombusterApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "phantombuster",
        "displayName": "Phantombuster"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "PhilipsHue": {
    "name": "PhilipsHue",
    "displayName": "PhilipsHue",
    "type": "n8n-nodes-base.PhilipsHue",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Philips Hue API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'philipsHueOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "philipsHue",
        "displayName": "Philips Hue"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Pipedrive": {
    "name": "Pipedrive",
    "displayName": "Pipedrive",
    "type": "n8n-nodes-base.Pipedrive",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Create and edit data in Pipedrive",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'pipedriveApi', required: true, displayOptions: { show: { authentication: ['apiToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "pipedrive",
        "displayName": "Pipedrive"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "subject",
        "displayName": "Subject",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "done",
        "displayName": "Done",
        "type": "options"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "deal_id",
        "displayName": "Deal ID",
        "type": "number",
        "default": "0"
      },
      {
        "name": "due_date",
        "displayName": "Due Date",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "note",
        "displayName": "Note",
        "type": "string"
      },
      {
        "name": "org_id",
        "displayName": "Organization Name or ID",
        "type": "options"
      },
      {
        "name": "person_id",
        "displayName": "Person ID",
        "type": "number",
        "default": "0"
      },
      {
        "name": "user_id",
        "displayName": "User Name or ID",
        "type": "options"
      },
      {
        "name": "customProperties",
        "displayName": "Custom Properties",
        "type": "fixedCollection",
        "placeholder": "Add Custom Property"
      },
      {
        "name": "property",
        "displayName": "Property",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Property Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "activityId",
        "displayName": "Activity ID",
        "type": "number"
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "busy_flag",
        "displayName": "Busy Flag",
        "type": "boolean"
      },
      {
        "name": "public_description",
        "displayName": "Public Description",
        "type": "string",
        "default": ""
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "associateWith",
        "displayName": "Associate With",
        "type": "options"
      },
      {
        "name": "currency",
        "displayName": "Currency",
        "type": "string",
        "default": "USD"
      },
      {
        "name": "label",
        "displayName": "Label Name or ID",
        "type": "options"
      },
      {
        "name": "lost_reason",
        "displayName": "Lost Reason",
        "type": "string",
        "default": ""
      },
      {
        "name": "probability",
        "displayName": "Probability",
        "type": "number",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 100
        }
      },
      {
        "name": "stage_id",
        "displayName": "Stage Name or ID",
        "type": "options"
      },
      {
        "name": "status",
        "displayName": "Status",
        "type": "options"
      },
      {
        "name": "visible_to",
        "displayName": "Visible To",
        "type": "options"
      },
      {
        "name": "dealId",
        "displayName": "Deal ID",
        "type": "number"
      },
      {
        "name": "productId",
        "displayName": "Product Name or ID",
        "type": "options",
        "default": ""
      },
      {
        "name": "item_price",
        "displayName": "Item Price",
        "type": "number"
      },
      {
        "name": "quantity",
        "displayName": "Quantity",
        "type": "number",
        "default": "1",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "comments",
        "displayName": "Comments",
        "type": "string"
      },
      {
        "name": "discount_percentage",
        "displayName": "Discount Percentage",
        "type": "number",
        "default": "0",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 100
        }
      },
      {
        "name": "product_variation_id",
        "displayName": "Product Variation ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "productAttachmentId",
        "displayName": "Product Attachment Name or ID",
        "type": "options",
        "default": ""
      },
      {
        "name": "term",
        "displayName": "Term",
        "type": "string",
        "required": true
      },
      {
        "name": "exactMatch",
        "displayName": "Exact Match",
        "type": "boolean"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "includeFields",
        "displayName": "Include Fields",
        "type": "string",
        "default": ""
      },
      {
        "name": "organizationId",
        "displayName": "Organization ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "personId",
        "displayName": "Person ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "fields",
        "displayName": "Search Fields",
        "type": "multiOptions"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "activity_id",
        "displayName": "Activity ID",
        "type": "number",
        "default": "0"
      },
      {
        "name": "product_id",
        "displayName": "Product ID",
        "type": "number",
        "default": "0"
      },
      {
        "name": "fileId",
        "displayName": "File ID",
        "type": "number"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": ""
      },
      {
        "name": "organization_id",
        "displayName": "Organization ID",
        "type": "number",
        "default": "0",
        "required": true
      },
      {
        "name": "expected_close_date",
        "displayName": "Expected Close Date",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "label_ids",
        "displayName": "Label Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "owner_id",
        "displayName": "Owner Name or ID",
        "type": "options"
      },
      {
        "name": "valueProperties",
        "displayName": "Value Properties",
        "type": "number",
        "default": ""
      },
      {
        "name": "leadId",
        "displayName": "Lead ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "content",
        "displayName": "Content"
      },
      {
        "name": "noteId",
        "displayName": "Note ID",
        "type": "number"
      },
      {
        "name": "lead_id",
        "displayName": "Lead ID",
        "type": "number",
        "default": "0"
      },
      {
        "name": "rawData",
        "displayName": "RAW Data",
        "type": "boolean"
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "placeholder": "name@email.com"
      },
      {
        "name": "marketing_status",
        "displayName": "Marketing Status",
        "type": "options"
      },
      {
        "name": "phone",
        "displayName": "Phone",
        "type": "string"
      },
      {
        "name": "resolveProperties",
        "displayName": "Resolve Properties",
        "type": "boolean"
      },
      {
        "name": "encodeProperties",
        "displayName": "Encode Properties",
        "type": "boolean"
      },
      {
        "name": "exclude",
        "displayName": "Exclude Activity IDs",
        "type": "string",
        "default": ""
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "archived_status",
        "displayName": "Archived Status",
        "type": "options",
        "default": "all"
      },
      {
        "name": "firstChar",
        "displayName": "First Char",
        "type": "string",
        "default": ""
      },
      {
        "name": "filterId",
        "displayName": "Predefined Filter Name or ID",
        "type": "options"
      },
      {
        "name": "sort",
        "displayName": "Sort",
        "type": "string",
        "default": ""
      },
      {
        "name": "end_date",
        "displayName": "End Date",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "start_date",
        "displayName": "Star Date",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "filter_id",
        "displayName": "Predefined Filter Name or ID",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "PipedriveTrigger": {
    "name": "PipedriveTrigger",
    "displayName": "PipedriveTrigger",
    "type": "n8n-nodes-base.PipedriveTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Pipedrive events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'pipedriveApi', required: true, displayOptions: { show: { authentication: ['apiToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "pipedriveTrigger",
        "displayName": "Pipedrive Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "incomingAuthentication",
        "displayName": "Incoming Authentication",
        "type": "options"
      },
      {
        "name": "action",
        "displayName": "Action",
        "type": "options"
      },
      {
        "name": "entity",
        "displayName": "Entity",
        "type": "options",
        "default": "*"
      },
      {
        "name": "object",
        "displayName": "Object",
        "type": "options",
        "default": "*"
      }
    ]
  },
  "Plivo": {
    "name": "Plivo",
    "displayName": "Plivo",
    "type": "n8n-nodes-base.Plivo",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Send SMS/MMS messages or make phone calls",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'plivoApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "plivo",
        "displayName": "Plivo"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "PostBin": {
    "name": "PostBin",
    "displayName": "PostBin",
    "type": "n8n-nodes-base.PostBin",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "Consume PostBin API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "postBin",
        "displayName": "PostBin"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Postgres": {
    "name": "postgres",
    "displayName": "Postgres",
    "type": "n8n-nodes-base.Postgres",
    "subtitle": null,
    "description": "Get, add and update data in Postgres",
    "group": [
      "input"
    ],
    "defaultVersion": 2.6,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      2.2,
      2.3,
      2.4,
      2.5,
      2.6
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "postgres",
        "displayName": "Postgres"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string"
      },
      {
        "name": "schema",
        "displayName": "Schema",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "string"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      },
      {
        "name": "updateKey",
        "displayName": "Update Key",
        "type": "string"
      },
      {
        "name": "returnFields",
        "displayName": "Return Fields",
        "type": "string"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "largeNumbersOutput",
        "displayName": "Output Large-Format Numbers As",
        "type": "options"
      },
      {
        "name": "queryParams",
        "displayName": "Query Parameters",
        "type": "string"
      }
    ]
  },
  "PostgresTrigger": {
    "name": "PostgresTrigger",
    "displayName": "PostgresTrigger",
    "type": "n8n-nodes-base.PostgresTrigger",
    "subtitle": null,
    "description": "Listens to Postgres messages",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'postgres', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "postgresTrigger",
        "displayName": "Postgres Trigger"
      },
      {
        "name": "triggerMode",
        "displayName": "Listen For",
        "type": "options"
      },
      {
        "name": "schema",
        "displayName": "Schema Name",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a schema"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "placeholder": "e.g. public"
      },
      {
        "name": "tableName",
        "displayName": "Table Name",
        "type": "resourceLocator"
      },
      {
        "name": "channelName",
        "displayName": "Channel Name",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. n8n_channel"
      },
      {
        "name": "firesOn",
        "displayName": "Event to listen for",
        "type": "options"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "functionName",
        "displayName": "Function Name",
        "type": "string",
        "default": "",
        "placeholder": "e.g. n8n_trigger_function()"
      },
      {
        "name": "replaceIfExists",
        "displayName": "Replace if Exists",
        "type": "boolean"
      },
      {
        "name": "triggerName",
        "displayName": "Trigger Name",
        "type": "string",
        "default": "",
        "placeholder": "e.g. n8n_trigger"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "connectionTimeout",
        "displayName": "Connection Timeout",
        "type": "number",
        "default": "30"
      },
      {
        "name": "delayClosingIdleConnection",
        "displayName": "Delay Closing Idle Connection",
        "type": "number",
        "default": "0",
        "typeOptions": {
          "minValue": 0
        }
      }
    ],
    "version": 1.0
  },
  "PostHog": {
    "name": "PostHog",
    "displayName": "PostHog",
    "type": "n8n-nodes-base.PostHog",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume PostHog API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'postHogApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "postHog",
        "displayName": "PostHog"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "PostmarkTrigger": {
    "name": "PostmarkTrigger",
    "displayName": "PostmarkTrigger",
    "type": "n8n-nodes-base.PostmarkTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Postmark events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'postmarkApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "postmarkTrigger",
        "displayName": "Postmark Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      },
      {
        "name": "firstOpen",
        "displayName": "First Open",
        "type": "boolean"
      },
      {
        "name": "includeContent",
        "displayName": "Include Content",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "ProfitWell": {
    "name": "ProfitWell",
    "displayName": "ProfitWell",
    "type": "n8n-nodes-base.ProfitWell",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume ProfitWell API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'profitWellApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "profitWell",
        "displayName": "ProfitWell"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Pushbullet": {
    "name": "Pushbullet",
    "displayName": "Pushbullet",
    "type": "n8n-nodes-base.Pushbullet",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Pushbullet API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'pushbulletOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "pushbullet",
        "displayName": "Pushbullet"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "required": true
      },
      {
        "name": "body",
        "displayName": "Body",
        "type": "string",
        "required": true
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "required": true
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "target",
        "displayName": "Target",
        "type": "options"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "required": true
      },
      {
        "name": "pushId",
        "displayName": "Push ID",
        "type": "string",
        "required": true
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "active",
        "displayName": "Active",
        "type": "boolean"
      },
      {
        "name": "modified_after",
        "displayName": "Modified After",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "dismissed",
        "displayName": "Dismissed",
        "type": "boolean",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Pushcut": {
    "name": "Pushcut",
    "displayName": "Pushcut",
    "type": "n8n-nodes-base.Pushcut",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Pushcut API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'pushcutApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "pushcut",
        "displayName": "Pushcut"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "notificationName",
        "displayName": "Notification Name or ID",
        "type": "options"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "devices",
        "displayName": "Device Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "input",
        "displayName": "Input",
        "type": "string",
        "default": ""
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "default": ""
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "PushcutTrigger": {
    "name": "PushcutTrigger",
    "displayName": "PushcutTrigger",
    "type": "n8n-nodes-base.PushcutTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Pushcut events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'pushcutApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "pushcutTrigger",
        "displayName": "Pushcut Trigger"
      },
      {
        "name": "actionName",
        "displayName": "Action Name",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Pushover": {
    "name": "Pushover",
    "displayName": "Pushover",
    "type": "n8n-nodes-base.Pushover",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Pushover API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'pushoverApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "pushover",
        "displayName": "Pushover"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "userKey",
        "displayName": "User Key",
        "type": "string",
        "required": true
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "required": true
      },
      {
        "name": "priority",
        "displayName": "Priority",
        "type": "options"
      },
      {
        "name": "retry",
        "displayName": "Retry (Seconds)",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "expire",
        "displayName": "Expire (Seconds)",
        "type": "number",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 10800
        }
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "attachmentsUi",
        "displayName": "Attachment",
        "type": "fixedCollection",
        "placeholder": "Add Attachments"
      },
      {
        "name": "attachmentsValues",
        "displayName": "Attachment Property",
        "type": "string",
        "default": "",
        "placeholder": "data"
      },
      {
        "name": "device",
        "displayName": "Device",
        "type": "string",
        "default": ""
      },
      {
        "name": "html",
        "displayName": "HTML Formatting",
        "type": "boolean"
      },
      {
        "name": "sound",
        "displayName": "Sound Name or ID",
        "type": "options"
      },
      {
        "name": "timestamp",
        "displayName": "Timestamp",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": ""
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": ""
      },
      {
        "name": "url_title",
        "displayName": "URL Title",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "QuestDb": {
    "name": "QuestDb",
    "displayName": "QuestDb",
    "type": "n8n-nodes-base.QuestDb",
    "subtitle": null,
    "description": "Get, add and update data in QuestDB",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'questDb', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "questDb",
        "displayName": "QuestDB"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string"
      },
      {
        "name": "schema",
        "displayName": "Schema",
        "type": "hidden"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "string"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      },
      {
        "name": "returnFields",
        "displayName": "Return Fields",
        "type": "string"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "queryParams",
        "displayName": "Query Parameters",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "QuickBase": {
    "name": "QuickBase",
    "displayName": "QuickBase",
    "type": "n8n-nodes-base.QuickBase",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Integrate with the Quick Base RESTful API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'quickbaseApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "quickbase",
        "displayName": "Quick Base"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "QuickBooks": {
    "name": "QuickBooks",
    "displayName": "QuickBooks",
    "type": "n8n-nodes-base.QuickBooks",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the QuickBooks Online API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'quickBooksOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "quickbooks",
        "displayName": "QuickBooks Online"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "QuickChart": {
    "name": "QuickChart",
    "displayName": "QuickChart",
    "type": "n8n-nodes-base.QuickChart",
    "subtitle": null,
    "description": "Create a chart via QuickChart",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "quickChart",
        "displayName": "QuickChart"
      },
      {
        "name": "chartType",
        "displayName": "Chart Type",
        "type": "options",
        "default": "bar"
      },
      {
        "name": "labelsMode",
        "displayName": "Add Labels",
        "type": "options"
      },
      {
        "name": "labelsUi",
        "displayName": "Labels",
        "type": "fixedCollection"
      },
      {
        "name": "labelsValues",
        "displayName": "Labels",
        "type": "string",
        "default": ""
      },
      {
        "name": "labelsArray",
        "displayName": "Labels Array",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. [\"Berlin\", \"Paris\", \"Rome\", \"New York\"]"
      },
      {
        "name": "data",
        "displayName": "Data",
        "type": "json",
        "default": "",
        "required": true,
        "placeholder": "e.g. [60, 10, 12, 20]"
      },
      {
        "name": "output",
        "displayName": "Put Output In Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "chartOptions",
        "displayName": "Chart Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "backgroundColor",
        "displayName": "Background Color",
        "type": "color"
      },
      {
        "name": "devicePixelRatio",
        "displayName": "Device Pixel Ratio",
        "type": "number",
        "default": "2",
        "typeOptions": {
          "minValue": 1,
          "maxValue": 2
        }
      },
      {
        "name": "format",
        "displayName": "Format",
        "type": "options",
        "default": "png"
      },
      {
        "name": "height",
        "displayName": "Height",
        "type": "number",
        "default": "300"
      },
      {
        "name": "horizontal",
        "displayName": "Horizontal",
        "type": "boolean"
      },
      {
        "name": "width",
        "displayName": "Width",
        "type": "number",
        "default": "500"
      },
      {
        "name": "datasetOptions",
        "displayName": "Dataset Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "borderColor",
        "displayName": "Border Color",
        "type": "color"
      },
      {
        "name": "fill",
        "displayName": "Fill",
        "type": "boolean"
      },
      {
        "name": "label",
        "displayName": "Label",
        "type": "string",
        "default": ""
      },
      {
        "name": "pointStyle",
        "displayName": "Point Style",
        "type": "options",
        "default": "circle"
      }
    ],
    "version": 1.0
  },
  "RabbitMQ": {
    "name": "RabbitMQ",
    "displayName": "RabbitMQ",
    "type": "n8n-nodes-base.RabbitMQ",
    "subtitle": null,
    "description": "Sends messages to a RabbitMQ topic",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'rabbitmq', required: true, testedBy: 'rabbitmqConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "rabbitmq",
        "displayName": "RabbitMQ"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "hidden",
        "default": "sendMessage"
      },
      {
        "name": "deleteMessage",
        "displayName": "Will delete an item from the queue triggered earlier in the workflow by a RabbitMQ Trigger node",
        "type": "notice",
        "default": ""
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "queue",
        "displayName": "Queue / Topic",
        "type": "string"
      },
      {
        "name": "exchange",
        "displayName": "Exchange",
        "type": "string"
      },
      {
        "name": "exchangeType",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "routingKey",
        "displayName": "Routing Key",
        "type": "string"
      },
      {
        "name": "sendInputData",
        "displayName": "Send Input Data",
        "type": "boolean"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "alternateExchange",
        "displayName": "Alternate Exchange",
        "type": "string"
      },
      {
        "name": "arguments",
        "displayName": "Arguments",
        "type": "fixedCollection",
        "placeholder": "Add Argument"
      },
      {
        "name": "argument",
        "displayName": "Argument",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "autoDelete",
        "displayName": "Auto Delete Queue",
        "type": "boolean"
      },
      {
        "name": "durable",
        "displayName": "Durable",
        "type": "boolean"
      },
      {
        "name": "exclusive",
        "displayName": "Exclusive",
        "type": "boolean"
      },
      {
        "name": "headers",
        "displayName": "Headers",
        "type": "fixedCollection",
        "placeholder": "Add Header"
      },
      {
        "name": "header",
        "displayName": "Header",
        "type": "string",
        "default": ""
      }
    ]
  },
  "RabbitMQTrigger": {
    "name": "RabbitMQTrigger",
    "displayName": "RabbitMQTrigger",
    "type": "n8n-nodes-base.RabbitMQTrigger",
    "subtitle": null,
    "description": "Listens to RabbitMQ messages",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'rabbitmq', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "rabbitmqTrigger",
        "displayName": "RabbitMQ Trigger"
      },
      {
        "name": "queue",
        "displayName": "Queue / Topic",
        "type": "string",
        "default": "",
        "placeholder": "queue-name"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "contentIsBinary",
        "displayName": "Content Is Binary",
        "type": "boolean"
      },
      {
        "name": "acknowledge",
        "displayName": "Delete From Queue When",
        "type": "options"
      },
      {
        "name": "jsonParseBody",
        "displayName": "JSON Parse Body",
        "type": "boolean"
      },
      {
        "name": "onlyContent",
        "displayName": "Only Content",
        "type": "boolean"
      },
      {
        "name": "parallelMessages",
        "displayName": "Parallel Message Processing Limit",
        "type": "number"
      },
      {
        "name": "binding",
        "displayName": "Binding",
        "type": "fixedCollection",
        "placeholder": "Add Binding"
      },
      {
        "name": "bindings",
        "displayName": "Binding",
        "type": "string",
        "default": "",
        "placeholder": "exchange"
      },
      {
        "name": "routingKey",
        "displayName": "RoutingKey",
        "type": "string",
        "default": "",
        "placeholder": "routing-key"
      },
      {
        "name": "laterMessageNode",
        "displayName": "To delete an item from the queue, insert a RabbitMQ node later in the workflow and use the 'Delete from queue' operation",
        "type": "notice"
      }
    ],
    "version": 1.0
  },
  "Raindrop": {
    "name": "Raindrop",
    "displayName": "Raindrop",
    "type": "n8n-nodes-base.Raindrop",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Raindrop API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'raindropOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "raindrop",
        "displayName": "Raindrop"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ReadBinaryFile": {
    "name": "ReadBinaryFile",
    "displayName": "ReadBinaryFile",
    "type": "n8n-nodes-base.ReadBinaryFile",
    "subtitle": null,
    "description": "Reads a binary file from disk",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "readBinaryFile",
        "displayName": "Read Binary File"
      },
      {
        "name": "filePath",
        "displayName": "File Path",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "/data/example.jpg"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data",
        "required": true
      }
    ],
    "version": 1.0
  },
  "ReadBinaryFiles": {
    "name": "ReadBinaryFiles",
    "displayName": "ReadBinaryFiles",
    "type": "n8n-nodes-base.ReadBinaryFiles",
    "subtitle": null,
    "description": "Reads binary files from disk",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "readBinaryFiles",
        "displayName": "Read Binary Files"
      },
      {
        "name": "fileSelector",
        "displayName": "File Selector",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "*.jpg"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data",
        "required": true
      }
    ],
    "version": 1.0
  },
  "ReadPDF": {
    "name": "ReadPDF",
    "displayName": "ReadPDF",
    "type": "n8n-nodes-base.ReadPDF",
    "subtitle": null,
    "description": "Reads a PDF and extracts its content",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "readPDF",
        "displayName": "Read PDF"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "encrypted",
        "displayName": "Encrypted",
        "type": "boolean",
        "required": true
      },
      {
        "name": "password",
        "displayName": "Password",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "Reddit": {
    "name": "Reddit",
    "displayName": "Reddit",
    "type": "n8n-nodes-base.Reddit",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Reddit API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'redditOAuth2Api', required: true, displayOptions: { show: { resource: ['postComment', 'post', 'profile'",
    "webhooks": [],
    "properties": [
      {
        "name": "reddit",
        "displayName": "Reddit"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Redis": {
    "name": "Redis",
    "displayName": "Redis",
    "type": "n8n-nodes-base.Redis",
    "subtitle": null,
    "description": "Get, send and update data in Redis",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'redis', required: true, testedBy: 'redisConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "redis",
        "displayName": "Redis"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "key",
        "displayName": "Key",
        "type": "string"
      },
      {
        "name": "propertyName",
        "displayName": "Name",
        "type": "string"
      },
      {
        "name": "keyType",
        "displayName": "Key Type",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "dotNotation",
        "displayName": "Dot Notation",
        "type": "boolean"
      },
      {
        "name": "expire",
        "displayName": "Expire",
        "type": "boolean"
      },
      {
        "name": "ttl",
        "displayName": "TTL",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "keyPattern",
        "displayName": "Key Pattern",
        "type": "string"
      },
      {
        "name": "getValues",
        "displayName": "Get Values",
        "type": "boolean"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string"
      },
      {
        "name": "valueIsJSON",
        "displayName": "Value Is JSON",
        "type": "boolean"
      },
      {
        "name": "channel",
        "displayName": "Channel",
        "type": "string"
      },
      {
        "name": "messageData",
        "displayName": "Data",
        "type": "string"
      },
      {
        "name": "list",
        "displayName": "List",
        "type": "string"
      },
      {
        "name": "tail",
        "displayName": "Tail",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "RedisTrigger": {
    "name": "RedisTrigger",
    "displayName": "RedisTrigger",
    "type": "n8n-nodes-base.RedisTrigger",
    "subtitle": null,
    "description": "Subscribe to redis channel",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'redis', required: true, testedBy: 'redisConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "redisTrigger",
        "displayName": "Redis Trigger"
      },
      {
        "name": "channels",
        "displayName": "Channels",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "jsonParseBody",
        "displayName": "JSON Parse Body",
        "type": "boolean"
      },
      {
        "name": "onlyMessage",
        "displayName": "Only Message",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "RenameKeys": {
    "name": "RenameKeys",
    "displayName": "RenameKeys",
    "type": "n8n-nodes-base.RenameKeys",
    "subtitle": null,
    "description": "Update item field names",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "renameKeys",
        "displayName": "Rename Keys"
      },
      {
        "name": "keys",
        "displayName": "Keys",
        "type": "fixedCollection",
        "placeholder": "Add new key"
      },
      {
        "name": "key",
        "displayName": "Key",
        "type": "string",
        "default": "",
        "placeholder": "currentKey"
      },
      {
        "name": "newKey",
        "displayName": "New Key Name",
        "type": "string",
        "default": "",
        "placeholder": "newKey"
      },
      {
        "name": "additionalOptions",
        "displayName": "Additional Options",
        "type": "collection"
      },
      {
        "name": "regexReplacement",
        "displayName": "Regex",
        "type": "fixedCollection",
        "placeholder": "Add new regular expression"
      },
      {
        "name": "replacements",
        "displayName": "Replacement",
        "type": "notice",
        "default": ""
      },
      {
        "name": "searchRegex",
        "displayName": "Regular Expression",
        "type": "string",
        "default": "",
        "placeholder": "e.g. [N-n]ame"
      },
      {
        "name": "replaceRegex",
        "displayName": "Replace With",
        "type": "string",
        "default": "",
        "placeholder": "replacedName"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "caseInsensitive",
        "displayName": "Case Insensitive",
        "type": "boolean"
      },
      {
        "name": "depth",
        "displayName": "Max Depth",
        "type": "number"
      }
    ],
    "version": 1.0
  },
  "RespondToWebhook": {
    "name": "RespondToWebhook",
    "displayName": "RespondToWebhook",
    "type": "n8n-nodes-base.RespondToWebhook",
    "subtitle": null,
    "description": "Respond with all input JSON items",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": [],
    "credentials": "{ name: 'jwtAuth', required: true, displayOptions: { show: { respondWith: ['jwt'",
    "webhooks": [],
    "properties": [
      {
        "name": "respondWith",
        "displayName": "Respond With",
        "type": "options"
      },
      {
        "name": "enableResponseOutput",
        "displayName": "Enable Response Output Branch",
        "type": "boolean"
      },
      {
        "name": "generalNotice",
        "displayName": "Verify that the \"Webhook\" node\\",
        "type": "notice",
        "default": ""
      },
      {
        "name": "credentials",
        "displayName": "Credentials",
        "type": "credentials",
        "default": ""
      },
      {
        "name": "webhookNotice",
        "displayName": "When using expressions, note that this node will only run for the first item in the input data",
        "type": "notice"
      },
      {
        "name": "redirectURL",
        "displayName": "Redirect URL",
        "type": "string",
        "required": true
      },
      {
        "name": "responseBody",
        "displayName": "Response Body",
        "type": "json"
      },
      {
        "name": "payload",
        "displayName": "Payload",
        "type": "json"
      },
      {
        "name": "responseDataSource",
        "displayName": "Response Data Source",
        "type": "options"
      },
      {
        "name": "inputFieldName",
        "displayName": "Input Field Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "contentTypeNotice",
        "displayName": "To avoid unexpected behavior, add a \"Content-Type\" response header with the appropriate value",
        "type": "notice",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "responseCode",
        "displayName": "Response Code",
        "type": "number",
        "typeOptions": {
          "minValue": 100,
          "maxValue": 599
        }
      },
      {
        "name": "responseHeaders",
        "displayName": "Response Headers",
        "type": "fixedCollection",
        "placeholder": "Add Response Header"
      },
      {
        "name": "entries",
        "displayName": "Entries",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "responseKey",
        "displayName": "Put Response in Field",
        "type": "string"
      },
      {
        "name": "enableStreaming",
        "displayName": "Enable Streaming",
        "type": "boolean"
      }
    ]
  },
  "Rocketchat": {
    "name": "Rocketchat",
    "displayName": "Rocketchat",
    "type": "n8n-nodes-base.Rocketchat",
    "subtitle": "={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}",
    "description": "Consume RocketChat API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'rocketchatApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "rocketchat",
        "displayName": "RocketChat"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "channel",
        "displayName": "Channel",
        "type": "string",
        "required": true
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string"
      },
      {
        "name": "jsonParameters",
        "displayName": "JSON Parameters",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "alias",
        "displayName": "Alias",
        "type": "string",
        "default": ""
      },
      {
        "name": "avatar",
        "displayName": "Avatar",
        "type": "string",
        "default": ""
      },
      {
        "name": "emoji",
        "displayName": "Emoji",
        "type": "string",
        "default": ""
      },
      {
        "name": "attachments",
        "displayName": "Attachments",
        "type": "collection"
      },
      {
        "name": "color",
        "displayName": "Color",
        "type": "color",
        "default": "#ff0000"
      },
      {
        "name": "ts",
        "displayName": "Timestamp",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "thumbUrl",
        "displayName": "Thumb URL",
        "type": "string",
        "default": ""
      },
      {
        "name": "messageLink",
        "displayName": "Message Link",
        "type": "string",
        "default": ""
      },
      {
        "name": "collapsed",
        "displayName": "Collapsed",
        "type": "boolean"
      },
      {
        "name": "authorName",
        "displayName": "Author Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "authorLink",
        "displayName": "Author Link",
        "type": "string",
        "default": ""
      },
      {
        "name": "authorIcon",
        "displayName": "Author Icon",
        "type": "string",
        "default": "",
        "placeholder": "https://site.com/img.png"
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": ""
      },
      {
        "name": "titleLink",
        "displayName": "Title Link",
        "type": "string",
        "default": ""
      },
      {
        "name": "titleLinkDownload",
        "displayName": "Title Link Download",
        "type": "boolean"
      },
      {
        "name": "imageUrl",
        "displayName": "Image URL",
        "type": "string",
        "default": ""
      },
      {
        "name": "audioUrl",
        "displayName": "Audio URL",
        "type": "string",
        "default": "",
        "placeholder": "https://site.com/aud.mp3"
      },
      {
        "name": "videoUrl",
        "displayName": "Video URL",
        "type": "string",
        "default": "",
        "placeholder": "https://site.com/vid.mp4"
      },
      {
        "name": "fields",
        "displayName": "Fields",
        "type": "fixedCollection",
        "placeholder": "Add Field Item"
      },
      {
        "name": "fieldsValues",
        "displayName": "Fields",
        "type": "boolean"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "attachmentsJson",
        "displayName": "Attachments",
        "type": "json"
      }
    ],
    "version": 1.0
  },
  "RssFeedRead": {
    "name": "RssFeedRead",
    "displayName": "RssFeedRead",
    "type": "n8n-nodes-base.RssFeedRead",
    "subtitle": null,
    "description": "Reads data from an RSS Feed",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "rssFeedRead",
        "displayName": "RSS Read"
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "customFields",
        "displayName": "Custom Fields",
        "type": "string",
        "default": ""
      },
      {
        "name": "ignoreSSL",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      }
    ]
  },
  "RssFeedReadTrigger": {
    "name": "RssFeedReadTrigger",
    "displayName": "RssFeedReadTrigger",
    "type": "n8n-nodes-base.RssFeedReadTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Starts a workflow when an RSS feed is updated",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "rssFeedReadTrigger",
        "displayName": "RSS Feed Trigger"
      },
      {
        "name": "feedUrl",
        "displayName": "Feed URL",
        "type": "string",
        "default": "https://blog.n8n.io/rss/",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Rundeck": {
    "name": "Rundeck",
    "displayName": "Rundeck",
    "type": "n8n-nodes-base.Rundeck",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Manage Rundeck API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'rundeckApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "rundeck",
        "displayName": "Rundeck"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "jobid",
        "displayName": "Job ID",
        "type": "string"
      },
      {
        "name": "arguments",
        "displayName": "Arguments",
        "type": "fixedCollection",
        "placeholder": "Add Argument"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "filter",
        "displayName": "Filter",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "S3": {
    "name": "S3",
    "displayName": "S3",
    "type": "n8n-nodes-base.S3",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to any S3-compatible service",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 's3', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "s3",
        "displayName": "S3"
      },
      {
        "name": "s3StandardNotice",
        "displayName": "This node is for services that use the S3 standard, e.g. Minio or Digital Ocean Spaces. For AWS S3 use the 'AWS S3' node.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Salesforce": {
    "name": "Salesforce",
    "displayName": "Salesforce",
    "type": "n8n-nodes-base.Salesforce",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Salesforce API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'salesforceOAuth2Api', required: true, displayOptions: { show: { authentication: ['oAuth2'",
    "webhooks": [],
    "properties": [
      {
        "name": "salesforce",
        "displayName": "Salesforce"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "SalesforceTrigger": {
    "name": "SalesforceTrigger",
    "displayName": "SalesforceTrigger",
    "type": "n8n-nodes-base.SalesforceTrigger",
    "subtitle": "={{($parameter[\"triggerOn\"])}}",
    "description": "Fetches data from Salesforce and starts the workflow on specified polling intervals.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'salesforceOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "salesforceTrigger",
        "displayName": "Salesforce Trigger"
      },
      {
        "name": "triggerOn",
        "displayName": "Trigger On",
        "type": "options",
        "default": ""
      },
      {
        "name": "customObject",
        "displayName": "Custom Object Name or ID",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Salesmate": {
    "name": "Salesmate",
    "displayName": "Salesmate",
    "type": "n8n-nodes-base.Salesmate",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume Salesmate API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'salesmateApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "salesmate",
        "displayName": "Salesmate"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ScheduleTrigger": {
    "name": "ScheduleTrigger",
    "displayName": "ScheduleTrigger",
    "type": "n8n-nodes-base.ScheduleTrigger",
    "subtitle": null,
    "description": "Triggers the workflow on a given schedule",
    "group": [
      "trigger",
      "schedule"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "scheduleTrigger",
        "displayName": "Schedule Trigger"
      },
      {
        "name": "notice",
        "displayName": "This workflow will run on the schedule you define here once you <a data-key=\"activate\">activate</a> it.<br><br>For testing, you can also trigger it manually: by going back to the canvas and clicking \\",
        "type": "notice",
        "default": ""
      },
      {
        "name": "rule",
        "displayName": "Trigger Rules",
        "type": "fixedCollection",
        "placeholder": "Add Rule"
      },
      {
        "name": "interval",
        "displayName": "Trigger Interval",
        "type": "options",
        "default": "days"
      },
      {
        "name": "secondsInterval",
        "displayName": "Seconds Between Triggers",
        "type": "number",
        "default": "30"
      },
      {
        "name": "minutesInterval",
        "displayName": "Minutes Between Triggers",
        "type": "number",
        "default": "5"
      },
      {
        "name": "hoursInterval",
        "displayName": "Hours Between Triggers",
        "type": "number"
      },
      {
        "name": "daysInterval",
        "displayName": "Days Between Triggers",
        "type": "number"
      },
      {
        "name": "weeksInterval",
        "displayName": "Weeks Between Triggers",
        "type": "number"
      },
      {
        "name": "monthsInterval",
        "displayName": "Months Between Triggers",
        "type": "number"
      },
      {
        "name": "triggerAtDayOfMonth",
        "displayName": "Trigger at Day of Month",
        "type": "number"
      },
      {
        "name": "triggerAtDay",
        "displayName": "Trigger on Weekdays",
        "type": "multiOptions"
      },
      {
        "name": "triggerAtHour",
        "displayName": "Trigger at Hour",
        "type": "options",
        "default": "0"
      },
      {
        "name": "Midnight",
        "displayName": "Midnight"
      },
      {
        "name": "1am",
        "displayName": "1am"
      },
      {
        "name": "2am",
        "displayName": "2am"
      },
      {
        "name": "3am",
        "displayName": "3am"
      },
      {
        "name": "4am",
        "displayName": "4am"
      },
      {
        "name": "5am",
        "displayName": "5am"
      },
      {
        "name": "6am",
        "displayName": "6am"
      },
      {
        "name": "7am",
        "displayName": "7am"
      },
      {
        "name": "8am",
        "displayName": "8am"
      },
      {
        "name": "9am",
        "displayName": "9am"
      },
      {
        "name": "10am",
        "displayName": "10am"
      },
      {
        "name": "11am",
        "displayName": "11am"
      },
      {
        "name": "Noon",
        "displayName": "Noon"
      },
      {
        "name": "1pm",
        "displayName": "1pm"
      },
      {
        "name": "2pm",
        "displayName": "2pm"
      },
      {
        "name": "3pm",
        "displayName": "3pm"
      },
      {
        "name": "4pm",
        "displayName": "4pm"
      },
      {
        "name": "5pm",
        "displayName": "5pm"
      },
      {
        "name": "6pm",
        "displayName": "6pm"
      },
      {
        "name": "7pm",
        "displayName": "7pm"
      },
      {
        "name": "8pm",
        "displayName": "8pm"
      },
      {
        "name": "9pm",
        "displayName": "9pm"
      },
      {
        "name": "10pm",
        "displayName": "10pm"
      },
      {
        "name": "11pm",
        "displayName": "11pm"
      },
      {
        "name": "triggerAtMinute",
        "displayName": "Trigger at Minute",
        "type": "number",
        "default": "0"
      },
      {
        "name": "expression",
        "displayName": "Expression",
        "type": "string",
        "default": "",
        "placeholder": "eg. 0 15 * 1 sun"
      }
    ]
  },
  "SeaTable": {
    "name": "SeaTable",
    "displayName": "SeaTable",
    "type": "n8n-nodes-base.SeaTable",
    "subtitle": "={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}",
    "description": "Consume the SeaTable API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'seaTableApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "seaTable",
        "displayName": "SeaTable"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 2.0
  },
  "SeaTableTrigger": {
    "name": "seaTableTrigger",
    "displayName": "SeaTable Trigger",
    "type": "n8n-nodes-base.SeaTableTrigger",
    "subtitle": null,
    "description": "Starts the workflow when SeaTable events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "seaTableTrigger",
        "displayName": "SeaTable Trigger"
      },
      {
        "name": "tableName",
        "displayName": "Table Name or ID",
        "type": "options",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      },
      {
        "name": "viewName",
        "displayName": "View Name",
        "type": "options"
      },
      {
        "name": "assetColumn",
        "displayName": "Signature Column",
        "type": "options",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "convert",
        "displayName": "Return Column Names",
        "type": "boolean"
      }
    ]
  },
  "SecurityScorecard": {
    "name": "SecurityScorecard",
    "displayName": "SecurityScorecard",
    "type": "n8n-nodes-base.SecurityScorecard",
    "subtitle": "={{$parameter[\"operation\"]}} : {{$parameter[\"resource\"]}}",
    "description": "Consume SecurityScorecard API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'securityScorecardApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "securityScorecard",
        "displayName": "SecurityScorecard"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Segment": {
    "name": "Segment",
    "displayName": "Segment",
    "type": "n8n-nodes-base.Segment",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume Segment API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'segmentApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "segment",
        "displayName": "Segment"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "SendGrid": {
    "name": "SendGrid",
    "displayName": "SendGrid",
    "type": "n8n-nodes-base.SendGrid",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume SendGrid API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'sendGridApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "sendGrid",
        "displayName": "SendGrid"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Sendy": {
    "name": "Sendy",
    "displayName": "Sendy",
    "type": "n8n-nodes-base.Sendy",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Sendy API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'sendyApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "sendy",
        "displayName": "Sendy"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "SentryIo": {
    "name": "SentryIo",
    "displayName": "SentryIo",
    "type": "n8n-nodes-base.SentryIo",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Sentry.io API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'sentryIoOAuth2Api', required: true, displayOptions: { show: { authentication: ['oAuth2'",
    "webhooks": [],
    "properties": [
      {
        "name": "sentryIo",
        "displayName": "Sentry.io"
      },
      {
        "name": "sentryVersion",
        "displayName": "Sentry Version",
        "type": "options"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ServiceNow": {
    "name": "ServiceNow",
    "displayName": "ServiceNow",
    "type": "n8n-nodes-base.ServiceNow",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume ServiceNow API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'serviceNowOAuth2Api', required: true, displayOptions: { show: { authentication: ['oAuth2'",
    "webhooks": [],
    "properties": [
      {
        "name": "serviceNow",
        "displayName": "ServiceNow"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Set": {
    "name": "set",
    "displayName": "Set",
    "type": "n8n-nodes-base.Set",
    "subtitle": null,
    "description": "Add or edit fields on an input item and optionally remove other fields",
    "group": [
      "input"
    ],
    "defaultVersion": 3.4,
    "availableVersions": [
      1.0,
      2.0,
      3.0,
      3.1,
      3.2,
      3.3,
      3.4
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "set",
        "displayName": "Set"
      },
      {
        "name": "keepOnlySet",
        "displayName": "Keep Only Set",
        "type": "boolean"
      },
      {
        "name": "values",
        "displayName": "Values to Set",
        "type": "fixedCollection",
        "placeholder": "Add Value"
      },
      {
        "name": "boolean",
        "displayName": "Boolean",
        "type": "string",
        "default": "propertyName"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "boolean"
      },
      {
        "name": "number",
        "displayName": "Number",
        "type": "string",
        "default": "propertyName"
      },
      {
        "name": "string",
        "displayName": "String",
        "type": "string",
        "default": "propertyName"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "dotNotation",
        "displayName": "Dot Notation",
        "type": "boolean"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "duplicateItem",
        "displayName": "Duplicate Item",
        "type": "boolean"
      },
      {
        "name": "duplicateCount",
        "displayName": "Duplicate Item Count",
        "type": "number",
        "default": "0",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "duplicateWarning",
        "displayName": "Item duplication is set in the node settings. This option will be ignored when the workflow runs automatically.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "include",
        "displayName": "Include in Output",
        "type": "options",
        "default": "all"
      },
      {
        "name": "includeOtherFields",
        "displayName": "Include Other Input Fields",
        "type": "boolean"
      },
      {
        "name": "includeFields",
        "displayName": "Fields to Include",
        "type": "string",
        "default": "",
        "placeholder": "e.g. fieldToInclude1,fieldToInclude2"
      },
      {
        "name": "excludeFields",
        "displayName": "Fields to Exclude",
        "type": "string",
        "default": "",
        "placeholder": "e.g. fieldToExclude1,fieldToExclude2"
      },
      {
        "name": "includeBinary",
        "displayName": "Include Binary File",
        "type": "boolean"
      },
      {
        "name": "stripBinary",
        "displayName": "Strip Binary Data",
        "type": "boolean"
      },
      {
        "name": "ignoreConversionErrors",
        "displayName": "Ignore Type Conversion Errors",
        "type": "boolean"
      }
    ]
  },
  "Shopify": {
    "name": "Shopify",
    "displayName": "Shopify",
    "type": "n8n-nodes-base.Shopify",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Shopify API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'shopifyApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": [],
    "properties": [
      {
        "name": "shopify",
        "displayName": "Shopify"
      },
      {
        "name": "apiVersion",
        "displayName": "Shopify API Version: 2024-07",
        "type": "notice",
        "default": ""
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ShopifyTrigger": {
    "name": "ShopifyTrigger",
    "displayName": "ShopifyTrigger",
    "type": "n8n-nodes-base.ShopifyTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle Shopify events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'shopifyApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "shopifyTrigger",
        "displayName": "Shopify Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "topic",
        "displayName": "Trigger On",
        "type": "options",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Signl4": {
    "name": "Signl4",
    "displayName": "Signl4",
    "type": "n8n-nodes-base.Signl4",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume SIGNL4 API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'signl4Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "signl4",
        "displayName": "SIGNL4"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "default": ""
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "alertingScenario",
        "displayName": "Alerting Scenario",
        "type": "options"
      },
      {
        "name": "attachmentsUi",
        "displayName": "Attachments",
        "type": "fixedCollection",
        "placeholder": "Add Attachments"
      },
      {
        "name": "attachmentsBinary",
        "displayName": "Attachments Binary",
        "type": "string",
        "default": "",
        "placeholder": "data"
      },
      {
        "name": "externalId",
        "displayName": "External ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "filtering",
        "displayName": "Filtering",
        "type": "boolean"
      },
      {
        "name": "locationFieldsUi",
        "displayName": "Location",
        "type": "fixedCollection",
        "placeholder": "Add Location"
      },
      {
        "name": "locationFieldsValues",
        "displayName": "Location",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "longitude",
        "displayName": "Longitude",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "service",
        "displayName": "Service",
        "type": "string",
        "default": ""
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Simulate": {
    "name": "Simulate",
    "displayName": "Simulate",
    "type": "n8n-nodes-base.Simulate",
    "subtitle": "={{$parameter.subtitle || undefined}}",
    "description": "Simulate a node",
    "group": [
      "organization"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "simulate",
        "displayName": "Simulate"
      },
      {
        "name": "output",
        "displayName": "Output",
        "type": "options",
        "default": "all"
      },
      {
        "name": "numberOfItems",
        "displayName": "Number of Items",
        "type": "number",
        "default": "1"
      }
    ],
    "version": 1.0
  },
  "SimulateTrigger": {
    "name": "SimulateTrigger",
    "displayName": "SimulateTrigger",
    "type": "n8n-nodes-base.SimulateTrigger",
    "subtitle": "={{$parameter.subtitle || undefined}}",
    "description": "Simulate a trigger node",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "simulateTrigger",
        "displayName": "Simulate Trigger"
      }
    ],
    "version": 1.0
  },
  "Slack": {
    "name": "slack",
    "displayName": "Slack",
    "type": "n8n-nodes-base.Slack",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Slack API",
    "group": [
      "output"
    ],
    "defaultVersion": 2.3,
    "availableVersions": [
      1.0,
      2.0,
      2.1,
      2.2,
      2.3
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "slack",
        "displayName": "Slack"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "SlackTrigger": {
    "name": "SlackTrigger",
    "displayName": "SlackTrigger",
    "type": "n8n-nodes-base.SlackTrigger",
    "subtitle": "={{$parameter[\"eventFilter\"].join(\", \")}}",
    "description": "Handle Slack events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'slackApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "slackTrigger",
        "displayName": "Slack Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "hidden",
        "default": "accessToken"
      },
      {
        "name": "notice",
        "displayName": "Set up a webhook in your Slack app to enable this node. <a href=\"https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.slacktrigger/#configure-a-webhook-in-slack\" target=\"_blank\">More info</a>. We also recommend setting up a <a href=\"https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.slacktrigger/#verify-the-webhook\" target=\"_blank\">signing secret</a> to ensure the authenticity of requests.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "trigger",
        "displayName": "Trigger On",
        "type": "multiOptions"
      },
      {
        "name": "watchWorkspace",
        "displayName": "Watch Whole Workspace",
        "type": "boolean"
      },
      {
        "name": "channelId",
        "displayName": "Channel to Watch",
        "type": "resourceLocator",
        "required": true
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a channel..."
      },
      {
        "name": "id",
        "displayName": "By ID",
        "type": "string"
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string",
        "placeholder": "https://app.slack.com/client/TS9594PZK/B0556F47Z3A"
      },
      {
        "name": "downloadFiles",
        "displayName": "Download Files",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "resolveIds",
        "displayName": "Resolve IDs",
        "type": "boolean"
      },
      {
        "name": "userIds",
        "displayName": "Usernames or IDs to Ignore",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "Sms77": {
    "name": "Sms77",
    "displayName": "Sms77",
    "type": "n8n-nodes-base.Sms77",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Send SMS and make text-to-speech calls",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'sms77Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "sms77",
        "displayName": "seven"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "from",
        "displayName": "From",
        "type": "string",
        "default": "",
        "placeholder": "+4901234567890"
      },
      {
        "name": "to",
        "displayName": "To",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "+49876543210, MyGroup"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "delay",
        "displayName": "Delay",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "foreign_id",
        "displayName": "Foreign ID",
        "type": "string",
        "default": "",
        "placeholder": "MyCustomForeignID"
      },
      {
        "name": "flash",
        "displayName": "Flash",
        "type": "boolean"
      },
      {
        "name": "label",
        "displayName": "Label",
        "type": "string",
        "default": "",
        "placeholder": "MyCustomLabel"
      },
      {
        "name": "performance_tracking",
        "displayName": "Performance Tracking",
        "type": "boolean"
      },
      {
        "name": "ttl",
        "displayName": "TTL",
        "type": "number",
        "default": "2880",
        "typeOptions": {
          "minValue": 1
        }
      }
    ],
    "version": 1.0
  },
  "Snowflake": {
    "name": "Snowflake",
    "displayName": "Snowflake",
    "type": "n8n-nodes-base.Snowflake",
    "subtitle": null,
    "description": "Get, add and update data in Snowflake",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'snowflake', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "snowflake",
        "displayName": "Snowflake"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "string"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      },
      {
        "name": "updateKey",
        "displayName": "Update Key",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "SplitInBatches": {
    "name": "splitInBatches",
    "displayName": "Split In Batches",
    "type": "n8n-nodes-base.SplitInBatches",
    "subtitle": null,
    "description": "Split data into batches and iterate over each batch",
    "group": [
      "organization"
    ],
    "defaultVersion": 3.0,
    "availableVersions": [
      1.0,
      2.0,
      3.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "splitInBatches",
        "displayName": "Split In Batches"
      },
      {
        "name": "splitInBatchesNotice",
        "displayName": "You may not need this node — n8n nodes automatically run once for each input item. <a href=\"https://docs.n8n.io/getting-started/key-concepts/looping.html#using-loops-in-n8n\" target=\"_blank\">More info</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "reset",
        "displayName": "Reset",
        "type": "boolean"
      }
    ]
  },
  "Splunk": {
    "name": "splunk",
    "displayName": "Splunk",
    "type": "n8n-nodes-base.Splunk",
    "subtitle": null,
    "description": "Consume the Splunk Enterprise API",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "splunk",
        "displayName": "Splunk"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "Spontit": {
    "name": "Spontit",
    "displayName": "Spontit",
    "type": "n8n-nodes-base.Spontit",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Spontit API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'spontitApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "spontit",
        "displayName": "Spontit"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Spotify": {
    "name": "Spotify",
    "displayName": "Spotify",
    "type": "n8n-nodes-base.Spotify",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Access public song data via the Spotify API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'spotifyOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "spotify",
        "displayName": "Spotify"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "id",
        "displayName": "Resource ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "query",
        "displayName": "Search Keyword",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "country",
        "displayName": "Country",
        "type": "string",
        "default": "US",
        "required": true
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": "",
        "placeholder": "These are all my favorite songs."
      },
      {
        "name": "public",
        "displayName": "Public",
        "type": "boolean"
      },
      {
        "name": "trackID",
        "displayName": "Track ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "position",
        "displayName": "Position",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean",
        "required": true
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number",
        "default": "50",
        "required": true
      },
      {
        "name": "volumePercent",
        "displayName": "Volume",
        "type": "number",
        "default": "50",
        "required": true
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "market",
        "displayName": "Country",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "SpreadsheetFile": {
    "name": "spreadsheetFile",
    "displayName": "Spreadsheet File",
    "type": "n8n-nodes-base.SpreadsheetFile",
    "subtitle": null,
    "description": "Reads and writes data from a spreadsheet file like CSV, XLS, ODS, etc",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "spreadsheetFile",
        "displayName": "Spreadsheet File"
      }
    ]
  },
  "SseTrigger": {
    "name": "SseTrigger",
    "displayName": "SseTrigger",
    "type": "n8n-nodes-base.SseTrigger",
    "subtitle": null,
    "description": "Triggers the workflow when Server-Sent Events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "sseTrigger",
        "displayName": "SSE Trigger"
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "http://example.com"
      }
    ],
    "version": 1.0
  },
  "Ssh": {
    "name": "Ssh",
    "displayName": "Ssh",
    "type": "n8n-nodes-base.Ssh",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Execute commands via SSH",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'sshPassword', required: true, testedBy: 'sshConnectionTest', displayOptions: { show: { authentication: ['password'",
    "webhooks": [],
    "properties": [
      {
        "name": "ssh",
        "displayName": "SSH"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "command",
        "displayName": "Command",
        "type": "string"
      },
      {
        "name": "cwd",
        "displayName": "Working Directory",
        "type": "string"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "path",
        "displayName": "Target Directory",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "fileName",
        "displayName": "File Name",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Stackby": {
    "name": "Stackby",
    "displayName": "Stackby",
    "type": "n8n-nodes-base.Stackby",
    "subtitle": null,
    "description": "Read, write, and delete data in Stackby",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'stackbyApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "stackby",
        "displayName": "Stackby"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "stackId",
        "displayName": "Stack ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "Stories"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection"
      },
      {
        "name": "view",
        "displayName": "View",
        "type": "string",
        "default": "",
        "placeholder": "All Stories"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "Start": {
    "name": "Start",
    "displayName": "Start",
    "type": "n8n-nodes-base.Start",
    "subtitle": null,
    "description": "Starts the workflow execution from this node",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "start",
        "displayName": "Start"
      },
      {
        "name": "notice",
        "displayName": "This node is where a manual workflow execution starts. To make one, go back to the canvas and click ‘execute workflow’",
        "type": "notice",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "StickyNote": {
    "name": "StickyNote",
    "displayName": "StickyNote",
    "type": "n8n-nodes-base.StickyNote",
    "subtitle": null,
    "description": "Make your workflow easier to understand",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "stickyNote",
        "displayName": "Sticky Note"
      },
      {
        "name": "content",
        "displayName": "Content",
        "type": "string",
        "default": "## I'm a note \\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)"
      },
      {
        "name": "height",
        "displayName": "Height",
        "type": "number",
        "default": "160",
        "required": true
      },
      {
        "name": "width",
        "displayName": "Width",
        "type": "number",
        "default": "240",
        "required": true
      },
      {
        "name": "color",
        "displayName": "Color",
        "type": "number",
        "default": "1",
        "required": true
      }
    ],
    "version": 1.0
  },
  "StopAndError": {
    "name": "StopAndError",
    "displayName": "StopAndError",
    "type": "n8n-nodes-base.StopAndError",
    "subtitle": null,
    "description": "Throw an error in the workflow",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "stopAndError",
        "displayName": "Stop and Error"
      },
      {
        "name": "errorType",
        "displayName": "Error Type",
        "type": "options"
      },
      {
        "name": "errorMessage",
        "displayName": "Error Message",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "An error occurred!"
      },
      {
        "name": "errorObject",
        "displayName": "Error Object",
        "type": "json",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Storyblok": {
    "name": "Storyblok",
    "displayName": "Storyblok",
    "type": "n8n-nodes-base.Storyblok",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Storyblok API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'storyblokContentApi', required: true, displayOptions: { show: { source: ['contentApi'",
    "webhooks": [],
    "properties": [
      {
        "name": "storyblok",
        "displayName": "Storyblok"
      },
      {
        "name": "source",
        "displayName": "Source",
        "type": "options",
        "default": "contentApi"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Strapi": {
    "name": "Strapi",
    "displayName": "Strapi",
    "type": "n8n-nodes-base.Strapi",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Strapi API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'strapiApi', required: true, testedBy: 'strapiApiTest', displayOptions: { show: { authentication: ['password'",
    "webhooks": [],
    "properties": [
      {
        "name": "strapi",
        "displayName": "Strapi"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Strava": {
    "name": "Strava",
    "displayName": "Strava",
    "type": "n8n-nodes-base.Strava",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Strava API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'stravaOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "strava",
        "displayName": "Strava"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "StravaTrigger": {
    "name": "StravaTrigger",
    "displayName": "StravaTrigger",
    "type": "n8n-nodes-base.StravaTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Strava events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'stravaOAuth2Api', required: true, },",
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', path: 'webhook', }, { name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "stravaTrigger",
        "displayName": "Strava Trigger"
      },
      {
        "name": "object",
        "displayName": "Object",
        "type": "options"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      },
      {
        "name": "resolveData",
        "displayName": "Resolve Data",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "deleteIfExist",
        "displayName": "Delete If Exist",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Stripe": {
    "name": "Stripe",
    "displayName": "Stripe",
    "type": "n8n-nodes-base.Stripe",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Stripe API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'stripeApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "stripe",
        "displayName": "Stripe"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "StripeTrigger": {
    "name": "StripeTrigger",
    "displayName": "StripeTrigger",
    "type": "n8n-nodes-base.StripeTrigger",
    "subtitle": null,
    "description": "Handle Stripe events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'stripeApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "stripeTrigger",
        "displayName": "Stripe Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions",
        "required": true
      },
      {
        "name": "apiVersion",
        "displayName": "API Version",
        "type": "string",
        "default": "",
        "placeholder": "2025-05-28.basil"
      }
    ],
    "version": 1.0
  },
  "Supabase": {
    "name": "Supabase",
    "displayName": "Supabase",
    "type": "n8n-nodes-base.Supabase",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Add, get, delete and update data in a table",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'supabaseApi', required: true, testedBy: 'supabaseApiCredentialTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "supabase",
        "displayName": "Supabase"
      },
      {
        "name": "useCustomSchema",
        "displayName": "Use Custom Schema",
        "type": "boolean"
      },
      {
        "name": "schema",
        "displayName": "Schema",
        "type": "string",
        "default": "public"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "SurveyMonkeyTrigger": {
    "name": "SurveyMonkeyTrigger",
    "displayName": "SurveyMonkeyTrigger",
    "type": "n8n-nodes-base.SurveyMonkeyTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Survey Monkey events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'surveyMonkeyApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": "{ name: 'setup', httpMethod: 'HEAD', responseMode: 'onReceived', path: 'webhook', }, { name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "surveyMonkeyTrigger",
        "displayName": "SurveyMonkey Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "objectType",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "event",
        "displayName": "Event"
      },
      {
        "name": "surveyIds",
        "displayName": "Survey Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "surveyId",
        "displayName": "Survey Name or ID",
        "type": "options"
      },
      {
        "name": "collectorIds",
        "displayName": "Collector Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "resolveData",
        "displayName": "Resolve Data",
        "type": "boolean"
      },
      {
        "name": "onlyAnswers",
        "displayName": "Only Answers"
      }
    ],
    "version": 1.0
  },
  "Switch": {
    "name": "switch",
    "displayName": "Switch",
    "type": "n8n-nodes-base.Switch",
    "subtitle": null,
    "description": "Route items depending on defined expression or rules",
    "group": [
      "transform"
    ],
    "defaultVersion": 3.3,
    "availableVersions": [
      1.0,
      2.0,
      3.0,
      3.1,
      3.2,
      3.3
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "switch",
        "displayName": "Switch"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "output",
        "displayName": "Output",
        "type": "number",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 3
        }
      },
      {
        "name": "dataType",
        "displayName": "Data Type",
        "type": "options"
      },
      {
        "name": "value1",
        "displayName": "Value 1",
        "type": "boolean"
      },
      {
        "name": "rules",
        "displayName": "Routing Rules",
        "type": "fixedCollection",
        "placeholder": "Add Routing Rule"
      },
      {
        "name": "value2",
        "displayName": "Value 2",
        "type": "boolean"
      },
      {
        "name": "fallbackOutput",
        "displayName": "Fallback Output",
        "type": "options"
      },
      {
        "name": "outputsAmount",
        "displayName": "Outputs Amount",
        "type": "number"
      },
      {
        "name": "outputKey",
        "displayName": "Output Key",
        "type": "string",
        "default": ""
      },
      {
        "name": "numberOutputs",
        "displayName": "Number of Outputs",
        "type": "number"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "filter",
        "placeholder": "Add Condition"
      },
      {
        "name": "renameOutput",
        "displayName": "Rename Output",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "ignoreCase",
        "displayName": "Ignore Case",
        "type": "boolean"
      },
      {
        "name": "renameFallbackOutput",
        "displayName": "Rename Fallback Output",
        "type": "string",
        "default": "",
        "placeholder": "e.g. Fallback"
      },
      {
        "name": "allMatchingOutputs",
        "displayName": "Send data to all matching outputs",
        "type": "boolean"
      }
    ]
  },
  "SyncroMsp": {
    "name": "syncroMsp",
    "displayName": "SyncroMSP",
    "type": "n8n-nodes-base.SyncroMsp",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Manage contacts, tickets and more from Syncro MSP",
    "group": [
      "output"
    ],
    "defaultVersion": 1.0,
    "availableVersions": [
      1.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "syncroMsp",
        "displayName": "SyncroMSP"
      }
    ]
  },
  "Taiga": {
    "name": "Taiga",
    "displayName": "Taiga",
    "type": "n8n-nodes-base.Taiga",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Taiga API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'taigaApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "taiga",
        "displayName": "Taiga"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "TaigaTrigger": {
    "name": "TaigaTrigger",
    "displayName": "TaigaTrigger",
    "type": "n8n-nodes-base.TaigaTrigger",
    "subtitle": "={{\"project:\" + $parameter[\"projectSlug\"]}}",
    "description": "Handle Taiga events via webhook",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'taigaApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "taigaTrigger",
        "displayName": "Taiga Trigger"
      },
      {
        "name": "projectId",
        "displayName": "Project Name or ID",
        "type": "options"
      },
      {
        "name": "resources",
        "displayName": "Resources",
        "type": "multiOptions",
        "required": true
      },
      {
        "name": "operations",
        "displayName": "Operations",
        "type": "multiOptions",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Tapfiliate": {
    "name": "Tapfiliate",
    "displayName": "Tapfiliate",
    "type": "n8n-nodes-base.Tapfiliate",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume Tapfiliate API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'tapfiliateApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "tapfiliate",
        "displayName": "Tapfiliate"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Telegram": {
    "name": "Telegram",
    "displayName": "Telegram",
    "type": "n8n-nodes-base.Telegram",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to Telegram",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'telegramApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "preBuiltAgentsCalloutTelegram",
        "displayName": "Interact with Telegram using our pre-built",
        "type": "callout"
      },
      {
        "name": "telegram",
        "displayName": "Telegram"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "chatId",
        "displayName": "Chat ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "messageId",
        "displayName": "Message ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "disable_notification",
        "displayName": "Disable Notification",
        "type": "boolean"
      },
      {
        "name": "userId",
        "displayName": "User ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": ""
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": ""
      },
      {
        "name": "queryId",
        "displayName": "Query ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "cache_time",
        "displayName": "Cache Time",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "show_alert",
        "displayName": "Show Alert",
        "type": "boolean"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "default": ""
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": ""
      },
      {
        "name": "results",
        "displayName": "Results",
        "type": "string",
        "default": ""
      },
      {
        "name": "fileId",
        "displayName": "File ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "download",
        "displayName": "Download",
        "type": "boolean"
      },
      {
        "name": "mimeType",
        "displayName": "MIME Type",
        "type": "string",
        "default": "",
        "placeholder": "image/jpeg"
      },
      {
        "name": "messageType",
        "displayName": "Message Type",
        "type": "options"
      },
      {
        "name": "binaryData",
        "displayName": "Binary File",
        "type": "boolean",
        "required": true
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "inlineMessageId",
        "displayName": "Inline Message ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "replyMarkup",
        "displayName": "Reply Markup"
      },
      {
        "name": "file",
        "displayName": "Animation",
        "type": "string",
        "default": ""
      },
      {
        "name": "action",
        "displayName": "Action",
        "type": "options"
      },
      {
        "name": "latitude",
        "displayName": "Latitude",
        "type": "number",
        "default": "0.0",
        "typeOptions": {
          "maxValue": 90
        }
      },
      {
        "name": "longitude",
        "displayName": "Longitude",
        "type": "number",
        "typeOptions": {
          "maxValue": 180
        }
      },
      {
        "name": "media",
        "displayName": "Media",
        "type": "fixedCollection"
      },
      {
        "name": "caption",
        "displayName": "Caption",
        "type": "string",
        "default": ""
      },
      {
        "name": "parse_mode",
        "displayName": "Parse Mode",
        "type": "options"
      },
      {
        "name": "forceReply",
        "displayName": "Force Reply",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "force_reply",
        "displayName": "Force Reply",
        "type": "boolean"
      },
      {
        "name": "selective",
        "displayName": "Selective",
        "type": "boolean"
      },
      {
        "name": "inlineKeyboard",
        "displayName": "Inline Keyboard",
        "type": "fixedCollection",
        "placeholder": "Add Keyboard Row"
      },
      {
        "name": "rows",
        "displayName": "Rows",
        "type": "fixedCollection",
        "placeholder": "Add Button"
      },
      {
        "name": "buttons",
        "displayName": "Buttons",
        "type": "string",
        "default": ""
      },
      {
        "name": "callback_data",
        "displayName": "Callback Data",
        "type": "string",
        "default": ""
      },
      {
        "name": "pay",
        "displayName": "Pay",
        "type": "boolean"
      },
      {
        "name": "switch_inline_query_current_chat",
        "displayName": "Switch Inline Query Current Chat",
        "type": "string",
        "default": ""
      },
      {
        "name": "switch_inline_query",
        "displayName": "Switch Inline Query",
        "type": "string",
        "default": ""
      },
      {
        "name": "web_app",
        "displayName": "Web App",
        "type": "collection",
        "placeholder": "Set Telegram Web App URL"
      },
      {
        "name": "replyKeyboard",
        "displayName": "Reply Keyboard",
        "type": "fixedCollection",
        "placeholder": "Add Reply Keyboard Row"
      },
      {
        "name": "request_contact",
        "displayName": "Request Contact",
        "type": "boolean"
      },
      {
        "name": "request_location",
        "displayName": "Request Location",
        "type": "boolean"
      },
      {
        "name": "replyKeyboardOptions",
        "displayName": "Reply Keyboard Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "resize_keyboard",
        "displayName": "Resize Keyboard",
        "type": "boolean"
      },
      {
        "name": "one_time_keyboard",
        "displayName": "One Time Keyboard",
        "type": "boolean"
      },
      {
        "name": "replyKeyboardRemove",
        "displayName": "Reply Keyboard Remove",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "remove_keyboard",
        "displayName": "Remove Keyboard",
        "type": "boolean"
      },
      {
        "name": "disable_web_page_preview",
        "displayName": "Disable WebPage Preview",
        "type": "boolean"
      },
      {
        "name": "duration",
        "displayName": "Duration",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "fileName",
        "displayName": "File Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "height",
        "displayName": "Height",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "performer",
        "displayName": "Performer",
        "type": "string"
      },
      {
        "name": "reply_to_message_id",
        "displayName": "Reply To Message ID",
        "type": "number"
      },
      {
        "name": "message_thread_id",
        "displayName": "Message Thread ID",
        "type": "number"
      },
      {
        "name": "thumb",
        "displayName": "Thumbnail",
        "type": "string"
      },
      {
        "name": "width",
        "displayName": "Width",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      }
    ]
  },
  "TelegramTrigger": {
    "name": "TelegramTrigger",
    "displayName": "TelegramTrigger",
    "type": "n8n-nodes-base.TelegramTrigger",
    "subtitle": "=Updates: {{$parameter[\"updates\"].join(\", \")}}",
    "description": "Starts the workflow on a Telegram update",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'telegramApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "telegramTrigger",
        "displayName": "Telegram Trigger"
      },
      {
        "name": "telegramTriggerNotice",
        "displayName": "Due to Telegram API limitations, you can use just one Telegram trigger for each bot at a time",
        "type": "notice",
        "default": ""
      },
      {
        "name": "updates",
        "displayName": "Trigger On",
        "type": "multiOptions"
      },
      {
        "name": "attachmentNotice",
        "displayName": "Every uploaded attachment, even if sent in a group, will trigger a separate event. You can identify that an attachment belongs to a certain group by <code>media_group_id</code> .",
        "type": "notice",
        "default": ""
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "download",
        "displayName": "Download Images/Files",
        "type": "boolean"
      },
      {
        "name": "imageSize",
        "displayName": "Image Size",
        "type": "options"
      },
      {
        "name": "chatIds",
        "displayName": "Restrict to Chat IDs",
        "type": "string",
        "default": ""
      },
      {
        "name": "userIds",
        "displayName": "Restrict to User IDs",
        "type": "string",
        "default": ""
      }
    ]
  },
  "TheHive": {
    "name": "TheHive",
    "displayName": "TheHive",
    "type": "n8n-nodes-base.TheHive",
    "subtitle": "={{$parameter[\"operation\"]}} : {{$parameter[\"resource\"]}}",
    "description": "Consume TheHive API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'theHiveApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "theHive",
        "displayName": "TheHive"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "required": true
      }
    ],
    "version": 1.0
  },
  "TheHiveTrigger": {
    "name": "TheHiveTrigger",
    "displayName": "TheHiveTrigger",
    "type": "n8n-nodes-base.TheHiveTrigger",
    "subtitle": null,
    "description": "Starts the workflow when TheHive events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "theHiveTrigger",
        "displayName": "TheHive Trigger"
      },
      {
        "name": "notice",
        "displayName": "You must set up the webhook in TheHive — instructions <a href=\"https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.thehivetrigger/#configure-a-webhook-in-thehive\" target=\"_blank\">here</a>",
        "type": "notice",
        "default": ""
      }
    ]
  },
  "TheHiveProject": {
    "name": "TheHiveProject",
    "displayName": "TheHiveProject",
    "type": "n8n-nodes-base.TheHiveProject",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "TODO_add_property",
        "type": "string",
        "description": "Fill manually if needed"
      }
    ]
  },
  "TheHiveProjectTrigger": {
    "name": "TheHiveProjectTrigger",
    "displayName": "TheHiveProjectTrigger",
    "type": "n8n-nodes-base.TheHiveProjectTrigger",
    "subtitle": null,
    "description": "Starts the workflow when TheHive events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "theHiveProjectTrigger",
        "displayName": "TheHive 5 Trigger"
      },
      {
        "name": "notice",
        "displayName": "You must set up the webhook in TheHive — instructions <a href=\"https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.thehive5trigger/#configure-a-webhook-in-thehive\" target=\"_blank\">here</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions",
        "required": true
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "fixedCollection",
        "placeholder": "Add Filter"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": "",
        "placeholder": "e.g. context.severity"
      },
      {
        "name": "operator",
        "displayName": "Operator",
        "type": "options"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "outputOnlyData",
        "displayName": "Output Only Data",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "TimescaleDb": {
    "name": "TimescaleDb",
    "displayName": "TimescaleDb",
    "type": "n8n-nodes-base.TimescaleDb",
    "subtitle": null,
    "description": "Add and update data in TimescaleDB",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'timescaleDb', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "timescaleDb",
        "displayName": "TimescaleDB"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string"
      },
      {
        "name": "schema",
        "displayName": "Schema",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "string"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      },
      {
        "name": "updateKey",
        "displayName": "Update Key",
        "type": "string"
      },
      {
        "name": "returnFields",
        "displayName": "Return Fields",
        "type": "string"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "queryParams",
        "displayName": "Query Parameters",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "Todoist": {
    "name": "todoist",
    "displayName": "Todoist",
    "type": "n8n-nodes-base.Todoist",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Todoist API",
    "group": [
      "output"
    ],
    "defaultVersion": 2.1,
    "availableVersions": [
      1.0,
      2.0,
      2.1
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "todoist",
        "displayName": "Todoist"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "required": true
      },
      {
        "name": "taskId",
        "displayName": "Task ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "project",
        "displayName": "Project Name or ID",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a project..."
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string",
        "placeholder": "2302163813"
      },
      {
        "name": "section",
        "displayName": "Section Name or ID",
        "type": "options"
      },
      {
        "name": "labels",
        "displayName": "Label Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "content",
        "displayName": "Content",
        "type": "string"
      },
      {
        "name": "commands",
        "displayName": "Sync Commands",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": ""
      },
      {
        "name": "dueDateTime",
        "displayName": "Due Date Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "dueLang",
        "displayName": "Due String Locale",
        "type": "string",
        "default": ""
      },
      {
        "name": "dueString",
        "displayName": "Due String",
        "type": "string",
        "default": ""
      },
      {
        "name": "parentId",
        "displayName": "Parent Name or ID",
        "type": "options"
      },
      {
        "name": "priority",
        "displayName": "Priority",
        "type": "number",
        "typeOptions": {
          "minValue": 1,
          "maxValue": 4
        }
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "filter",
        "displayName": "Filter",
        "type": "string",
        "default": ""
      },
      {
        "name": "ids",
        "displayName": "IDs",
        "type": "string",
        "default": ""
      },
      {
        "name": "labelId",
        "displayName": "Label Name or ID",
        "type": "options"
      },
      {
        "name": "lang",
        "displayName": "Lang",
        "type": "string",
        "default": ""
      },
      {
        "name": "projectId",
        "displayName": "Project Name or ID",
        "type": "options"
      },
      {
        "name": "sectionId",
        "displayName": "Section Name or ID",
        "type": "options"
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "parent",
        "displayName": "Parent Name or ID",
        "type": "options"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string"
      },
      {
        "name": "note",
        "displayName": "Note",
        "type": "string",
        "default": ""
      },
      {
        "name": "reminder",
        "displayName": "Reminder",
        "type": "string",
        "default": ""
      },
      {
        "name": "auto_reminder",
        "displayName": "Auto Reminder",
        "type": "boolean"
      },
      {
        "name": "order",
        "displayName": "Order",
        "type": "number",
        "default": "0"
      },
      {
        "name": "dueDate",
        "displayName": "Due Date",
        "type": "string",
        "default": "",
        "placeholder": "YYYY-MM-DD"
      },
      {
        "name": "assigneeId",
        "displayName": "Assignee ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "duration",
        "displayName": "Duration",
        "type": "number",
        "default": "0"
      },
      {
        "name": "durationUnit",
        "displayName": "Duration Unit",
        "type": "options"
      },
      {
        "name": "deadlineDate",
        "displayName": "Deadline Date",
        "type": "string",
        "default": "",
        "placeholder": "YYYY-MM-DD"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "projectOptions",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "color",
        "displayName": "Color",
        "type": "options",
        "default": ""
      },
      {
        "name": "is_favorite",
        "displayName": "Is Favorite",
        "type": "boolean"
      },
      {
        "name": "parent_id",
        "displayName": "Parent ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "view_style",
        "displayName": "View Style",
        "type": "options"
      },
      {
        "name": "projectUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "sectionProject",
        "displayName": "Project Name or ID",
        "type": "resourceLocator"
      },
      {
        "name": "sectionName",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "sectionOptions",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "sectionUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "sectionFilters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "project_id",
        "displayName": "Project Name or ID",
        "type": "options"
      },
      {
        "name": "commentId",
        "displayName": "Comment ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "commentTaskId",
        "displayName": "Task ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "commentContent",
        "displayName": "Content",
        "type": "string"
      },
      {
        "name": "commentUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "commentFilters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "task_id",
        "displayName": "Task ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "labelName",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "labelOptions",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "labelUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "reminderId",
        "displayName": "Reminder ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "itemId",
        "displayName": "Task ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "dueDateType",
        "displayName": "Due Date Type",
        "type": "options"
      },
      {
        "name": "natural_language_representation",
        "displayName": "Natural Language Representation",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g., \"tomorrow 2pm\", \"monday 10:45am\""
      },
      {
        "name": "date",
        "displayName": "Date",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "YYYY-MM-DD"
      },
      {
        "name": "datetime",
        "displayName": "Date Time",
        "type": "dateTime",
        "default": "",
        "required": true
      },
      {
        "name": "timezone",
        "displayName": "Timezone",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g., \"America/New_York\""
      },
      {
        "name": "reminderOptions",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "minute_offset",
        "displayName": "Minute Offset",
        "type": "number",
        "default": "0"
      },
      {
        "name": "notify_uid",
        "displayName": "Notify User ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "reminderUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "due",
        "displayName": "Due",
        "type": "collection",
        "placeholder": "Add Due Date Option"
      },
      {
        "name": "string",
        "displayName": "Natural Language",
        "type": "string",
        "default": "",
        "placeholder": "e.g., \"tomorrow 2pm\", \"monday 10:45am\""
      }
    ]
  },
  "TogglTrigger": {
    "name": "TogglTrigger",
    "displayName": "TogglTrigger",
    "type": "n8n-nodes-base.TogglTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Toggl events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'togglApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "togglTrigger",
        "displayName": "Toggl Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Totp": {
    "name": "Totp",
    "displayName": "Totp",
    "type": "n8n-nodes-base.Totp",
    "subtitle": "={{ $parameter[\"operation\"] }}",
    "description": "Generate a time-based one-time password",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'totpApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "totp",
        "displayName": "TOTP"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "algorithm",
        "displayName": "Algorithm",
        "type": "options",
        "default": "SHA1"
      },
      {
        "name": "digits",
        "displayName": "Digits",
        "type": "number",
        "default": "6"
      },
      {
        "name": "period",
        "displayName": "Period",
        "type": "number",
        "default": "30"
      }
    ],
    "version": 1.0
  },
  "TravisCi": {
    "name": "TravisCi",
    "displayName": "TravisCi",
    "type": "n8n-nodes-base.TravisCi",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume TravisCI API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'travisCiApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "travisCi",
        "displayName": "TravisCI"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Trello": {
    "name": "Trello",
    "displayName": "Trello",
    "type": "n8n-nodes-base.Trello",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Create, change and delete boards and cards",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'trelloApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "trello",
        "displayName": "Trello"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "TrelloTrigger": {
    "name": "TrelloTrigger",
    "displayName": "TrelloTrigger",
    "type": "n8n-nodes-base.TrelloTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Trello events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'trelloApi', required: true, },",
    "webhooks": "{ name: 'setup', httpMethod: 'HEAD', responseMode: 'onReceived', path: 'webhook', }, { name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "trelloTrigger",
        "displayName": "Trello Trigger"
      },
      {
        "name": "id",
        "displayName": "Model ID",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "4d5ea62fd76aa1136000000c"
      }
    ],
    "version": 1.0
  },
  "Twake": {
    "name": "Twake",
    "displayName": "Twake",
    "type": "n8n-nodes-base.Twake",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Twake API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'twakeCloudApi', required: true, // displayOptions: { // show: { // twakeVersion: [ // 'cloud', //",
    "webhooks": [],
    "properties": [
      {
        "name": "twake",
        "displayName": "Twake"
      },
      {
        "name": "twakeVersion",
        "displayName": "Twake Version",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "channelId",
        "displayName": "Channel Name or ID",
        "type": "options"
      },
      {
        "name": "content",
        "displayName": "Content",
        "type": "string",
        "required": true
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "senderIcon",
        "displayName": "Sender Icon",
        "type": "string",
        "default": ""
      },
      {
        "name": "senderName",
        "displayName": "Sender Name",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "Twilio": {
    "name": "Twilio",
    "displayName": "Twilio",
    "type": "n8n-nodes-base.Twilio",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Send SMS and WhatsApp messages or make phone calls",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'twilioApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "twilio",
        "displayName": "Twilio"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "from",
        "displayName": "From",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "+14155238886"
      },
      {
        "name": "to",
        "displayName": "To",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "+14155238886"
      },
      {
        "name": "toWhatsapp",
        "displayName": "To Whatsapp",
        "type": "boolean"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "twiml",
        "displayName": "Use TwiML",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "statusCallback",
        "displayName": "Status Callback",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "TwilioTrigger": {
    "name": "TwilioTrigger",
    "displayName": "TwilioTrigger",
    "type": "n8n-nodes-base.TwilioTrigger",
    "subtitle": "=Updates: {{$parameter[\"updates\"].join(\", \")}}",
    "description": "Starts the workflow on a Twilio update",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'twilioApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "twilioTrigger",
        "displayName": "Twilio Trigger"
      },
      {
        "name": "updates",
        "displayName": "Trigger On",
        "type": "multiOptions"
      },
      {
        "name": "callTriggerNotice",
        "displayName": "The 'New Call' event may take up to thirty minutes to be triggered",
        "type": "notice",
        "default": ""
      }
    ]
  },
  "Twist": {
    "name": "Twist",
    "displayName": "Twist",
    "type": "n8n-nodes-base.Twist",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Twist API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'twistOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "twist",
        "displayName": "Twist"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Twitter": {
    "name": "twitter",
    "displayName": "X (Formerly Twitter)",
    "type": "n8n-nodes-base.Twitter",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the X API",
    "group": [
      "output"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "twitter",
        "displayName": "X (Formerly Twitter)"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "TypeformTrigger": {
    "name": "TypeformTrigger",
    "displayName": "TypeformTrigger",
    "type": "n8n-nodes-base.TypeformTrigger",
    "subtitle": "=Form ID: {{$parameter[\"formId\"]}}",
    "description": "Starts the workflow on a Typeform form submission",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'typeformApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "typeformTrigger",
        "displayName": "Typeform Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "formId",
        "displayName": "Form Name or ID",
        "type": "options"
      },
      {
        "name": "simplifyAnswers",
        "displayName": "Simplify Answers",
        "type": "boolean"
      },
      {
        "name": "onlyAnswers",
        "displayName": "Only Answers",
        "type": "boolean"
      }
    ]
  },
  "UnleashedSoftware": {
    "name": "UnleashedSoftware",
    "displayName": "UnleashedSoftware",
    "type": "n8n-nodes-base.UnleashedSoftware",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume Unleashed Software API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'unleashedSoftwareApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "unleashedSoftware",
        "displayName": "Unleashed Software"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Uplead": {
    "name": "Uplead",
    "displayName": "Uplead",
    "type": "n8n-nodes-base.Uplead",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume Uplead API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'upleadApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "uplead",
        "displayName": "Uplead"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "UProc": {
    "name": "UProc",
    "displayName": "UProc",
    "type": "n8n-nodes-base.UProc",
    "subtitle": "={{$parameter[\"tool\"]}}",
    "description": "Consume uProc API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'uprocApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "uproc",
        "displayName": "uProc"
      },
      {
        "name": "additionalOptions",
        "displayName": "Additional Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "dataWebhook",
        "displayName": "Data Webhook",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "UptimeRobot": {
    "name": "UptimeRobot",
    "displayName": "UptimeRobot",
    "type": "n8n-nodes-base.UptimeRobot",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume UptimeRobot API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'uptimeRobotApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "uptimeRobot",
        "displayName": "UptimeRobot"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "UrlScanIo": {
    "name": "UrlScanIo",
    "displayName": "UrlScanIo",
    "type": "n8n-nodes-base.UrlScanIo",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Provides various utilities for monitoring websites like health checks or screenshots",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'urlScanIoApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "urlScanIo",
        "displayName": "urlscan.io"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Vero": {
    "name": "Vero",
    "displayName": "Vero",
    "type": "n8n-nodes-base.Vero",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Vero API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'veroApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "vero",
        "displayName": "Vero"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Vonage": {
    "name": "Vonage",
    "displayName": "Vonage",
    "type": "n8n-nodes-base.Vonage",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Vonage API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'vonageApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "vonage",
        "displayName": "Vonage"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "from",
        "displayName": "From",
        "type": "string"
      },
      {
        "name": "to",
        "displayName": "To",
        "type": "string"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field"
      },
      {
        "name": "body",
        "displayName": "Body",
        "type": "string"
      },
      {
        "name": "udh",
        "displayName": "UDH",
        "type": "string"
      },
      {
        "name": "title",
        "displayName": "Title"
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string"
      },
      {
        "name": "validity",
        "displayName": "Validity (in minutes)",
        "type": "number",
        "default": "0"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string"
      },
      {
        "name": "vcard",
        "displayName": "VCard",
        "type": "string"
      },
      {
        "name": "vcal",
        "displayName": "VCal",
        "type": "string"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "account-ref",
        "displayName": "Account Ref",
        "type": "string",
        "default": ""
      },
      {
        "name": "callback",
        "displayName": "Callback",
        "type": "string",
        "default": ""
      },
      {
        "name": "client-ref",
        "displayName": "Client Ref",
        "type": "string",
        "default": ""
      },
      {
        "name": "message-class",
        "displayName": "Message Class",
        "type": "options"
      },
      {
        "name": "protocol-id",
        "displayName": "Protocol ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "status-report-req",
        "displayName": "Status Report Req",
        "type": "boolean"
      },
      {
        "name": "ttl",
        "displayName": "TTL (in Minutes)",
        "type": "number",
        "default": "4320"
      }
    ],
    "version": 1.0
  },
  "Wait": {
    "name": "Wait",
    "displayName": "Wait",
    "type": "n8n-nodes-base.Wait",
    "subtitle": null,
    "description": "The time to wait",
    "group": [
      "organization"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": "{ ...defaultWebhookDescription, responseData: '={{$parameter[\"responseData\"",
    "properties": [
      {
        "name": "amount",
        "displayName": "Wait Amount",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "unit",
        "displayName": "Wait Unit",
        "type": "options"
      },
      {
        "name": "limitWaitTime",
        "displayName": "Limit Wait Time",
        "type": "boolean"
      },
      {
        "name": "limitType",
        "displayName": "Limit Type",
        "type": "options",
        "default": "afterTimeInterval"
      },
      {
        "name": "resumeAmount",
        "displayName": "Amount",
        "type": "number"
      },
      {
        "name": "resumeUnit",
        "displayName": "Unit",
        "type": "options"
      },
      {
        "name": "maxDateAndTime",
        "displayName": "Max Date and Time",
        "type": "dateTime"
      },
      {
        "name": "webhookSuffix",
        "displayName": "Webhook Suffix",
        "type": "string",
        "default": "",
        "placeholder": "webhook"
      },
      {
        "name": "wait",
        "displayName": "Wait"
      },
      {
        "name": "resume",
        "displayName": "Resume",
        "type": "options"
      },
      {
        "name": "incomingAuthentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "dateTime",
        "displayName": "Date and Time",
        "type": "dateTime"
      },
      {
        "name": "webhookNotice",
        "displayName": "The webhook URL will be generated at run time. It can be referenced with the <strong>$execution.resumeUrl</strong> variable. Send it somewhere before getting to this node. <a href=\"https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.wait/?utm_source=n8n_app&utm_medium=node_settings_modal-credential_link&utm_campaign=n8n-nodes-base.wait\" target=\"_blank\">More info</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "formNotice",
        "displayName": "The form url will be generated at run time. It can be referenced with the <strong>$execution.resumeFormUrl</strong> variable. Send it somewhere before getting to this node. <a href=\"https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.wait/?utm_source=n8n_app&utm_medium=node_settings_modal-credential_link&utm_campaign=n8n-nodes-base.wait\" target=\"_blank\">More info</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "multipleMethods",
        "displayName": "Allow Multiple HTTP Methods",
        "type": "boolean"
      },
      {
        "name": "httpMethod",
        "displayName": "HTTP Methods",
        "type": "multiOptions"
      },
      {
        "name": "path",
        "displayName": "Path",
        "type": "string",
        "default": "",
        "placeholder": "webhook"
      },
      {
        "name": "webhookStreamingNotice",
        "displayName": "Insert a node that supports streaming (e.g. \\",
        "type": "notice"
      },
      {
        "name": "contentTypeNotice",
        "displayName": "If you are sending back a response, add a \"Content-Type\" response header with the appropriate value to avoid unexpected behavior",
        "type": "notice",
        "default": ""
      }
    ]
  },
  "Webflow": {
    "name": "webflow",
    "displayName": "Webflow",
    "type": "n8n-nodes-base.Webflow",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Webflow API",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "webflow",
        "displayName": "Webflow"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "WebflowTrigger": {
    "name": "webflowTrigger",
    "displayName": "Webflow Trigger",
    "type": "n8n-nodes-base.WebflowTrigger",
    "subtitle": null,
    "description": "Handle Webflow events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "webflowTrigger",
        "displayName": "Webflow Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "site",
        "displayName": "Site Name or ID",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "required": true
      }
    ]
  },
  "Webhook": {
    "name": "Webhook",
    "displayName": "Webhook",
    "type": "n8n-nodes-base.Webhook",
    "subtitle": null,
    "description": "Starts the workflow when a webhook is called",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": [],
    "credentials": [],
    "webhooks": "defaultWebhookDescription",
    "properties": [
      {
        "name": "multipleMethods",
        "displayName": "Allow Multiple HTTP Methods",
        "type": "boolean"
      },
      {
        "name": "httpMethod",
        "displayName": "HTTP Methods",
        "type": "multiOptions"
      },
      {
        "name": "path",
        "displayName": "Path",
        "type": "string",
        "default": "",
        "placeholder": "webhook"
      },
      {
        "name": "webhookNotice",
        "displayName": "Insert a \\",
        "type": "notice"
      },
      {
        "name": "webhookStreamingNotice",
        "displayName": "Insert a node that supports streaming (e.g. \\",
        "type": "notice"
      },
      {
        "name": "contentTypeNotice",
        "displayName": "If you are sending back a response, add a \"Content-Type\" response header with the appropriate value to avoid unexpected behavior",
        "type": "notice",
        "default": ""
      }
    ]
  },
  "Wekan": {
    "name": "Wekan",
    "displayName": "Wekan",
    "type": "n8n-nodes-base.Wekan",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Wekan API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'wekanApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "wekan",
        "displayName": "Wekan"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "WhatsApp": {
    "name": "WhatsApp",
    "displayName": "WhatsApp",
    "type": "n8n-nodes-base.WhatsApp",
    "subtitle": "={{ $parameter[\"resource\"] + \": \" + $parameter[\"operation\"] }}",
    "description": "Access WhatsApp API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: WHATSAPP_CREDENTIALS_TYPE, required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "whatsApp",
        "displayName": "WhatsApp Business Cloud"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "WhatsAppTrigger": {
    "name": "WhatsAppTrigger",
    "displayName": "WhatsAppTrigger",
    "type": "n8n-nodes-base.WhatsAppTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle WhatsApp events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'whatsAppTriggerApi', required: true, },",
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', path: 'webhook', }, { name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "whatsAppTrigger",
        "displayName": "WhatsApp Trigger"
      },
      {
        "name": "whatsAppNotice",
        "displayName": "Due to Facebook API limitations, you can use just one WhatsApp trigger for each Facebook App",
        "type": "notice",
        "default": ""
      },
      {
        "name": "updates",
        "displayName": "Trigger On",
        "type": "multiOptions",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "messageStatusUpdates",
        "displayName": "Receive Message Status Updates",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "Wise": {
    "name": "Wise",
    "displayName": "Wise",
    "type": "n8n-nodes-base.Wise",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Wise API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'wiseApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "wise",
        "displayName": "Wise"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "WiseTrigger": {
    "name": "WiseTrigger",
    "displayName": "WiseTrigger",
    "type": "n8n-nodes-base.WiseTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Handle Wise events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'wiseApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "wiseTrigger",
        "displayName": "Wise Trigger"
      },
      {
        "name": "profileId",
        "displayName": "Profile Name or ID",
        "type": "options",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "",
        "required": true
      }
    ],
    "version": 1.0
  },
  "WooCommerce": {
    "name": "WooCommerce",
    "displayName": "WooCommerce",
    "type": "n8n-nodes-base.WooCommerce",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume WooCommerce API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'wooCommerceApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "wooCommerce",
        "displayName": "WooCommerce"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "WooCommerceTrigger": {
    "name": "WooCommerceTrigger",
    "displayName": "WooCommerceTrigger",
    "type": "n8n-nodes-base.WooCommerceTrigger",
    "subtitle": null,
    "description": "Handle WooCommerce events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'wooCommerceApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "wooCommerceTrigger",
        "displayName": "WooCommerce Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "",
        "required": true
      }
    ],
    "version": 1.0
  },
  "Wordpress": {
    "name": "Wordpress",
    "displayName": "Wordpress",
    "type": "n8n-nodes-base.Wordpress",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Wordpress API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'wordpressApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "wordpress",
        "displayName": "Wordpress"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "WorkableTrigger": {
    "name": "WorkableTrigger",
    "displayName": "WorkableTrigger",
    "type": "n8n-nodes-base.WorkableTrigger",
    "subtitle": "={{$parameter[\"triggerOn\"]}}",
    "description": "Starts the workflow when Workable events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'workableApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "workableTrigger",
        "displayName": "Workable Trigger"
      },
      {
        "name": "triggerOn",
        "displayName": "Trigger On",
        "type": "options"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "job",
        "displayName": "Job Name or ID",
        "type": "options"
      },
      {
        "name": "stage",
        "displayName": "Stage Name or ID",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "WorkflowTrigger": {
    "name": "WorkflowTrigger",
    "displayName": "WorkflowTrigger",
    "type": "n8n-nodes-base.WorkflowTrigger",
    "subtitle": null,
    "description": "Triggers based on various lifecycle events, like when a workflow is activated",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "workflowTrigger",
        "displayName": "Workflow Trigger"
      },
      {
        "name": "oldVersionNotice",
        "displayName": "This node is deprecated and would not be updated in the future. Please use 'n8n Trigger' node instead.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions",
        "required": true
      }
    ],
    "version": 1.0
  },
  "WriteBinaryFile": {
    "name": "WriteBinaryFile",
    "displayName": "WriteBinaryFile",
    "type": "n8n-nodes-base.WriteBinaryFile",
    "subtitle": null,
    "description": "Writes a binary file to disk",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "writeBinaryFile",
        "displayName": "Write Binary File"
      },
      {
        "name": "fileName",
        "displayName": "File Name",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "/data/example.jpg"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "append",
        "displayName": "Append",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "WufooTrigger": {
    "name": "WufooTrigger",
    "displayName": "WufooTrigger",
    "type": "n8n-nodes-base.WufooTrigger",
    "subtitle": null,
    "description": "Handle Wufoo events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'wufooApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "wufooTrigger",
        "displayName": "Wufoo Trigger"
      },
      {
        "name": "form",
        "displayName": "Forms Name or ID",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "onlyAnswers",
        "displayName": "Only Answers",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Xero": {
    "name": "Xero",
    "displayName": "Xero",
    "type": "n8n-nodes-base.Xero",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Xero API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'xeroOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "xero",
        "displayName": "Xero"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Xml": {
    "name": "Xml",
    "displayName": "Xml",
    "type": "n8n-nodes-base.Xml",
    "subtitle": "={{$parameter[\"mode\"]===\"jsonToxml\" ? \"JSON to XML\" : \"XML to JSON\"}}",
    "description": "Convert data from and to XML",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "xml",
        "displayName": "XML"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "xmlNotice",
        "displayName": "If your XML is inside a binary file, use the 'Extract from File' node to convert it to text first",
        "type": "notice",
        "default": ""
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "allowSurrogateChars",
        "displayName": "Allow Surrogate Chars",
        "type": "boolean"
      },
      {
        "name": "attrkey",
        "displayName": "Attribute Key",
        "type": "string",
        "default": "$"
      },
      {
        "name": "cdata",
        "displayName": "Cdata",
        "type": "boolean"
      },
      {
        "name": "charkey",
        "displayName": "Character Key",
        "type": "string",
        "default": "_"
      },
      {
        "name": "headless",
        "displayName": "Headless",
        "type": "boolean"
      },
      {
        "name": "rootName",
        "displayName": "Root Name",
        "type": "string",
        "default": "root"
      },
      {
        "name": "explicitArray",
        "displayName": "Explicit Array",
        "type": "boolean"
      },
      {
        "name": "explicitRoot",
        "displayName": "Explicit Root",
        "type": "boolean"
      },
      {
        "name": "ignoreAttrs",
        "displayName": "Ignore Attributes",
        "type": "boolean"
      },
      {
        "name": "mergeAttrs",
        "displayName": "Merge Attributes",
        "type": "boolean"
      },
      {
        "name": "normalize",
        "displayName": "Normalize",
        "type": "boolean"
      },
      {
        "name": "normalizeTags",
        "displayName": "Normalize Tags",
        "type": "boolean"
      },
      {
        "name": "trim",
        "displayName": "Trim",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Yourls": {
    "name": "Yourls",
    "displayName": "Yourls",
    "type": "n8n-nodes-base.Yourls",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Yourls API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'yourlsApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "yourls",
        "displayName": "Yourls"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Zammad": {
    "name": "Zammad",
    "displayName": "Zammad",
    "type": "n8n-nodes-base.Zammad",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Zammad API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'zammadBasicAuthApi', required: true, testedBy: 'zammadBasicAuthApiTest', displayOptions: { show: { authentication: ['basicAuth'",
    "webhooks": [],
    "properties": [
      {
        "name": "zammad",
        "displayName": "Zammad"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Zendesk": {
    "name": "Zendesk",
    "displayName": "Zendesk",
    "type": "n8n-nodes-base.Zendesk",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Zendesk API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'zendeskApi', required: true, displayOptions: { show: { authentication: ['apiToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "zendesk",
        "displayName": "Zendesk"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ZendeskTrigger": {
    "name": "ZendeskTrigger",
    "displayName": "ZendeskTrigger",
    "type": "n8n-nodes-base.ZendeskTrigger",
    "subtitle": null,
    "description": "Handle Zendesk events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'zendeskApi', required: true, displayOptions: { show: { authentication: ['apiToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "zendeskTrigger",
        "displayName": "Zendesk Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "service",
        "displayName": "Service",
        "type": "options",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "fields",
        "displayName": "Field Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "conditions",
        "displayName": "Conditions",
        "type": "fixedCollection",
        "placeholder": "Add Condition"
      },
      {
        "name": "all",
        "displayName": "All"
      },
      {
        "name": "any",
        "displayName": "Any"
      }
    ],
    "version": 1.0
  },
  "ZohoCrm": {
    "name": "ZohoCrm",
    "displayName": "ZohoCrm",
    "type": "n8n-nodes-base.ZohoCrm",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Zoho CRM API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'zohoOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "zohoCrm",
        "displayName": "Zoho CRM"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Zoom": {
    "name": "Zoom",
    "displayName": "Zoom",
    "type": "n8n-nodes-base.Zoom",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Zoom API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ // create a JWT app on Zoom Marketplace //https://marketplace.zoom.us/develop/create //get the JWT token as access token name: 'zoomApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "zoom",
        "displayName": "Zoom"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Zulip": {
    "name": "Zulip",
    "displayName": "Zulip",
    "type": "n8n-nodes-base.Zulip",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Zulip API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'zulipApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "zulip",
        "displayName": "Zulip"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "AirtableV1": {
    "name": "AirtableV1",
    "displayName": "AirtableV1",
    "type": "n8n-nodes-base.AirtableV1",
    "subtitle": null,
    "description": "Read, update, write and delete data from Airtable",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'airtableApi', required: true, displayOptions: { show: { authentication: ['airtableApi'",
    "webhooks": [],
    "properties": [
      {
        "name": "airtable",
        "displayName": "Airtable"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "deprecated",
        "displayName": "This type of connection (API Key) was deprecated and can't be used anymore. Please create a new credential of type 'Access Token' instead.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "application",
        "displayName": "Base",
        "type": "resourceLocator"
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string",
        "placeholder": "https://airtable.com/app12DiScdfes/tblAAAAAAAAAAAAA/viwHdfasdfeieg5p"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "resourceLocator"
      },
      {
        "name": "addAllFields",
        "displayName": "Add All Fields",
        "type": "boolean"
      },
      {
        "name": "fields",
        "displayName": "Fields",
        "type": "string"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "downloadAttachments",
        "displayName": "Download Attachments",
        "type": "boolean"
      },
      {
        "name": "downloadFieldNames",
        "displayName": "Download Fields",
        "type": "string",
        "required": true
      },
      {
        "name": "additionalOptions",
        "displayName": "Additional Options",
        "type": "collection"
      },
      {
        "name": "filterByFormula",
        "displayName": "Filter By Formula",
        "type": "string",
        "default": ""
      },
      {
        "name": "sort",
        "displayName": "Sort",
        "type": "fixedCollection",
        "placeholder": "Add Sort Rule"
      },
      {
        "name": "property",
        "displayName": "Property",
        "type": "string",
        "default": ""
      },
      {
        "name": "direction",
        "displayName": "Direction",
        "type": "options"
      },
      {
        "name": "view",
        "displayName": "View",
        "type": "string",
        "default": "",
        "placeholder": "All Stories"
      },
      {
        "name": "updateAllFields",
        "displayName": "Update All Fields",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "bulkSize",
        "displayName": "Bulk Size",
        "type": "number",
        "typeOptions": {
          "minValue": 1,
          "maxValue": 10
        }
      },
      {
        "name": "ignoreFields",
        "displayName": "Ignore Fields",
        "type": "string"
      },
      {
        "name": "typecast",
        "displayName": "Typecast",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "AirtableV2": {
    "name": "AirtableV2",
    "displayName": "AirtableV2",
    "type": "n8n-nodes-base.AirtableV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "airtable",
        "displayName": "Airtable"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "AwsCertificateManager": {
    "name": "AwsCertificateManager",
    "displayName": "AwsCertificateManager",
    "type": "n8n-nodes-base.AwsCertificateManager",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to AWS Certificate Manager",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsCertificateManager",
        "displayName": "AWS Certificate Manager"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "AwsCognito": {
    "name": "AwsCognito",
    "displayName": "AwsCognito",
    "type": "n8n-nodes-base.AwsCognito",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to AWS Cognito",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsCognito",
        "displayName": "AWS Cognito"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "user"
      }
    ],
    "version": 1.0
  },
  "AwsComprehend": {
    "name": "AwsComprehend",
    "displayName": "AwsComprehend",
    "type": "n8n-nodes-base.AwsComprehend",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to Amazon Comprehend",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsComprehend",
        "displayName": "AWS Comprehend"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "languageCode",
        "displayName": "Language Code",
        "type": "options"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "default": ""
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "endpointArn",
        "displayName": "Endpoint Arn",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "AwsDynamoDB": {
    "name": "AwsDynamoDB",
    "displayName": "AwsDynamoDB",
    "type": "n8n-nodes-base.AwsDynamoDB",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the AWS DynamoDB API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsDynamoDb",
        "displayName": "AWS DynamoDB"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "AwsElb": {
    "name": "AwsElb",
    "displayName": "AwsElb",
    "type": "n8n-nodes-base.AwsElb",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to AWS ELB API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsElb",
        "displayName": "AWS ELB"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "AwsIam": {
    "name": "AwsIam",
    "displayName": "AwsIam",
    "type": "n8n-nodes-base.AwsIam",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Interacts with Amazon IAM",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsIam",
        "displayName": "AWS IAM"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "user"
      }
    ],
    "version": 1.0
  },
  "AwsRekognition": {
    "name": "AwsRekognition",
    "displayName": "AwsRekognition",
    "type": "n8n-nodes-base.AwsRekognition",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to AWS Rekognition",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsRekognition",
        "displayName": "AWS Rekognition"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "binaryData",
        "displayName": "Binary File",
        "type": "boolean",
        "required": true
      },
      {
        "name": "bucket",
        "displayName": "Bucket"
      },
      {
        "name": "name",
        "displayName": "Name"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "regionsOfInterestUi",
        "displayName": "Regions of Interest",
        "type": "fixedCollection"
      },
      {
        "name": "regionsOfInterestValues",
        "displayName": "Region of Interest",
        "type": "number",
        "default": "0"
      },
      {
        "name": "left",
        "displayName": "Left",
        "type": "number",
        "default": "0"
      },
      {
        "name": "top",
        "displayName": "Top",
        "type": "number",
        "default": "0"
      },
      {
        "name": "Width",
        "displayName": "Width",
        "type": "number",
        "default": "0"
      },
      {
        "name": "version",
        "displayName": "Version"
      },
      {
        "name": "wordFilterUi",
        "displayName": "Word Filter",
        "type": "collection"
      },
      {
        "name": "MinBoundingBoxHeight",
        "displayName": "Min Bounding Box Height",
        "type": "number",
        "default": "0"
      },
      {
        "name": "MinBoundingBoxWidth",
        "displayName": "Min Bounding Box Width",
        "type": "number",
        "default": "0"
      },
      {
        "name": "MinConfidence",
        "displayName": "Min Confidence",
        "type": "number",
        "default": "0"
      },
      {
        "name": "maxLabels",
        "displayName": "Max Labels",
        "type": "number"
      },
      {
        "name": "minConfidence",
        "displayName": "Min Confidence",
        "type": "number"
      },
      {
        "name": "attributes",
        "displayName": "Attributes",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "AwsS3": {
    "name": "awsS3",
    "displayName": "AwsS3",
    "type": "n8n-nodes-base.AwsS3",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to AWS S3",
    "group": [
      "output"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "awsS3",
        "displayName": "AwsS3"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "AwsSes": {
    "name": "AwsSes",
    "displayName": "AwsSes",
    "type": "n8n-nodes-base.AwsSes",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to AWS SES",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsSes",
        "displayName": "AWS SES"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "fromEmailAddress",
        "displayName": "From Email",
        "type": "string"
      },
      {
        "name": "templateName",
        "displayName": "Template Name",
        "type": "string"
      },
      {
        "name": "templateContent",
        "displayName": "Template Content",
        "type": "string"
      },
      {
        "name": "templateSubject",
        "displayName": "Template Subject",
        "type": "string"
      },
      {
        "name": "successRedirectionURL",
        "displayName": "Success Redirection URL",
        "type": "string"
      },
      {
        "name": "failureRedirectionURL",
        "displayName": "Failure Redirection URL",
        "type": "string"
      },
      {
        "name": "email",
        "displayName": "Email",
        "type": "string",
        "placeholder": "name@email.com"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "configurationSetName",
        "displayName": "Configuration Set Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "isBodyHtml",
        "displayName": "Is Body HTML",
        "type": "boolean"
      },
      {
        "name": "subject",
        "displayName": "Subject",
        "type": "string"
      },
      {
        "name": "body",
        "displayName": "Body",
        "type": "string"
      },
      {
        "name": "fromEmail",
        "displayName": "From Email",
        "type": "string"
      },
      {
        "name": "toAddresses",
        "displayName": "To Addresses",
        "type": "string"
      },
      {
        "name": "templateDataUi",
        "displayName": "Template Data",
        "type": "fixedCollection",
        "placeholder": "Add Data"
      },
      {
        "name": "templateDataValues",
        "displayName": "Data",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "bccAddresses",
        "displayName": "Bcc Addresses",
        "type": "string"
      },
      {
        "name": "ccAddresses",
        "displayName": "Cc Addresses",
        "type": "string"
      },
      {
        "name": "replyToAddresses",
        "displayName": "Reply To Addresses",
        "type": "string"
      },
      {
        "name": "returnPath",
        "displayName": "Return Path",
        "type": "string",
        "default": ""
      },
      {
        "name": "returnPathArn",
        "displayName": "Return Path ARN",
        "type": "string",
        "default": ""
      },
      {
        "name": "sourceArn",
        "displayName": "Source ARN",
        "type": "string",
        "default": ""
      },
      {
        "name": "subjectPart",
        "displayName": "Subject Part",
        "type": "string"
      },
      {
        "name": "htmlPart",
        "displayName": "Html Part",
        "type": "string"
      },
      {
        "name": "textPart",
        "displayName": "Text Part",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "AwsSqs": {
    "name": "AwsSqs",
    "displayName": "AwsSqs",
    "type": "n8n-nodes-base.AwsSqs",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Sends messages to AWS SQS",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsSqs",
        "displayName": "AWS SQS"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "queue",
        "displayName": "Queue Name or ID",
        "type": "options"
      },
      {
        "name": "queueType",
        "displayName": "Queue Type",
        "type": "options"
      },
      {
        "name": "sendInputData",
        "displayName": "Send Input Data",
        "type": "boolean"
      },
      {
        "name": "message",
        "displayName": "Message",
        "type": "string"
      },
      {
        "name": "messageGroupId",
        "displayName": "Message Group ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "delaySeconds",
        "displayName": "Delay Seconds",
        "type": "number"
      },
      {
        "name": "messageAttributes",
        "displayName": "Message Attributes",
        "type": "fixedCollection",
        "placeholder": "Add Attribute"
      },
      {
        "name": "binary",
        "displayName": "Binary",
        "type": "string",
        "default": ""
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data"
      },
      {
        "name": "number",
        "displayName": "Number",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "number",
        "default": "0"
      },
      {
        "name": "string",
        "displayName": "String",
        "type": "string",
        "default": ""
      },
      {
        "name": "messageDeduplicationId",
        "displayName": "Message Deduplication ID",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "AwsTextract": {
    "name": "AwsTextract",
    "displayName": "AwsTextract",
    "type": "n8n-nodes-base.AwsTextract",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Sends data to Amazon Textract",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsTextract",
        "displayName": "AWS Textract"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Data Field Name",
        "type": "string",
        "default": "data"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "AwsTranscribe": {
    "name": "AwsTranscribe",
    "displayName": "AwsTranscribe",
    "type": "n8n-nodes-base.AwsTranscribe",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to AWS Transcribe",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsTranscribe",
        "displayName": "AWS Transcribe"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "transcriptionJobName",
        "displayName": "Job Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "mediaFileUri",
        "displayName": "Media File URI",
        "type": "string",
        "default": ""
      },
      {
        "name": "detectLanguage",
        "displayName": "Detect Language",
        "type": "boolean"
      },
      {
        "name": "languageCode",
        "displayName": "Language",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "channelIdentification",
        "displayName": "Channel Identification",
        "type": "boolean"
      },
      {
        "name": "maxAlternatives",
        "displayName": "Max Alternatives",
        "type": "number",
        "default": "2",
        "typeOptions": {
          "minValue": 2,
          "maxValue": 10
        }
      },
      {
        "name": "maxSpeakerLabels",
        "displayName": "Max Speaker Labels",
        "type": "number",
        "default": "2",
        "typeOptions": {
          "minValue": 2,
          "maxValue": 10
        }
      },
      {
        "name": "vocabularyName",
        "displayName": "Vocabulary Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "vocabularyFilterName",
        "displayName": "Vocabulary Filter Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "vocabularyFilterMethod",
        "displayName": "Vocabulary Filter Method",
        "type": "options"
      },
      {
        "name": "returnTranscript",
        "displayName": "Return Transcript",
        "type": "boolean"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number",
        "default": "20",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "jobNameContains",
        "displayName": "Job Name Contains",
        "type": "string",
        "default": ""
      },
      {
        "name": "status",
        "displayName": "Status",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "AwsS3V1": {
    "name": "AwsS3V1",
    "displayName": "AwsS3V1",
    "type": "n8n-nodes-base.AwsS3V1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to AWS S3",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsS3",
        "displayName": "AWS S3"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "AwsS3V2": {
    "name": "AwsS3V2",
    "displayName": "AwsS3V2",
    "type": "n8n-nodes-base.AwsS3V2",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Sends data to AWS S3",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'aws', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "awsS3",
        "displayName": "AWS S3"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 2.0
  },
  "CiscoWebex": {
    "name": "CiscoWebex",
    "displayName": "CiscoWebex",
    "type": "n8n-nodes-base.CiscoWebex",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Cisco Webex API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'ciscoWebexOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "ciscoWebex",
        "displayName": "Webex by Cisco"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "CiscoWebexTrigger": {
    "name": "CiscoWebexTrigger",
    "displayName": "CiscoWebexTrigger",
    "type": "n8n-nodes-base.CiscoWebexTrigger",
    "subtitle": "={{$parameter[\"resource\"] + \":\" + $parameter[\"event\"]}}",
    "description": "Starts the workflow when Cisco Webex events occur.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'ciscoWebexOAuth2Api', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "ciscoWebexTrigger",
        "displayName": "Webex by Cisco Trigger"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "resolveData",
        "displayName": "Resolve Data",
        "type": "boolean"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "hasFiles",
        "displayName": "Has Files",
        "type": "boolean"
      },
      {
        "name": "isLocked",
        "displayName": "Is Locked",
        "type": "boolean"
      },
      {
        "name": "isModerator",
        "displayName": "Is Moderator",
        "type": "boolean"
      },
      {
        "name": "mentionedPeople",
        "displayName": "Mentioned People",
        "type": "string"
      },
      {
        "name": "messageId",
        "displayName": "Message ID",
        "type": "string"
      },
      {
        "name": "ownedBy",
        "displayName": "Owned By"
      },
      {
        "name": "personEmail",
        "displayName": "Person Email",
        "type": "string"
      },
      {
        "name": "personId",
        "displayName": "Person ID",
        "type": "string"
      },
      {
        "name": "roomId",
        "displayName": "Room ID",
        "type": "string"
      },
      {
        "name": "roomType",
        "displayName": "Room Type",
        "type": "options"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "callType",
        "displayName": "Call Type",
        "type": "options"
      },
      {
        "name": "personality",
        "displayName": "Personality",
        "type": "options"
      },
      {
        "name": "state",
        "displayName": "State",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "DateTimeV1": {
    "name": "DateTimeV1",
    "displayName": "DateTimeV1",
    "type": "n8n-nodes-base.DateTimeV1",
    "subtitle": "={{$parameter[\"action\"]}}",
    "description": "Allows you to manipulate date and time values",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "dateTime",
        "displayName": "Date & Time"
      },
      {
        "name": "action",
        "displayName": "Action",
        "type": "options"
      },
      {
        "name": "value",
        "displayName": "Value"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "custom",
        "displayName": "Custom Format"
      },
      {
        "name": "toFormat",
        "displayName": "To Format"
      },
      {
        "name": "options",
        "displayName": "Options"
      },
      {
        "name": "fromFormat",
        "displayName": "From Format",
        "type": "string",
        "default": ""
      },
      {
        "name": "fromTimezone",
        "displayName": "From Timezone Name or ID",
        "type": "options"
      },
      {
        "name": "toTimezone",
        "displayName": "To Timezone Name or ID",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation"
      },
      {
        "name": "duration",
        "displayName": "Duration"
      },
      {
        "name": "timeUnit",
        "displayName": "Time Unit"
      }
    ],
    "version": 1.0
  },
  "DateTimeV2": {
    "name": "DateTimeV2",
    "displayName": "DateTimeV2",
    "type": "n8n-nodes-base.DateTimeV2",
    "subtitle": null,
    "description": "Manipulate date and time values",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      }
    ],
    "version": 2.0
  },
  "DiscordV1": {
    "name": "DiscordV1",
    "displayName": "DiscordV1",
    "type": "n8n-nodes-base.DiscordV1",
    "subtitle": null,
    "description": "Sends data to Discord",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "discord",
        "displayName": "Discord"
      },
      {
        "name": "webhookUri",
        "displayName": "Webhook URL",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "https://discord.com/api/webhooks/ID/TOKEN"
      },
      {
        "name": "text",
        "displayName": "Content",
        "type": "string",
        "typeOptions": {
          "maxValue": 2000
        }
      },
      {
        "name": "options",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "allowedMentions",
        "displayName": "Allowed Mentions",
        "type": "json"
      },
      {
        "name": "attachments",
        "displayName": "Attachments",
        "type": "json"
      },
      {
        "name": "avatarUrl",
        "displayName": "Avatar URL",
        "type": "string",
        "default": ""
      },
      {
        "name": "components",
        "displayName": "Components",
        "type": "json"
      },
      {
        "name": "embeds",
        "displayName": "Embeds",
        "type": "json"
      },
      {
        "name": "flags",
        "displayName": "Flags",
        "type": "number",
        "default": ""
      },
      {
        "name": "payloadJson",
        "displayName": "JSON Payload",
        "type": "json"
      },
      {
        "name": "username",
        "displayName": "Username",
        "type": "string",
        "default": "",
        "placeholder": "User"
      },
      {
        "name": "tts",
        "displayName": "TTS",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "DiscordV2": {
    "name": "DiscordV2",
    "displayName": "DiscordV2",
    "type": "n8n-nodes-base.DiscordV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "discord",
        "displayName": "Discord"
      },
      {
        "name": "authentication",
        "displayName": "Connection Type",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "Elasticsearch": {
    "name": "Elasticsearch",
    "displayName": "Elasticsearch",
    "type": "n8n-nodes-base.Elasticsearch",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Elasticsearch API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'elasticsearchApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "elasticsearch",
        "displayName": "Elasticsearch"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ElasticSecurity": {
    "name": "ElasticSecurity",
    "displayName": "ElasticSecurity",
    "type": "n8n-nodes-base.ElasticSecurity",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Elastic Security API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'elasticSecurityApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "elasticSecurity",
        "displayName": "Elastic Security"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "EmailReadImapV1": {
    "name": "EmailReadImapV1",
    "displayName": "EmailReadImapV1",
    "type": "n8n-nodes-base.EmailReadImapV1",
    "subtitle": null,
    "description": "Triggers the workflow when a new email is received",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'imap', required: true, testedBy: 'imapConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "emailReadImap",
        "displayName": "Email Trigger (IMAP)"
      },
      {
        "name": "mailbox",
        "displayName": "Mailbox Name",
        "type": "string",
        "default": "INBOX"
      },
      {
        "name": "postProcessAction",
        "displayName": "Action",
        "type": "options"
      },
      {
        "name": "downloadAttachments",
        "displayName": "Download Attachments",
        "type": "boolean"
      },
      {
        "name": "format",
        "displayName": "Format",
        "type": "options"
      },
      {
        "name": "dataPropertyAttachmentsPrefixName",
        "displayName": "Property Prefix Name",
        "type": "string",
        "default": "attachment_"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "customEmailConfig",
        "displayName": "Custom Email Rules",
        "type": "string",
        "default": "[\"UNSEEN\"]"
      },
      {
        "name": "allowUnauthorizedCerts",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      },
      {
        "name": "forceReconnect",
        "displayName": "Force Reconnect",
        "type": "number",
        "default": "60"
      }
    ],
    "version": 1.0
  },
  "EmailReadImapV2": {
    "name": "EmailReadImapV2",
    "displayName": "EmailReadImapV2",
    "type": "n8n-nodes-base.EmailReadImapV2",
    "subtitle": null,
    "description": "Triggers the workflow when a new email is received",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'imap', required: true, testedBy: 'imapConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "emailReadImap",
        "displayName": "Email Trigger (IMAP)"
      },
      {
        "name": "mailbox",
        "displayName": "Mailbox Name",
        "type": "string",
        "default": "INBOX"
      },
      {
        "name": "postProcessAction",
        "displayName": "Action",
        "type": "options"
      },
      {
        "name": "downloadAttachments",
        "displayName": "Download Attachments",
        "type": "boolean"
      },
      {
        "name": "format",
        "displayName": "Format",
        "type": "options"
      },
      {
        "name": "dataPropertyAttachmentsPrefixName",
        "displayName": "Property Prefix Name",
        "type": "string",
        "default": "attachment_"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "customEmailConfig",
        "displayName": "Custom Email Rules",
        "type": "string",
        "default": "[\"UNSEEN\"]"
      },
      {
        "name": "forceReconnect",
        "displayName": "Force Reconnect Every Minutes",
        "type": "number",
        "default": "60"
      },
      {
        "name": "trackLastMessageId",
        "displayName": "Fetch Only New Emails",
        "type": "boolean"
      }
    ]
  },
  "EmailSendV1": {
    "name": "EmailSendV1",
    "displayName": "EmailSendV1",
    "type": "n8n-nodes-base.EmailSendV1",
    "subtitle": null,
    "description": "Sends an Email",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'smtp', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "emailSend",
        "displayName": "Send Email"
      },
      {
        "name": "fromEmail",
        "displayName": "From Email",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "admin@example.com"
      },
      {
        "name": "toEmail",
        "displayName": "To Email",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "info@example.com"
      },
      {
        "name": "ccEmail",
        "displayName": "CC Email",
        "type": "string",
        "default": "",
        "placeholder": "cc@example.com"
      },
      {
        "name": "bccEmail",
        "displayName": "BCC Email",
        "type": "string",
        "default": "",
        "placeholder": "bcc@example.com"
      },
      {
        "name": "subject",
        "displayName": "Subject",
        "type": "string",
        "default": "",
        "placeholder": "My subject line"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string"
      },
      {
        "name": "html",
        "displayName": "HTML",
        "type": "string"
      },
      {
        "name": "attachments",
        "displayName": "Attachments",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "allowUnauthorizedCerts",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      },
      {
        "name": "replyTo",
        "displayName": "Reply To",
        "type": "string",
        "default": "",
        "placeholder": "info@example.com"
      }
    ],
    "version": 1.0
  },
  "EmailSendV2": {
    "name": "EmailSendV2",
    "displayName": "EmailSendV2",
    "type": "n8n-nodes-base.EmailSendV2",
    "subtitle": null,
    "description": "Sends an email using SMTP protocol",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'smtp', required: true, testedBy: 'smtpConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "emailSend",
        "displayName": "Send Email"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden",
        "default": "email"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "default": "send"
      }
    ]
  },
  "Description": {
    "name": "Description",
    "displayName": "Description",
    "type": "n8n-nodes-base.Description",
    "subtitle": null,
    "description": "The expected output defined in your evaluation dataset, used as ground truth",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "setInputsNotice",
        "displayName": "For adding columns from your dataset to the evaluation results. Anything you add here will be displayed in the ‘evaluations’ tab, not the Google Sheet.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "inputs",
        "displayName": "Inputs",
        "type": "fixedCollection",
        "placeholder": "Add Input"
      },
      {
        "name": "values",
        "displayName": "Filter",
        "type": "string",
        "default": ""
      },
      {
        "name": "inputValue",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "credentials",
        "displayName": "Credentials",
        "type": "credentials",
        "default": ""
      },
      {
        "name": "outputs",
        "displayName": "Outputs",
        "type": "fixedCollection",
        "placeholder": "Add Output"
      },
      {
        "name": "outputValue",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "notice",
        "displayName": "Routes to the ‘evaluation’ branch if the execution started from an evaluation trigger. Otherwise routes to the ‘normal’ branch.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "expectedAnswer",
        "displayName": "Expected Answer",
        "type": "string",
        "default": ""
      },
      {
        "name": "actualAnswer",
        "displayName": "Actual Answer",
        "type": "string",
        "default": ""
      },
      {
        "name": "userQuery",
        "displayName": "User Query",
        "type": "string",
        "default": ""
      },
      {
        "name": "prompt",
        "displayName": "Prompt",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "metricName",
        "displayName": "Metric Name",
        "type": "string"
      },
      {
        "name": "inputPrompt",
        "displayName": "Input Prompt",
        "type": "string"
      },
      {
        "name": "expectedTools",
        "displayName": "Expected Tools",
        "type": "string",
        "default": "",
        "placeholder": "Get Events, Send Email, Search Database"
      },
      {
        "name": "intermediateSteps",
        "displayName": "Intermediate Steps (of Agent)",
        "type": "string",
        "default": ""
      },
      {
        "name": "metric",
        "displayName": "Metric",
        "type": "hidden",
        "default": "customMetrics"
      },
      {
        "name": "metrics",
        "displayName": "Metrics to Return",
        "type": "assignmentCollection"
      },
      {
        "name": "documentId",
        "displayName": "Document",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list"
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string"
      },
      {
        "name": "id",
        "displayName": "By ID",
        "type": "string"
      },
      {
        "name": "sheetName",
        "displayName": "Sheet",
        "type": "resourceLocator"
      },
      {
        "name": "googleSheetsTrigger",
        "displayName": "Google Sheets Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "hidden"
      },
      {
        "name": "event",
        "displayName": "Trigger On",
        "type": "options"
      },
      {
        "name": "includeInOutput",
        "displayName": "Include in Output",
        "type": "options",
        "default": "new"
      },
      {
        "name": "columnsToWatch",
        "displayName": "Columns to Watch",
        "type": "multiOptions"
      },
      {
        "name": "dataLocationOnSheet",
        "displayName": "Data Location on Sheet",
        "type": "fixedCollection",
        "placeholder": "Select Range"
      },
      {
        "name": "headerRow",
        "displayName": "Header Row",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "firstDataRow",
        "displayName": "First Data Row",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "range",
        "displayName": "Range",
        "type": "string",
        "default": "",
        "placeholder": "A:Z"
      },
      {
        "name": "valueRender",
        "displayName": "Value Render",
        "type": "options"
      },
      {
        "name": "dateTimeRenderOption",
        "displayName": "DateTime Render",
        "type": "options"
      }
    ]
  },
  "ExecuteWorkflow": {
    "name": "ExecuteWorkflow",
    "displayName": "ExecuteWorkflow",
    "type": "n8n-nodes-base.ExecuteWorkflow",
    "subtitle": "={{\"Workflow: \" + $parameter[\"workflowId\"]}}",
    "description": "Execute another workflow",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "executeWorkflow",
        "displayName": "Execute Sub-workflow"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "hidden",
        "default": "call_workflow"
      },
      {
        "name": "outdatedVersionWarning",
        "displayName": "This node is out of date. Please upgrade by removing it and adding a new one",
        "type": "notice"
      },
      {
        "name": "source",
        "displayName": "Source",
        "type": "options"
      },
      {
        "name": "workflowId",
        "displayName": "Workflow ID",
        "type": "string"
      },
      {
        "name": "workflowPath",
        "displayName": "Workflow Path",
        "type": "string"
      },
      {
        "name": "workflowJson",
        "displayName": "Workflow JSON",
        "type": "json"
      },
      {
        "name": "workflowUrl",
        "displayName": "Workflow URL",
        "type": "string"
      },
      {
        "name": "executeWorkflowNotice",
        "displayName": "Any data you pass into this node will be output by the Execute Workflow Trigger. <a href=\"https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.executeworkflow/\" target=\"_blank\">More info</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "workflowInputs",
        "displayName": "Workflow Inputs",
        "type": "resourceMapper"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "waitForSubWorkflow",
        "displayName": "Wait For Sub-Workflow Completion",
        "type": "boolean"
      }
    ]
  },
  "ExecuteWorkflowTrigger": {
    "name": "ExecuteWorkflowTrigger",
    "displayName": "ExecuteWorkflowTrigger",
    "type": "n8n-nodes-base.ExecuteWorkflowTrigger",
    "subtitle": null,
    "description": "Helpers for calling other n8n workflows. Used for designing modular, microservice-like workflows.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "executeWorkflowTrigger",
        "displayName": "Execute Workflow Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "hidden"
      },
      {
        "name": "notice",
        "displayName": "When an ‘execute workflow’ node calls this workflow, the execution starts here. Any data passed into the 'execute workflow' node will be output by this node.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "outdatedVersionWarning",
        "displayName": "This node is out of date. Please upgrade by removing it and adding a new one",
        "type": "notice"
      },
      {
        "name": "Define using fields below",
        "displayName": "Input data mode",
        "type": "options"
      },
      {
        "name": "name",
        "displayName": "Values",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. fieldName"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options",
        "default": "string",
        "required": true
      }
    ]
  },
  "ConvertToFile": {
    "name": "ConvertToFile",
    "displayName": "ConvertToFile",
    "type": "n8n-nodes-base.ConvertToFile",
    "subtitle": null,
    "description": "Convert JSON data to binary data",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "convertToFile",
        "displayName": "Convert to File"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      }
    ]
  },
  "ExtractFromFile": {
    "name": "ExtractFromFile",
    "displayName": "ExtractFromFile",
    "type": "n8n-nodes-base.ExtractFromFile",
    "subtitle": null,
    "description": "Convert binary data to JSON",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "extractFromFile",
        "displayName": "Extract from File"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "ReadWriteFile": {
    "name": "ReadWriteFile",
    "displayName": "ReadWriteFile",
    "type": "n8n-nodes-base.ReadWriteFile",
    "subtitle": null,
    "description": "Read or write files from the computer that runs n8n",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "readWriteFile",
        "displayName": "Read/Write Files from Disk"
      },
      {
        "name": "info",
        "displayName": "Use this node to read and write files on the same computer running n8n. To handle files between different computers please use other nodes (e.g. FTP, HTTP Request, AWS).",
        "type": "notice",
        "default": ""
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "FilterV1": {
    "name": "FilterV1",
    "displayName": "FilterV1",
    "type": "n8n-nodes-base.FilterV1",
    "subtitle": null,
    "description": "The type of values to compare",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "conditions",
        "displayName": "Conditions",
        "type": "fixedCollection",
        "placeholder": "Add Condition"
      },
      {
        "name": "boolean",
        "displayName": "Boolean",
        "type": "boolean"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "value2",
        "displayName": "Value 2",
        "type": "boolean"
      },
      {
        "name": "dateTime",
        "displayName": "Date & Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "number",
        "displayName": "Number",
        "type": "number",
        "default": "0"
      },
      {
        "name": "string",
        "displayName": "String",
        "type": "string",
        "default": ""
      },
      {
        "name": "combineConditions",
        "displayName": "Combine Conditions",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "FilterV2": {
    "name": "FilterV2",
    "displayName": "FilterV2",
    "type": "n8n-nodes-base.FilterV2",
    "subtitle": null,
    "description": "Whether to ignore letter case when evaluating conditions",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "conditions",
        "displayName": "Conditions",
        "type": "filter",
        "placeholder": "Add Condition"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "ignoreCase",
        "displayName": "Ignore Case",
        "type": "boolean"
      }
    ]
  },
  "FormTriggerV1": {
    "name": "FormTriggerV1",
    "displayName": "FormTriggerV1",
    "type": "n8n-nodes-base.FormTriggerV1",
    "subtitle": null,
    "description": "Generate webforms in n8n and pass their responses to the workflow",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', isFullPath: true, path: `={{$parameter[\"path\"",
    "properties": [
      {
        "name": "formTrigger",
        "displayName": "n8n Form Trigger"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "formSubmittedText",
        "displayName": "Form Submitted Text",
        "type": "string",
        "default": "Your response has been recorded"
      }
    ],
    "version": 1.0
  },
  "FormTriggerV2": {
    "name": "FormTriggerV2",
    "displayName": "FormTriggerV2",
    "type": "n8n-nodes-base.FormTriggerV2",
    "subtitle": null,
    "description": "Whether to use the workflow timezone set in node's settings rather than UTC",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ // eslint-disable-next-line n8n-nodes-base/node-class-description-credentials-name-unsuffixed name: 'httpBasicAuth', required: true, displayOptions: { show: { [FORM_TRIGGER_AUTHENTICATION_PROPERTY",
    "webhooks": "{ name: 'setup', httpMethod: 'GET', responseMode: 'onReceived', isFullPath: true, path: '={{ $parameter[\"path\"",
    "properties": [
      {
        "name": "useWorkflowTimezone",
        "displayName": "Use Workflow Timezone",
        "type": "boolean"
      },
      {
        "name": "formTrigger",
        "displayName": "n8n Form Trigger"
      },
      {
        "name": "Basic Auth",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "formNotice",
        "displayName": "In the 'Respond to Webhook' node, select 'Respond With JSON' and set the <strong>formSubmittedText</strong> key to display a custom response in the form, or the <strong>redirectURL</strong> key to redirect users to a URL",
        "type": "notice"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "buttonLabel",
        "displayName": "Button Label",
        "type": "string",
        "default": "Submit"
      },
      {
        "name": "ignoreBots",
        "displayName": "Ignore Bots",
        "type": "boolean"
      },
      {
        "name": "customCss",
        "displayName": "Custom Form Styling",
        "type": "string"
      }
    ]
  },
  "GoogleAds": {
    "name": "GoogleAds",
    "displayName": "GoogleAds",
    "type": "n8n-nodes-base.GoogleAds",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Use the Google Ads API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleAdsOAuth2Api', required: true, testedBy: { request: { method: 'GET', url: '/v20/customers:listAccessibleCustomers', }, }, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleAds",
        "displayName": "Google Ads"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "campaigsNotice",
        "displayName": "Divide field names expressed with <i>micros</i> by 1,000,000 to get the actual value",
        "type": "notice",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "GoogleAnalytics": {
    "name": "googleAnalytics",
    "displayName": "Google Analytics",
    "type": "n8n-nodes-base.GoogleAnalytics",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Use the Google Analytics API",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "googleAnalytics",
        "displayName": "Google Analytics"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "GoogleBigQuery": {
    "name": "googleBigQuery",
    "displayName": "Google BigQuery",
    "type": "n8n-nodes-base.GoogleBigQuery",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google BigQuery API",
    "group": [
      "input"
    ],
    "defaultVersion": 2.1,
    "availableVersions": [
      1.0,
      2.0,
      2.1
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "googleBigQuery",
        "displayName": "Google BigQuery"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "GoogleBooks": {
    "name": "GoogleBooks",
    "displayName": "GoogleBooks",
    "type": "n8n-nodes-base.GoogleBooks",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Read data from Google Books",
    "group": [
      "input",
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "googleBooks",
        "displayName": "Google Books"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "myLibrary",
        "displayName": "My Library",
        "type": "boolean",
        "required": true
      },
      {
        "name": "searchQuery",
        "displayName": "Search Query",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "userId",
        "displayName": "User ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "shelfId",
        "displayName": "Bookshelf ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "volumeId",
        "displayName": "Volume ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "volumePosition",
        "displayName": "Volume Position",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      }
    ]
  },
  "GoogleBusinessProfile": {
    "name": "GoogleBusinessProfile",
    "displayName": "GoogleBusinessProfile",
    "type": "n8n-nodes-base.GoogleBusinessProfile",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google Business Profile API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleBusinessProfileOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleBusinessProfile",
        "displayName": "Google Business Profile"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleBusinessProfileTrigger": {
    "name": "GoogleBusinessProfileTrigger",
    "displayName": "GoogleBusinessProfileTrigger",
    "type": "n8n-nodes-base.GoogleBusinessProfileTrigger",
    "subtitle": "={{\"Google Business Profile Trigger\"}}",
    "description": "Fetches reviews from Google Business Profile and starts the workflow on specified polling intervals.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleBusinessProfileOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleBusinessProfileTrigger",
        "displayName": "Google Business Profile Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "reviewAdded",
        "required": true
      },
      {
        "name": "account",
        "displayName": "Account",
        "type": "resourceLocator",
        "required": true
      },
      {
        "name": "list",
        "displayName": "From list",
        "type": "list"
      },
      {
        "name": "name",
        "displayName": "By name",
        "type": "string"
      },
      {
        "name": "location",
        "displayName": "Location",
        "type": "resourceLocator",
        "required": true
      }
    ],
    "version": 1.0
  },
  "GoogleCalendar": {
    "name": "GoogleCalendar",
    "displayName": "GoogleCalendar",
    "type": "n8n-nodes-base.GoogleCalendar",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google Calendar API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleCalendarOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "preBuiltAgentsCalloutGoogleCalendar",
        "displayName": "Interact with your Google Calendar using our pre-built",
        "type": "callout"
      },
      {
        "name": "googleCalendar",
        "displayName": "Google Calendar"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "useN8nTimeZone",
        "displayName": "This node will use the time zone set in n8n’s settings, but you can override this in the workflow settings",
        "type": "notice",
        "default": ""
      }
    ]
  },
  "GoogleCalendarTrigger": {
    "name": "GoogleCalendarTrigger",
    "displayName": "GoogleCalendarTrigger",
    "type": "n8n-nodes-base.GoogleCalendarTrigger",
    "subtitle": "={{$parameter[\"triggerOn\"]}}",
    "description": "Starts the workflow when Google Calendar events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleCalendarOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleCalendarTrigger",
        "displayName": "Google Calendar Trigger"
      },
      {
        "name": "calendarId",
        "displayName": "Calendar",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "Calendar",
        "type": "list",
        "placeholder": "Select a Calendar..."
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string"
      },
      {
        "name": "triggerOn",
        "displayName": "Trigger On",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "matchTerm",
        "displayName": "Match Term",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "GoogleChat": {
    "name": "GoogleChat",
    "displayName": "GoogleChat",
    "type": "n8n-nodes-base.GoogleChat",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google Chat API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, testedBy: 'testGoogleTokenAuth', displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "googleChat",
        "displayName": "Google Chat"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "required": true
      }
    ],
    "version": 1.0
  },
  "GoogleCloudNaturalLanguage": {
    "name": "GoogleCloudNaturalLanguage",
    "displayName": "GoogleCloudNaturalLanguage",
    "type": "n8n-nodes-base.GoogleCloudNaturalLanguage",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google Cloud Natural Language API",
    "group": [
      "input",
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleCloudNaturalLanguageOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleCloudNaturalLanguage",
        "displayName": "Google Cloud Natural Language"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "source",
        "displayName": "Source",
        "type": "options"
      },
      {
        "name": "content",
        "displayName": "Content",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "gcsContentUri",
        "displayName": "Google Cloud Storage URI",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "documentType",
        "displayName": "Document Type",
        "type": "options"
      },
      {
        "name": "encodingType",
        "displayName": "Encoding Type",
        "type": "options"
      },
      {
        "name": "language",
        "displayName": "Language",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleCloudStorage": {
    "name": "GoogleCloudStorage",
    "displayName": "GoogleCloudStorage",
    "type": "n8n-nodes-base.GoogleCloudStorage",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Use the Google Cloud Storage API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleCloudStorageOAuth2Api', required: true, testedBy: { request: { method: 'GET', url: '/b/', }, }, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleCloudStorage",
        "displayName": "Google Cloud Storage"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleContacts": {
    "name": "GoogleContacts",
    "displayName": "GoogleContacts",
    "type": "n8n-nodes-base.GoogleContacts",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google Contacts API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleContactsOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleContacts",
        "displayName": "Google Contacts"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleDocs": {
    "name": "GoogleDocs",
    "displayName": "GoogleDocs",
    "type": "n8n-nodes-base.GoogleDocs",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google Docs API.",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "googleDocs",
        "displayName": "Google Docs"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "GoogleDrive": {
    "name": "googleDrive",
    "displayName": "Google Drive",
    "type": "n8n-nodes-base.GoogleDrive",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Access data on Google Drive",
    "group": [
      "input"
    ],
    "defaultVersion": 3.0,
    "availableVersions": [
      1.0,
      2.0,
      3.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "googleDrive",
        "displayName": "Google Drive"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "fileId",
        "displayName": "File",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "File",
        "type": "list",
        "placeholder": "Select a file..."
      },
      {
        "name": "url",
        "displayName": "Link",
        "type": "string",
        "placeholder": "https://drive.google.com/file/d/1anGBg0b5re2VtF2bKu201_a-Vnz5BHq9Y4r-yBDAj5A/edit"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string",
        "placeholder": "1anGBg0b5re2VtF2bKu201_a-Vnz5BHq9Y4r-yBDAj5A"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Put Output File in Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "googleFileConversion",
        "displayName": "Google File Conversion",
        "type": "fixedCollection"
      },
      {
        "name": "conversion",
        "displayName": "Conversion",
        "type": "options"
      },
      {
        "name": "drawingsToFormat",
        "displayName": "Google Drawings",
        "type": "options"
      },
      {
        "name": "slidesToFormat",
        "displayName": "Google Slides",
        "type": "options"
      },
      {
        "name": "sheetsToFormat",
        "displayName": "Google Sheets",
        "type": "options"
      },
      {
        "name": "fileName",
        "displayName": "File Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "useQueryString",
        "displayName": "Use Query String",
        "type": "boolean"
      },
      {
        "name": "queryString",
        "displayName": "Query String",
        "type": "string",
        "default": ""
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "queryFilters",
        "displayName": "Filters",
        "type": "fixedCollection",
        "placeholder": "Add Filter"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "options"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "mimeType",
        "displayName": "Mime Type",
        "type": "options"
      },
      {
        "name": "customMimeType",
        "displayName": "Custom Mime Type",
        "type": "string",
        "default": ""
      },
      {
        "name": "permissionsUi",
        "displayName": "Permissions",
        "type": "fixedCollection",
        "placeholder": "Add Permission"
      },
      {
        "name": "permissionsValues",
        "displayName": "Permission",
        "type": "options"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "emailAddress",
        "displayName": "Email Address",
        "type": "string"
      },
      {
        "name": "domain",
        "displayName": "Domain",
        "type": "string"
      },
      {
        "name": "allowFileDiscovery",
        "displayName": "Allow File Discovery",
        "type": "boolean"
      },
      {
        "name": "binaryData",
        "displayName": "Binary File",
        "type": "boolean"
      },
      {
        "name": "fileContent",
        "displayName": "File Content",
        "type": "string",
        "default": ""
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "keepRevisionForever",
        "displayName": "Keep Revision Forever",
        "type": "boolean"
      },
      {
        "name": "trashed",
        "displayName": "Move to Trash",
        "type": "boolean"
      },
      {
        "name": "ocrLanguage",
        "displayName": "OCR Language",
        "type": "string",
        "default": ""
      },
      {
        "name": "parentId",
        "displayName": "Parent ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "useContentAsIndexableText",
        "displayName": "Use Content As Indexable Text",
        "type": "boolean"
      },
      {
        "name": "fields",
        "displayName": "Fields",
        "type": "multiOptions"
      },
      {
        "name": "resolveData",
        "displayName": "Resolve Data",
        "type": "boolean"
      },
      {
        "name": "parents",
        "displayName": "Parents",
        "type": "string"
      },
      {
        "name": "emailMessage",
        "displayName": "Email Message",
        "type": "string"
      },
      {
        "name": "enforceSingleParent",
        "displayName": "Enforce Single Parent",
        "type": "boolean"
      },
      {
        "name": "moveToNewOwnersRoot",
        "displayName": "Move To New Owners Root",
        "type": "boolean"
      },
      {
        "name": "sendNotificationEmail",
        "displayName": "Send Notification Email",
        "type": "boolean"
      },
      {
        "name": "supportsAllDrives",
        "displayName": "Supports All Drives",
        "type": "boolean"
      },
      {
        "name": "transferOwnership",
        "displayName": "Transfer Ownership",
        "type": "boolean"
      },
      {
        "name": "useDomainAdminAccess",
        "displayName": "Use Domain Admin Access",
        "type": "boolean"
      },
      {
        "name": "spaces",
        "displayName": "Spaces",
        "type": "multiOptions"
      },
      {
        "name": "corpora",
        "displayName": "Corpora",
        "type": "options"
      },
      {
        "name": "driveId",
        "displayName": "Drive ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "capabilities",
        "displayName": "Capabilities",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "canAddChildren",
        "displayName": "Can Add Children",
        "type": "boolean"
      },
      {
        "name": "canChangeCopyRequiresWriterPermissionRestriction",
        "displayName": "Can Change Copy Requires Writer Permission Restriction",
        "type": "boolean"
      },
      {
        "name": "canChangeDomainUsersOnlyRestriction",
        "displayName": "Can Change Domain Users Only Restriction",
        "type": "boolean"
      },
      {
        "name": "canChangeDriveBackground",
        "displayName": "Can Change Drive Background",
        "type": "boolean"
      },
      {
        "name": "canChangeDriveMembersOnlyRestriction",
        "displayName": "Can Change Drive Members Only Restriction",
        "type": "boolean"
      },
      {
        "name": "canComment",
        "displayName": "Can Comment",
        "type": "boolean"
      },
      {
        "name": "canCopy",
        "displayName": "Can Copy",
        "type": "boolean"
      },
      {
        "name": "canDeleteChildren",
        "displayName": "Can Delete Children",
        "type": "boolean"
      },
      {
        "name": "canDeleteDrive",
        "displayName": "Can Delete Drive",
        "type": "boolean"
      },
      {
        "name": "canDownload",
        "displayName": "Can Download",
        "type": "boolean"
      },
      {
        "name": "canEdit",
        "displayName": "Can Edit",
        "type": "boolean"
      },
      {
        "name": "canListChildren",
        "displayName": "Can List Children",
        "type": "boolean"
      },
      {
        "name": "canManageMembers",
        "displayName": "Can Manage Members",
        "type": "boolean"
      },
      {
        "name": "canReadRevisions",
        "displayName": "Can Read Revisions",
        "type": "boolean"
      },
      {
        "name": "canRename",
        "displayName": "Can Rename",
        "type": "boolean"
      },
      {
        "name": "canRenameDrive",
        "displayName": "Can Rename Drive",
        "type": "boolean"
      },
      {
        "name": "canShare",
        "displayName": "Can Share",
        "type": "boolean"
      },
      {
        "name": "canTrashChildren",
        "displayName": "Can Trash Children",
        "type": "boolean"
      },
      {
        "name": "colorRgb",
        "displayName": "Color RGB",
        "type": "color",
        "default": ""
      },
      {
        "name": "createdTime",
        "displayName": "Created Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "hidden",
        "displayName": "Hidden",
        "type": "boolean"
      },
      {
        "name": "restrictions",
        "displayName": "Restrictions",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "adminManagedRestrictions",
        "displayName": "Admin Managed Restrictions",
        "type": "boolean"
      },
      {
        "name": "copyRequiresWriterPermission",
        "displayName": "Copy Requires Writer Permission",
        "type": "boolean"
      },
      {
        "name": "domainUsersOnly",
        "displayName": "Domain Users Only",
        "type": "boolean"
      },
      {
        "name": "driveMembersOnly",
        "displayName": "Drive Members Only",
        "type": "boolean"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "q",
        "displayName": "Query",
        "type": "string",
        "default": ""
      },
      {
        "name": "appPropertiesUi",
        "displayName": "APP Properties",
        "type": "fixedCollection",
        "placeholder": "Add Property"
      },
      {
        "name": "appPropertyValues",
        "displayName": "APP Property",
        "type": "string",
        "default": ""
      },
      {
        "name": "propertiesUi",
        "displayName": "Properties",
        "type": "fixedCollection",
        "placeholder": "Add Property"
      },
      {
        "name": "propertyValues",
        "displayName": "Property",
        "type": "string",
        "default": ""
      }
    ]
  },
  "GoogleDriveTrigger": {
    "name": "GoogleDriveTrigger",
    "displayName": "GoogleDriveTrigger",
    "type": "n8n-nodes-base.GoogleDriveTrigger",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Starts the workflow when Google Drive events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "googleDriveTrigger",
        "displayName": "Google Drive Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Credential Type",
        "type": "options"
      },
      {
        "name": "triggerOn",
        "displayName": "Trigger On",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "fileToWatch",
        "displayName": "File",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "File",
        "type": "list",
        "placeholder": "Select a file..."
      },
      {
        "name": "url",
        "displayName": "Link",
        "type": "string",
        "placeholder": "https://drive.google.com/file/d/1wroCSfK-hupQIYf_xzeoUEzOhvfTFH2P/edit"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string",
        "placeholder": "1anGBg0b5re2VtF2bKu201_a-Vnz5BHq9Y4r-yBDAj5A"
      },
      {
        "name": "event",
        "displayName": "Watch For",
        "type": "options"
      },
      {
        "name": "folderToWatch",
        "displayName": "Folder",
        "type": "resourceLocator"
      },
      {
        "name": "asas",
        "displayName": "Changes within subfolders won't trigger this node",
        "type": "notice"
      },
      {
        "name": "driveToWatch",
        "displayName": "Drive To Watch",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "fileType",
        "displayName": "File Type",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "Gmail": {
    "name": "gmail",
    "displayName": "Gmail",
    "type": "n8n-nodes-base.Gmail",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Gmail API",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.1,
    "availableVersions": [
      1.0,
      2.0,
      2.1
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "gmail",
        "displayName": "Gmail"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "preBuiltAgentsCalloutGmail",
        "displayName": "Sort your Gmail inbox using our pre-built",
        "type": "callout"
      },
      {
        "name": "sendTo",
        "displayName": "To",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. info@example.com"
      }
    ]
  },
  "GmailTrigger": {
    "name": "GmailTrigger",
    "displayName": "GmailTrigger",
    "type": "n8n-nodes-base.GmailTrigger",
    "subtitle": "={{\"Gmail Trigger\"}}",
    "description": "Fetches emails from Gmail and starts the workflow on specified polling intervals.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "gmailTrigger",
        "displayName": "Gmail Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "default": "messageReceived"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "includeSpamTrash",
        "displayName": "Include Spam and Trash",
        "type": "boolean"
      },
      {
        "name": "includeDrafts",
        "displayName": "Include Drafts",
        "type": "boolean"
      },
      {
        "name": "labelIds",
        "displayName": "Label Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "q",
        "displayName": "Search",
        "type": "string",
        "default": "",
        "placeholder": "has:attachment"
      },
      {
        "name": "readStatus",
        "displayName": "Read Status",
        "type": "options",
        "default": "unread"
      },
      {
        "name": "sender",
        "displayName": "Sender",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "dataPropertyAttachmentsPrefixName",
        "displayName": "Attachment Prefix",
        "type": "string",
        "default": "attachment_"
      },
      {
        "name": "downloadAttachments",
        "displayName": "Download Attachments",
        "type": "boolean"
      }
    ]
  },
  "GSuiteAdmin": {
    "name": "GSuiteAdmin",
    "displayName": "GSuiteAdmin",
    "type": "n8n-nodes-base.GSuiteAdmin",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google Workspace Admin API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'gSuiteAdminOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "gSuiteAdmin",
        "displayName": "Google Workspace Admin"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GooglePerspective": {
    "name": "GooglePerspective",
    "displayName": "GooglePerspective",
    "type": "n8n-nodes-base.GooglePerspective",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Consume Google Perspective API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googlePerspectiveOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googlePerspective",
        "displayName": "Google Perspective"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "requestedAttributesUi",
        "displayName": "Attributes to Analyze",
        "type": "fixedCollection"
      },
      {
        "name": "requestedAttributesValues",
        "displayName": "Properties",
        "type": "options"
      },
      {
        "name": "scoreThreshold",
        "displayName": "Score Threshold",
        "type": "number",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 1
        }
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "languages",
        "displayName": "Language Name or ID",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleSheets": {
    "name": "googleSheets",
    "displayName": "Google Sheets",
    "type": "n8n-nodes-base.GoogleSheets",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Read, update and write data to Google Sheets",
    "group": [
      "input",
      "output"
    ],
    "defaultVersion": 4.7,
    "availableVersions": [
      1.0,
      2.0,
      3.0,
      4.0,
      4.1,
      4.2,
      4.3,
      4.4,
      4.5,
      4.6,
      4.7
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "googleSheets",
        "displayName": "Google Sheets"
      }
    ]
  },
  "GoogleSheetsTrigger": {
    "name": "GoogleSheetsTrigger",
    "displayName": "GoogleSheetsTrigger",
    "type": "n8n-nodes-base.GoogleSheetsTrigger",
    "subtitle": "={{($parameter[\"event\"])}}",
    "description": "Starts the workflow when Google Sheets events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleSheetsTriggerOAuth2Api', required: true, displayOptions: { show: { authentication: ['triggerOAuth2'",
    "webhooks": [],
    "properties": [
      {
        "name": "documentId",
        "displayName": "Document",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list"
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string"
      },
      {
        "name": "id",
        "displayName": "By ID",
        "type": "string"
      },
      {
        "name": "sheetName",
        "displayName": "Sheet",
        "type": "resourceLocator"
      },
      {
        "name": "googleSheetsTrigger",
        "displayName": "Google Sheets Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "hidden"
      },
      {
        "name": "event",
        "displayName": "Trigger On",
        "type": "options"
      },
      {
        "name": "includeInOutput",
        "displayName": "Include in Output",
        "type": "options",
        "default": "new"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "columnsToWatch",
        "displayName": "Columns to Watch",
        "type": "multiOptions"
      },
      {
        "name": "dataLocationOnSheet",
        "displayName": "Data Location on Sheet",
        "type": "fixedCollection",
        "placeholder": "Select Range"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "options"
      },
      {
        "name": "headerRow",
        "displayName": "Header Row",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "firstDataRow",
        "displayName": "First Data Row",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "range",
        "displayName": "Range",
        "type": "string",
        "default": "",
        "placeholder": "A:Z"
      },
      {
        "name": "valueRender",
        "displayName": "Value Render",
        "type": "options"
      },
      {
        "name": "dateTimeRenderOption",
        "displayName": "DateTime Render",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleSlides": {
    "name": "GoogleSlides",
    "displayName": "GoogleSlides",
    "type": "n8n-nodes-base.GoogleSlides",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Google Slides API",
    "group": [
      "input",
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "googleSlides",
        "displayName": "Google Slides"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "presentationId",
        "displayName": "Presentation ID",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "1wZtNFZ8MO-WKrxhYrOLMvyiqSgFwdSz5vn8_l_7eNqw"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "pageObjectId",
        "displayName": "Page Object ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "textUi",
        "displayName": "Texts To Replace",
        "type": "fixedCollection",
        "placeholder": "Add Text"
      },
      {
        "name": "textValues",
        "displayName": "Text",
        "type": "boolean"
      },
      {
        "name": "pageObjectIds",
        "displayName": "Slide Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "text",
        "displayName": "Search For",
        "type": "string",
        "default": ""
      },
      {
        "name": "replaceText",
        "displayName": "Replace With",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "revisionId",
        "displayName": "Revision ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "download",
        "displayName": "Download",
        "type": "boolean"
      },
      {
        "name": "binaryProperty",
        "displayName": "Put Output File in Field",
        "type": "string",
        "default": "data",
        "required": true
      }
    ]
  },
  "GoogleTasks": {
    "name": "GoogleTasks",
    "displayName": "GoogleTasks",
    "type": "n8n-nodes-base.GoogleTasks",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google Tasks API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleTasksOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleTasks",
        "displayName": "Google Tasks"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleTranslate": {
    "name": "GoogleTranslate",
    "displayName": "GoogleTranslate",
    "type": "n8n-nodes-base.GoogleTranslate",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Translate data using Google Translate",
    "group": [
      "input",
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "googleTranslate",
        "displayName": "Google Translate"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "translateTo",
        "displayName": "Translate To",
        "type": "options"
      }
    ]
  },
  "YouTube": {
    "name": "YouTube",
    "displayName": "YouTube",
    "type": "n8n-nodes-base.YouTube",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume YouTube API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'youTubeOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "youTube",
        "displayName": "YouTube"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleAnalyticsV1": {
    "name": "GoogleAnalyticsV1",
    "displayName": "GoogleAnalyticsV1",
    "type": "n8n-nodes-base.GoogleAnalyticsV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Use the Google Analytics API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleAnalyticsOAuth2', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleAnalytics",
        "displayName": "Google Analytics"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleAnalyticsV2": {
    "name": "GoogleAnalyticsV2",
    "displayName": "GoogleAnalyticsV2",
    "type": "n8n-nodes-base.GoogleAnalyticsV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "googleAnalytics",
        "displayName": "Google Analytics"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "GoogleBigQueryV1": {
    "name": "GoogleBigQueryV1",
    "displayName": "GoogleBigQueryV1",
    "type": "n8n-nodes-base.GoogleBigQueryV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Google BigQuery API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "googleBigQuery",
        "displayName": "Google BigQuery"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GoogleBigQueryV2": {
    "name": "GoogleBigQueryV2",
    "displayName": "GoogleBigQueryV2",
    "type": "n8n-nodes-base.GoogleBigQueryV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "googleBigQuery",
        "displayName": "Google BigQuery"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden"
      }
    ]
  },
  "GoogleDriveV1": {
    "name": "GoogleDriveV1",
    "displayName": "GoogleDriveV1",
    "type": "n8n-nodes-base.GoogleDriveV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Access data on Google Drive",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "googleDrive",
        "displayName": "Google Drive"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "fileId",
        "displayName": "File",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "File",
        "type": "list",
        "placeholder": "Select a file..."
      },
      {
        "name": "url",
        "displayName": "Link",
        "type": "string",
        "placeholder": "https://drive.google.com/file/d/1anGBg0b5re2VtF2bKu201_a-Vnz5BHq9Y4r-yBDAj5A/edit"
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string",
        "placeholder": "1anGBg0b5re2VtF2bKu201_a-Vnz5BHq9Y4r-yBDAj5A"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Put Output File in Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "googleFileConversion",
        "displayName": "Google File Conversion",
        "type": "fixedCollection"
      },
      {
        "name": "conversion",
        "displayName": "Conversion",
        "type": "options"
      },
      {
        "name": "drawingsToFormat",
        "displayName": "Google Drawings",
        "type": "options"
      },
      {
        "name": "slidesToFormat",
        "displayName": "Google Slides",
        "type": "options"
      },
      {
        "name": "sheetsToFormat",
        "displayName": "Google Sheets",
        "type": "options"
      },
      {
        "name": "fileName",
        "displayName": "File Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "useQueryString",
        "displayName": "Use Query String",
        "type": "boolean"
      },
      {
        "name": "queryString",
        "displayName": "Query String",
        "type": "string",
        "default": ""
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "queryFilters",
        "displayName": "Filters",
        "type": "fixedCollection",
        "placeholder": "Add Filter"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "options"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "mimeType",
        "displayName": "Mime Type",
        "type": "options"
      },
      {
        "name": "customMimeType",
        "displayName": "Custom Mime Type",
        "type": "string",
        "default": ""
      },
      {
        "name": "permissionsUi",
        "displayName": "Permissions",
        "type": "fixedCollection",
        "placeholder": "Add Permission"
      },
      {
        "name": "permissionsValues",
        "displayName": "Permission",
        "type": "options"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "emailAddress",
        "displayName": "Email Address",
        "type": "string"
      },
      {
        "name": "domain",
        "displayName": "Domain",
        "type": "string"
      },
      {
        "name": "allowFileDiscovery",
        "displayName": "Allow File Discovery",
        "type": "boolean"
      },
      {
        "name": "binaryData",
        "displayName": "Binary File",
        "type": "boolean"
      },
      {
        "name": "fileContent",
        "displayName": "File Content",
        "type": "string",
        "default": ""
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "keepRevisionForever",
        "displayName": "Keep Revision Forever",
        "type": "boolean"
      },
      {
        "name": "trashed",
        "displayName": "Move to Trash",
        "type": "boolean"
      },
      {
        "name": "ocrLanguage",
        "displayName": "OCR Language",
        "type": "string",
        "default": ""
      },
      {
        "name": "parentId",
        "displayName": "Parent ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "useContentAsIndexableText",
        "displayName": "Use Content As Indexable Text",
        "type": "boolean"
      },
      {
        "name": "fields",
        "displayName": "Fields",
        "type": "multiOptions"
      },
      {
        "name": "resolveData",
        "displayName": "Resolve Data",
        "type": "boolean"
      },
      {
        "name": "parents",
        "displayName": "Parents",
        "type": "string"
      },
      {
        "name": "emailMessage",
        "displayName": "Email Message",
        "type": "string"
      },
      {
        "name": "enforceSingleParent",
        "displayName": "Enforce Single Parent",
        "type": "boolean"
      },
      {
        "name": "moveToNewOwnersRoot",
        "displayName": "Move To New Owners Root",
        "type": "boolean"
      },
      {
        "name": "sendNotificationEmail",
        "displayName": "Send Notification Email",
        "type": "boolean"
      },
      {
        "name": "supportsAllDrives",
        "displayName": "Supports All Drives",
        "type": "boolean"
      },
      {
        "name": "transferOwnership",
        "displayName": "Transfer Ownership",
        "type": "boolean"
      },
      {
        "name": "useDomainAdminAccess",
        "displayName": "Use Domain Admin Access",
        "type": "boolean"
      },
      {
        "name": "spaces",
        "displayName": "Spaces",
        "type": "multiOptions"
      },
      {
        "name": "corpora",
        "displayName": "Corpora",
        "type": "options"
      },
      {
        "name": "driveId",
        "displayName": "Drive ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "capabilities",
        "displayName": "Capabilities",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "canAddChildren",
        "displayName": "Can Add Children",
        "type": "boolean"
      },
      {
        "name": "canChangeCopyRequiresWriterPermissionRestriction",
        "displayName": "Can Change Copy Requires Writer Permission Restriction",
        "type": "boolean"
      },
      {
        "name": "canChangeDomainUsersOnlyRestriction",
        "displayName": "Can Change Domain Users Only Restriction",
        "type": "boolean"
      },
      {
        "name": "canChangeDriveBackground",
        "displayName": "Can Change Drive Background",
        "type": "boolean"
      },
      {
        "name": "canChangeDriveMembersOnlyRestriction",
        "displayName": "Can Change Drive Members Only Restriction",
        "type": "boolean"
      },
      {
        "name": "canComment",
        "displayName": "Can Comment",
        "type": "boolean"
      },
      {
        "name": "canCopy",
        "displayName": "Can Copy",
        "type": "boolean"
      },
      {
        "name": "canDeleteChildren",
        "displayName": "Can Delete Children",
        "type": "boolean"
      },
      {
        "name": "canDeleteDrive",
        "displayName": "Can Delete Drive",
        "type": "boolean"
      },
      {
        "name": "canDownload",
        "displayName": "Can Download",
        "type": "boolean"
      },
      {
        "name": "canEdit",
        "displayName": "Can Edit",
        "type": "boolean"
      },
      {
        "name": "canListChildren",
        "displayName": "Can List Children",
        "type": "boolean"
      },
      {
        "name": "canManageMembers",
        "displayName": "Can Manage Members",
        "type": "boolean"
      },
      {
        "name": "canReadRevisions",
        "displayName": "Can Read Revisions",
        "type": "boolean"
      },
      {
        "name": "canRename",
        "displayName": "Can Rename",
        "type": "boolean"
      },
      {
        "name": "canRenameDrive",
        "displayName": "Can Rename Drive",
        "type": "boolean"
      },
      {
        "name": "canShare",
        "displayName": "Can Share",
        "type": "boolean"
      },
      {
        "name": "canTrashChildren",
        "displayName": "Can Trash Children",
        "type": "boolean"
      },
      {
        "name": "colorRgb",
        "displayName": "Color RGB",
        "type": "color",
        "default": ""
      },
      {
        "name": "createdTime",
        "displayName": "Created Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "hidden",
        "displayName": "Hidden",
        "type": "boolean"
      },
      {
        "name": "restrictions",
        "displayName": "Restrictions",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "adminManagedRestrictions",
        "displayName": "Admin Managed Restrictions",
        "type": "boolean"
      },
      {
        "name": "copyRequiresWriterPermission",
        "displayName": "Copy Requires Writer Permission",
        "type": "boolean"
      },
      {
        "name": "domainUsersOnly",
        "displayName": "Domain Users Only",
        "type": "boolean"
      },
      {
        "name": "driveMembersOnly",
        "displayName": "Drive Members Only",
        "type": "boolean"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "q",
        "displayName": "Query",
        "type": "string",
        "default": ""
      },
      {
        "name": "appPropertiesUi",
        "displayName": "APP Properties",
        "type": "fixedCollection",
        "placeholder": "Add Property"
      },
      {
        "name": "appPropertyValues",
        "displayName": "APP Property",
        "type": "string",
        "default": ""
      },
      {
        "name": "propertiesUi",
        "displayName": "Properties",
        "type": "fixedCollection",
        "placeholder": "Add Property"
      },
      {
        "name": "propertyValues",
        "displayName": "Property",
        "type": "string",
        "default": ""
      }
    ]
  },
  "GoogleDriveV2": {
    "name": "GoogleDriveV2",
    "displayName": "GoogleDriveV2",
    "type": "n8n-nodes-base.GoogleDriveV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "preBuiltAgentsCalloutGoogleDrive",
        "displayName": "Retrieve, analyze, and answer questions using your Google Drive documents with our pre-built",
        "type": "callout"
      },
      {
        "name": "googleDrive",
        "displayName": "Google Drive"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "GoogleFirebaseCloudFirestore": {
    "name": "GoogleFirebaseCloudFirestore",
    "displayName": "GoogleFirebaseCloudFirestore",
    "type": "n8n-nodes-base.GoogleFirebaseCloudFirestore",
    "subtitle": "={{$parameter[\"resource\"] + \": \" + $parameter[\"operation\"]}}",
    "description": "Interact with Google Firebase - Cloud Firestore API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleFirebaseCloudFirestoreOAuth2Api', required: true, displayOptions: { show: { authentication: ['googleFirebaseCloudFirestoreOAuth2Api'",
    "webhooks": [],
    "properties": [
      {
        "name": "googleFirebaseCloudFirestore",
        "displayName": "Google Cloud Firestore"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "GoogleFirebaseRealtimeDatabase": {
    "name": "GoogleFirebaseRealtimeDatabase",
    "displayName": "GoogleFirebaseRealtimeDatabase",
    "type": "n8n-nodes-base.GoogleFirebaseRealtimeDatabase",
    "subtitle": "={{$parameter[\"operation\"]}}",
    "description": "Interact with Google Firebase - Realtime Database API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleFirebaseRealtimeDatabaseOAuth2Api', },",
    "webhooks": [],
    "properties": [
      {
        "name": "googleFirebaseRealtimeDatabase",
        "displayName": "Google Cloud Realtime Database"
      },
      {
        "name": "projectId",
        "displayName": "Project Name or ID",
        "type": "options",
        "default": ""
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "path",
        "displayName": "Object Path",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. /app/users"
      },
      {
        "name": "attributes",
        "displayName": "Columns / Attributes",
        "type": "string",
        "default": ""
      }
    ],
    "version": 1.0
  },
  "GmailV1": {
    "name": "GmailV1",
    "displayName": "GmailV1",
    "type": "n8n-nodes-base.GmailV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Gmail API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "gmail",
        "displayName": "Gmail"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "GmailV2": {
    "name": "GmailV2",
    "displayName": "GmailV2",
    "type": "n8n-nodes-base.GmailV2",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Gmail API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'googleApi', required: true, displayOptions: { show: { authentication: ['serviceAccount'",
    "webhooks": [],
    "properties": [
      {
        "name": "preBuiltAgentsCalloutGmail",
        "displayName": "Sort your Gmail inbox using our pre-built",
        "type": "callout"
      },
      {
        "name": "gmail",
        "displayName": "Gmail"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "sendTo",
        "displayName": "To",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. info@example.com"
      }
    ]
  },
  "GoogleSheetsV1": {
    "name": "GoogleSheetsV1",
    "displayName": "GoogleSheetsV1",
    "type": "n8n-nodes-base.GoogleSheetsV1",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "googleSheets",
        "displayName": "Google Sheets "
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "sheetId",
        "displayName": "Spreadsheet ID",
        "type": "string"
      },
      {
        "name": "range",
        "displayName": "Range",
        "type": "string"
      },
      {
        "name": "toDelete",
        "displayName": "To Delete",
        "type": "fixedCollection",
        "placeholder": "Add Columns/Rows to delete"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "options"
      },
      {
        "name": "startIndex",
        "displayName": "Start Index",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "amount",
        "displayName": "Amount",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "rows",
        "displayName": "Rows",
        "type": "options"
      },
      {
        "name": "rawData",
        "displayName": "RAW Data",
        "type": "boolean"
      },
      {
        "name": "dataProperty",
        "displayName": "Data Property",
        "type": "string",
        "default": "data"
      },
      {
        "name": "dataStartRow",
        "displayName": "Data Start Row",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "keyRow",
        "displayName": "Key Row",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "lookupColumn",
        "displayName": "Lookup Column",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "Email"
      },
      {
        "name": "lookupValue",
        "displayName": "Lookup Value",
        "type": "string",
        "default": "",
        "placeholder": "frank@example.com"
      },
      {
        "name": "key",
        "displayName": "Key",
        "type": "string",
        "default": "id"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "continue",
        "displayName": "Continue If Empty",
        "type": "boolean"
      },
      {
        "name": "returnAllMatches",
        "displayName": "Return All Matches",
        "type": "boolean"
      },
      {
        "name": "usePathForKeyRow",
        "displayName": "Use Header Names as JSON Paths",
        "type": "boolean"
      },
      {
        "name": "valueInputMode",
        "displayName": "Value Input Mode",
        "type": "options"
      },
      {
        "name": "valueRenderMode",
        "displayName": "Value Render Mode",
        "type": "options"
      },
      {
        "name": "title",
        "displayName": "Title",
        "type": "string",
        "default": ""
      },
      {
        "name": "sheetsUi",
        "displayName": "Sheets",
        "type": "fixedCollection",
        "placeholder": "Add Sheet"
      },
      {
        "name": "sheetValues",
        "displayName": "Sheet",
        "type": "collection",
        "placeholder": "Add Property"
      },
      {
        "name": "hidden",
        "displayName": "Hidden",
        "type": "boolean"
      },
      {
        "name": "locale",
        "displayName": "Locale",
        "type": "string",
        "default": "",
        "placeholder": "en_US"
      },
      {
        "name": "autoRecalc",
        "displayName": "Recalculation Interval",
        "type": "options"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      },
      {
        "name": "gridProperties",
        "displayName": "Grid Properties",
        "type": "collection",
        "placeholder": "Add Property"
      },
      {
        "name": "columnCount",
        "displayName": "Column Count",
        "type": "number",
        "default": "0"
      },
      {
        "name": "columnGroupControlAfter",
        "displayName": "Column Group Control After",
        "type": "boolean"
      },
      {
        "name": "frozenColumnCount",
        "displayName": "Frozen Column Count",
        "type": "number",
        "default": "0"
      },
      {
        "name": "frozenRowCount",
        "displayName": "Frozen Row Count",
        "type": "number",
        "default": "0"
      },
      {
        "name": "hideGridlines",
        "displayName": "Hide Gridlines",
        "type": "boolean"
      },
      {
        "name": "rowCount",
        "displayName": "Row Count",
        "type": "number",
        "default": "0"
      },
      {
        "name": "rowGroupControlAfter",
        "displayName": "Row Group Control After",
        "type": "boolean"
      },
      {
        "name": "rightToLeft",
        "displayName": "Right To Left",
        "type": "boolean"
      },
      {
        "name": "index",
        "displayName": "Sheet Index",
        "type": "number",
        "default": "0"
      },
      {
        "name": "tabColor",
        "displayName": "Tab Color",
        "type": "color",
        "default": "0aa55c"
      },
      {
        "name": "id",
        "displayName": "Sheet ID",
        "type": "string",
        "default": "",
        "required": true
      }
    ]
  },
  "GoogleSheetsV2": {
    "name": "GoogleSheetsV2",
    "displayName": "GoogleSheetsV2",
    "type": "n8n-nodes-base.GoogleSheetsV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "preBuiltAgentsCalloutGoogleSheets",
        "displayName": "Manage tasks in Google Sheets using our pre-built",
        "type": "callout"
      },
      {
        "name": "googleSheets",
        "displayName": "Google Sheets"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "HighLevelV1": {
    "name": "HighLevelV1",
    "displayName": "HighLevelV1",
    "type": "n8n-nodes-base.HighLevelV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume HighLevel API v1",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'highLevelApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "highLevel",
        "displayName": "HighLevel"
      }
    ],
    "version": 1.0
  },
  "HighLevelV2": {
    "name": "HighLevelV2",
    "displayName": "HighLevelV2",
    "type": "n8n-nodes-base.HighLevelV2",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume HighLevel API v2",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'highLevelOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "highLevel",
        "displayName": "HighLevel"
      }
    ],
    "version": 2.0
  },
  "HttpRequestV1": {
    "name": "HttpRequestV1",
    "displayName": "HttpRequestV1",
    "type": "n8n-nodes-base.HttpRequestV1",
    "subtitle": null,
    "description": "The way to authenticate",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "// ---------------------------------- // v1 creds // ---------------------------------- { name: 'httpBasicAuth', required: true, displayOptions: { show: { authentication: ['basicAuth'",
    "webhooks": [],
    "properties": [
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "requestMethod",
        "displayName": "Request Method",
        "type": "options"
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "http://example.com/index.html"
      },
      {
        "name": "allowUnauthorizedCerts",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      },
      {
        "name": "responseFormat",
        "displayName": "Response Format",
        "type": "options"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "jsonParameters",
        "displayName": "JSON/RAW Parameters",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "batchInterval",
        "displayName": "Batch Interval",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "type": "number"
      },
      {
        "name": "bodyContentType",
        "displayName": "Body Content Type",
        "type": "options"
      },
      {
        "name": "fullResponse",
        "displayName": "Full Response",
        "type": "boolean"
      },
      {
        "name": "followAllRedirects",
        "displayName": "Follow All Redirects",
        "type": "boolean"
      },
      {
        "name": "followRedirect",
        "displayName": "Follow GET/HEAD Redirect",
        "type": "boolean"
      },
      {
        "name": "ignoreResponseCode",
        "displayName": "Ignore Response Code",
        "type": "boolean"
      },
      {
        "name": "bodyContentCustomMimeType",
        "displayName": "MIME Type",
        "type": "string",
        "default": "",
        "placeholder": "text/xml"
      },
      {
        "name": "proxy",
        "displayName": "Proxy",
        "type": "string",
        "default": "",
        "placeholder": "http://myproxy:3128"
      },
      {
        "name": "splitIntoItems",
        "displayName": "Split Into Items",
        "type": "boolean"
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "useQueryString",
        "displayName": "Use Querystring",
        "type": "boolean"
      },
      {
        "name": "sendBinaryData",
        "displayName": "Send Binary File",
        "type": "boolean"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "bodyParametersJson",
        "displayName": "Body Parameters",
        "type": "json"
      },
      {
        "name": "bodyParametersUi",
        "displayName": "Body Parameters",
        "type": "fixedCollection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "parameter",
        "displayName": "Parameter",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "headerParametersJson",
        "displayName": "Headers",
        "type": "json"
      },
      {
        "name": "headerParametersUi",
        "displayName": "Headers",
        "type": "fixedCollection",
        "placeholder": "Add Header"
      },
      {
        "name": "queryParametersJson",
        "displayName": "Query Parameters",
        "type": "json"
      },
      {
        "name": "queryParametersUi",
        "displayName": "Query Parameters",
        "type": "fixedCollection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "infoMessage",
        "displayName": "You can view the raw requests this node makes in your browser's developer console",
        "type": "notice",
        "default": ""
      },
      {
        "name": "body",
        "displayName": "Body Parameters"
      },
      {
        "name": "headers",
        "displayName": "Headers"
      },
      {
        "name": "qs",
        "displayName": "Query Parameters"
      }
    ],
    "version": 1.0
  },
  "HttpRequestV2": {
    "name": "HttpRequestV2",
    "displayName": "HttpRequestV2",
    "type": "n8n-nodes-base.HttpRequestV2",
    "subtitle": null,
    "description": "We've already implemented auth for many services so that you don't have to set it up manually",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'httpBasicAuth', required: true, displayOptions: { show: { authentication: ['httpBasicAuth'",
    "webhooks": [],
    "properties": [
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options",
        "required": true
      },
      {
        "name": "nodeCredentialType",
        "displayName": "Credential Type",
        "type": "credentialsSelect",
        "default": "",
        "required": true
      },
      {
        "name": "genericAuthType",
        "displayName": "Generic Auth Type",
        "type": "credentialsSelect",
        "default": "",
        "required": true
      },
      {
        "name": "requestMethod",
        "displayName": "Request Method",
        "type": "options"
      },
      {
        "name": "url",
        "displayName": "URL",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "http://example.com/index.html"
      },
      {
        "name": "allowUnauthorizedCerts",
        "displayName": "Ignore SSL Issues (Insecure)",
        "type": "boolean"
      },
      {
        "name": "responseFormat",
        "displayName": "Response Format",
        "type": "options"
      },
      {
        "name": "dataPropertyName",
        "displayName": "Property Name",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "jsonParameters",
        "displayName": "JSON/RAW Parameters",
        "type": "boolean"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "batchInterval",
        "displayName": "Batch Interval",
        "type": "number",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "type": "number"
      },
      {
        "name": "bodyContentType",
        "displayName": "Body Content Type",
        "type": "options"
      },
      {
        "name": "fullResponse",
        "displayName": "Full Response",
        "type": "boolean"
      },
      {
        "name": "followAllRedirects",
        "displayName": "Follow All Redirects",
        "type": "boolean"
      },
      {
        "name": "followRedirect",
        "displayName": "Follow GET/HEAD Redirect",
        "type": "boolean"
      },
      {
        "name": "ignoreResponseCode",
        "displayName": "Ignore Response Code",
        "type": "boolean"
      },
      {
        "name": "bodyContentCustomMimeType",
        "displayName": "MIME Type",
        "type": "string",
        "default": "",
        "placeholder": "text/xml"
      },
      {
        "name": "proxy",
        "displayName": "Proxy",
        "type": "string",
        "default": "",
        "placeholder": "http://myproxy:3128"
      },
      {
        "name": "splitIntoItems",
        "displayName": "Split Into Items",
        "type": "boolean"
      },
      {
        "name": "timeout",
        "displayName": "Timeout",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "useQueryString",
        "displayName": "Use Querystring",
        "type": "boolean"
      },
      {
        "name": "sendBinaryData",
        "displayName": "Send Binary File",
        "type": "boolean"
      },
      {
        "name": "binaryPropertyName",
        "displayName": "Input Binary Field",
        "type": "string",
        "default": "data",
        "required": true
      },
      {
        "name": "bodyParametersJson",
        "displayName": "Body Parameters",
        "type": "json"
      },
      {
        "name": "bodyParametersUi",
        "displayName": "Body Parameters",
        "type": "fixedCollection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "parameter",
        "displayName": "Parameter",
        "type": "string",
        "default": ""
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "string",
        "default": ""
      },
      {
        "name": "headerParametersJson",
        "displayName": "Headers",
        "type": "json"
      },
      {
        "name": "headerParametersUi",
        "displayName": "Headers",
        "type": "fixedCollection",
        "placeholder": "Add Header"
      },
      {
        "name": "queryParametersJson",
        "displayName": "Query Parameters",
        "type": "json"
      },
      {
        "name": "queryParametersUi",
        "displayName": "Query Parameters",
        "type": "fixedCollection",
        "placeholder": "Add Parameter"
      },
      {
        "name": "infoMessage",
        "displayName": "You can view the raw requests this node makes in your browser's developer console",
        "type": "notice",
        "default": ""
      },
      {
        "name": "body",
        "displayName": "Body Parameters"
      },
      {
        "name": "headers",
        "displayName": "Headers"
      },
      {
        "name": "qs",
        "displayName": "Query Parameters"
      }
    ],
    "version": 2.0
  },
  "HttpRequestV3": {
    "name": "HttpRequestV3",
    "displayName": "HttpRequestV3",
    "type": "n8n-nodes-base.HttpRequestV3",
    "subtitle": "={{$parameter[\"method\"] + \": \" + $parameter[\"url\"]}}",
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'httpSslAuth', required: true, displayOptions: { show: { provideSslCertificates: [true",
    "webhooks": [],
    "properties": [
      {
        "name": "HTTP Request",
        "type": "string",
        "description": "Extract manually if needed"
      },
      {
        "name": "httpSslAuth",
        "type": "string",
        "description": "Extract manually if needed"
      }
    ]
  },
  "HubspotV1": {
    "name": "HubspotV1",
    "displayName": "HubspotV1",
    "type": "n8n-nodes-base.HubspotV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": null,
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'hubspotApi', required: true, testedBy: 'hubspotApiTest', displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": [],
    "properties": [
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "HubspotV2": {
    "name": "HubspotV2",
    "displayName": "HubspotV2",
    "type": "n8n-nodes-base.HubspotV2",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": null,
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'hubspotApi', required: true, testedBy: 'hubspotApiTest', displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": [],
    "properties": [
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "IfV1": {
    "name": "IfV1",
    "displayName": "IfV1",
    "type": "n8n-nodes-base.IfV1",
    "subtitle": null,
    "description": "The type of values to compare",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main, NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "conditions",
        "displayName": "Conditions",
        "type": "fixedCollection",
        "placeholder": "Add Condition"
      },
      {
        "name": "boolean",
        "displayName": "Boolean",
        "type": "boolean"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "value2",
        "displayName": "Value 2",
        "type": "boolean"
      },
      {
        "name": "dateTime",
        "displayName": "Date & Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "number",
        "displayName": "Number",
        "type": "number",
        "default": "0"
      },
      {
        "name": "string",
        "displayName": "String",
        "type": "string",
        "default": ""
      },
      {
        "name": "combineOperation",
        "displayName": "Combine",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "IfV2": {
    "name": "IfV2",
    "displayName": "IfV2",
    "type": "n8n-nodes-base.IfV2",
    "subtitle": null,
    "description": "Whether to ignore letter case when evaluating conditions",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main, NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "conditions",
        "displayName": "Conditions",
        "type": "filter",
        "placeholder": "Add Condition"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "ignoreCase",
        "displayName": "Ignore Case",
        "type": "boolean"
      }
    ]
  },
  "ItemListsV1": {
    "name": "ItemListsV1",
    "displayName": "ItemListsV1",
    "type": "n8n-nodes-base.ItemListsV1",
    "subtitle": null,
    "description": "Combine fields into a list in a single new item",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "fieldToSplitOut",
        "displayName": "Field To Split Out",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "include",
        "displayName": "Include",
        "type": "options"
      },
      {
        "name": "fieldsToInclude",
        "displayName": "Fields To Include",
        "type": "fixedCollection"
      },
      {
        "name": "fields",
        "displayName": "",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "aggregate",
        "displayName": "Aggregate",
        "type": "options",
        "default": "aggregateIndividualFields"
      },
      {
        "name": "fieldsToAggregate",
        "displayName": "Fields To Aggregate",
        "type": "fixedCollection"
      },
      {
        "name": "fieldToAggregate",
        "displayName": "",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "renameField",
        "displayName": "Rename Field",
        "type": "boolean"
      },
      {
        "name": "outputFieldName",
        "displayName": "Output Field Name"
      },
      {
        "name": "destinationFieldName",
        "displayName": "Put Output in Field",
        "type": "string"
      },
      {
        "name": "fieldsToExclude",
        "displayName": "Fields To Exclude",
        "type": "fixedCollection"
      },
      {
        "name": "compare",
        "displayName": "Compare",
        "type": "options"
      },
      {
        "name": "fieldsToCompare",
        "displayName": "Fields To Compare",
        "type": "fixedCollection"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "sortFieldsUi",
        "displayName": "Fields To Sort By",
        "type": "fixedCollection"
      },
      {
        "name": "sortField",
        "displayName": "",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. id"
      },
      {
        "name": "order",
        "displayName": "Order",
        "type": "options"
      },
      {
        "name": "code",
        "displayName": "Code",
        "type": "string"
      },
      {
        "name": "maxItems",
        "displayName": "Max Items",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "keep",
        "displayName": "Keep",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "removeOtherFields",
        "displayName": "Remove Other Fields",
        "type": "boolean"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      },
      {
        "name": "mergeLists",
        "displayName": "Merge Lists",
        "type": "boolean"
      },
      {
        "name": "keepMissing",
        "displayName": "Keep Missing And Null Values",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "ItemListsV2": {
    "name": "ItemListsV2",
    "displayName": "ItemListsV2",
    "type": "n8n-nodes-base.ItemListsV2",
    "subtitle": null,
    "description": "Combine fields into a list in a single new item",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "",
    "webhooks": [],
    "properties": [
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "fieldToSplitOut",
        "displayName": "Fields To Split Out",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "include",
        "displayName": "Include",
        "type": "options"
      },
      {
        "name": "fieldsToInclude",
        "displayName": "Fields To Include",
        "type": "fixedCollection"
      },
      {
        "name": "fields",
        "displayName": "",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "aggregate",
        "displayName": "Aggregate",
        "type": "options",
        "default": "aggregateIndividualFields"
      },
      {
        "name": "fieldsToAggregate",
        "displayName": "Fields To Aggregate",
        "type": "fixedCollection"
      },
      {
        "name": "fieldToAggregate",
        "displayName": "",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "renameField",
        "displayName": "Rename Field",
        "type": "boolean"
      },
      {
        "name": "outputFieldName",
        "displayName": "Output Field Name"
      },
      {
        "name": "destinationFieldName",
        "displayName": "Put Output in Field",
        "type": "string"
      },
      {
        "name": "fieldsToExclude",
        "displayName": "Fields To Exclude",
        "type": "fixedCollection"
      },
      {
        "name": "compare",
        "displayName": "Compare",
        "type": "options"
      },
      {
        "name": "fieldsToCompare",
        "displayName": "Fields To Compare",
        "type": "fixedCollection"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "sortFieldsUi",
        "displayName": "Fields To Sort By",
        "type": "fixedCollection"
      },
      {
        "name": "sortField",
        "displayName": "",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. id"
      },
      {
        "name": "order",
        "displayName": "Order",
        "type": "options"
      },
      {
        "name": "code",
        "displayName": "Code",
        "type": "string"
      },
      {
        "name": "maxItems",
        "displayName": "Max Items",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "keep",
        "displayName": "Keep",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "removeOtherFields",
        "displayName": "Remove Other Fields",
        "type": "boolean"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      },
      {
        "name": "mergeLists",
        "displayName": "Merge Lists",
        "type": "boolean"
      },
      {
        "name": "keepMissing",
        "displayName": "Keep Missing And Null Values",
        "type": "boolean"
      }
    ]
  },
  "ItemListsV3": {
    "name": "ItemListsV3",
    "displayName": "ItemListsV3",
    "type": "n8n-nodes-base.ItemListsV3",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "itemLists",
        "displayName": "Item Lists"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden"
      }
    ]
  },
  "LemlistV1": {
    "name": "LemlistV1",
    "displayName": "LemlistV1",
    "type": "n8n-nodes-base.LemlistV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Lemlist API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'lemlistApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lemlist",
        "displayName": "Lemlist"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "LemlistV2": {
    "name": "LemlistV2",
    "displayName": "LemlistV2",
    "type": "n8n-nodes-base.LemlistV2",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Lemlist API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'lemlistApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "lemlist",
        "displayName": "Lemlist"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 2.0
  },
  "MailerLiteTriggerV1": {
    "name": "MailerLiteTriggerV1",
    "displayName": "MailerLiteTriggerV1",
    "type": "n8n-nodes-base.MailerLiteTriggerV1",
    "subtitle": null,
    "description": "Starts the workflow when MailerLite events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailerLiteApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "mailerLiteTrigger",
        "displayName": "MailerLite Trigger"
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MailerLiteV1": {
    "name": "MailerLiteV1",
    "displayName": "MailerLiteV1",
    "type": "n8n-nodes-base.MailerLiteV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Mailer Lite API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailerLiteApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "mailerLite",
        "displayName": "MailerLite"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MailerLiteTriggerV2": {
    "name": "MailerLiteTriggerV2",
    "displayName": "MailerLiteTriggerV2",
    "type": "n8n-nodes-base.MailerLiteTriggerV2",
    "subtitle": null,
    "description": "Starts the workflow when MailerLite events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailerLiteApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "mailerLiteTrigger",
        "displayName": "MailerLite Trigger"
      },
      {
        "name": "events",
        "displayName": "Events",
        "type": "multiOptions"
      }
    ]
  },
  "MailerLiteV2": {
    "name": "MailerLiteV2",
    "displayName": "MailerLiteV2",
    "type": "n8n-nodes-base.MailerLiteV2",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Mailer Lite API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mailerLiteApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "mailerLite",
        "displayName": "MailerLite"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "MattermostV1": {
    "name": "MattermostV1",
    "displayName": "MattermostV1",
    "type": "n8n-nodes-base.MattermostV1",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mattermost",
        "displayName": "Mattermost"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "MergeV1": {
    "name": "MergeV1",
    "displayName": "MergeV1",
    "type": "n8n-nodes-base.MergeV1",
    "subtitle": null,
    "description": "Combines data of both inputs. The output will contain items of input 1 and input 2.",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main, NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "join",
        "displayName": "Join",
        "type": "options"
      },
      {
        "name": "propertyName1",
        "displayName": "Property Input 1",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "propertyName2",
        "displayName": "Property Input 2",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "output",
        "displayName": "Output Data",
        "type": "options"
      },
      {
        "name": "overwrite",
        "displayName": "Overwrite",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MergeV2": {
    "name": "MergeV2",
    "displayName": "MergeV2",
    "type": "n8n-nodes-base.MergeV2",
    "subtitle": null,
    "description": "All items of input 1, then all items of input 2",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main, NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "combinationMode",
        "displayName": "Combination Mode",
        "type": "options"
      },
      {
        "name": "mergeByFields",
        "displayName": "Fields to Match",
        "type": "fixedCollection",
        "placeholder": "Add Fields to Match"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "field2",
        "displayName": "Input 2 Field",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "joinMode",
        "displayName": "Output Type",
        "type": "options"
      },
      {
        "name": "outputDataFrom",
        "displayName": "Output Data From",
        "type": "options"
      },
      {
        "name": "chooseBranchMode",
        "displayName": "Output Type",
        "type": "options"
      },
      {
        "name": "output",
        "displayName": "Output",
        "type": "options"
      }
    ]
  },
  "MergeV3": {
    "name": "MergeV3",
    "displayName": "MergeV3",
    "type": "n8n-nodes-base.MergeV3",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "merge",
        "displayName": "Merge"
      }
    ]
  },
  "AzureCosmosDb": {
    "name": "AzureCosmosDb",
    "displayName": "AzureCosmosDb",
    "type": "n8n-nodes-base.AzureCosmosDb",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "Interact with Azure Cosmos DB API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftAzureCosmosDbSharedKeyApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "azureCosmosDb",
        "displayName": "Azure Cosmos DB"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MicrosoftDynamicsCrm": {
    "name": "MicrosoftDynamicsCrm",
    "displayName": "MicrosoftDynamicsCrm",
    "type": "n8n-nodes-base.MicrosoftDynamicsCrm",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Microsoft Dynamics CRM API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftDynamicsOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftDynamicsCrm",
        "displayName": "Microsoft Dynamics CRM"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MicrosoftEntra": {
    "name": "MicrosoftEntra",
    "displayName": "MicrosoftEntra",
    "type": "n8n-nodes-base.MicrosoftEntra",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Interact with Microsoft Entra ID API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftEntraOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftEntra",
        "displayName": "Microsoft Entra ID"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MicrosoftExcel": {
    "name": "microsoftExcel",
    "displayName": "Microsoft Excel 365",
    "type": "n8n-nodes-base.MicrosoftExcel",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Microsoft Excel API",
    "group": [
      "input"
    ],
    "defaultVersion": 2.1,
    "availableVersions": [
      1.0,
      2.0,
      2.1
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftExcel",
        "displayName": "Microsoft Excel 365"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "MicrosoftGraphSecurity": {
    "name": "MicrosoftGraphSecurity",
    "displayName": "MicrosoftGraphSecurity",
    "type": "n8n-nodes-base.MicrosoftGraphSecurity",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Microsoft Graph Security API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftGraphSecurityOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftGraphSecurity",
        "displayName": "Microsoft Graph Security"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MicrosoftOneDrive": {
    "name": "MicrosoftOneDrive",
    "displayName": "MicrosoftOneDrive",
    "type": "n8n-nodes-base.MicrosoftOneDrive",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Microsoft OneDrive API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftOneDriveOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftOneDrive",
        "displayName": "Microsoft OneDrive"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MicrosoftOneDriveTrigger": {
    "name": "MicrosoftOneDriveTrigger",
    "displayName": "MicrosoftOneDriveTrigger",
    "type": "n8n-nodes-base.MicrosoftOneDriveTrigger",
    "subtitle": "={{($parameter[\"event\"])}}",
    "description": "Trigger for Microsoft OneDrive API.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftOneDriveOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftOneDriveTrigger",
        "displayName": "Microsoft OneDrive Trigger"
      }
    ],
    "version": 1.0
  },
  "MicrosoftOutlook": {
    "name": "microsoftOutlook",
    "displayName": "Microsoft Outlook",
    "type": "n8n-nodes-base.MicrosoftOutlook",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Microsoft Outlook API",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftOutlook",
        "displayName": "Microsoft Outlook"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "message"
      }
    ]
  },
  "MicrosoftOutlookTrigger": {
    "name": "MicrosoftOutlookTrigger",
    "displayName": "MicrosoftOutlookTrigger",
    "type": "n8n-nodes-base.MicrosoftOutlookTrigger",
    "subtitle": "={{\"Microsoft Outlook Trigger\"}}",
    "description": "Fetches emails from Microsoft Outlook and starts the workflow on specified polling intervals.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftOutlookOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftOutlookTrigger",
        "displayName": "Microsoft Outlook Trigger"
      },
      {
        "name": "event",
        "displayName": "Trigger On",
        "type": "options",
        "default": "messageReceived"
      }
    ],
    "version": 1.0
  },
  "MicrosoftSharePoint": {
    "name": "MicrosoftSharePoint",
    "displayName": "MicrosoftSharePoint",
    "type": "n8n-nodes-base.MicrosoftSharePoint",
    "subtitle": "={{ $parameter[\"operation\"] + \": \" + $parameter[\"resource\"] }}",
    "description": "Interact with Microsoft SharePoint API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftSharePointOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftSharePoint",
        "displayName": "Microsoft SharePoint"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MicrosoftSql": {
    "name": "MicrosoftSql",
    "displayName": "MicrosoftSql",
    "type": "n8n-nodes-base.MicrosoftSql",
    "subtitle": null,
    "description": "Get, add and update data in Microsoft SQL",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftSql', required: true, testedBy: 'microsoftSqlConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftSql",
        "displayName": "Microsoft SQL"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "string"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      },
      {
        "name": "updateKey",
        "displayName": "Update Key",
        "type": "string"
      },
      {
        "name": "deleteKey",
        "displayName": "Delete Key",
        "type": "string"
      }
    ]
  },
  "AzureStorage": {
    "name": "AzureStorage",
    "displayName": "AzureStorage",
    "type": "n8n-nodes-base.AzureStorage",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Interact with Azure Storage API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'azureStorageOAuth2Api', required: true, displayOptions: { show: { authentication: ['oAuth2'",
    "webhooks": [],
    "properties": [
      {
        "name": "azureStorage",
        "displayName": "Azure Storage"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MicrosoftTeams": {
    "name": "microsoftTeams",
    "displayName": "Microsoft Teams",
    "type": "n8n-nodes-base.MicrosoftTeams",
    "subtitle": null,
    "description": "Consume Microsoft Teams API",
    "group": [
      "input"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      1.1,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftTeams",
        "displayName": "Microsoft Teams"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "MicrosoftTeamsTrigger": {
    "name": "MicrosoftTeamsTrigger",
    "displayName": "MicrosoftTeamsTrigger",
    "type": "n8n-nodes-base.MicrosoftTeamsTrigger",
    "subtitle": "Microsoft Teams Trigger",
    "description": "Triggers workflows in n8n based on events from Microsoft Teams, such as new messages or team updates, using specified configurations.",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftTeamsOAuth2Api', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "microsoftTeamsTrigger",
        "displayName": "Microsoft Teams Trigger"
      },
      {
        "name": "event",
        "displayName": "Trigger On",
        "type": "options",
        "default": "newChannelMessage"
      },
      {
        "name": "watchAllTeams",
        "displayName": "Watch All Teams",
        "type": "boolean"
      },
      {
        "name": "teamId",
        "displayName": "Team",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a team..."
      },
      {
        "name": "id",
        "displayName": "By ID",
        "type": "string",
        "placeholder": "e.g., 61165b04-e4cc-4026-b43f-926b4e2a7182"
      },
      {
        "name": "url",
        "displayName": "By URL",
        "type": "string",
        "placeholder": "e.g., https://teams.microsoft.com/l/team/19%3A...groupId=your-team-id&tenantId=..."
      },
      {
        "name": "watchAllChannels",
        "displayName": "Watch All Channels",
        "type": "boolean"
      },
      {
        "name": "channelId",
        "displayName": "Channel",
        "type": "resourceLocator"
      },
      {
        "name": "watchAllChats",
        "displayName": "Watch All Chats",
        "type": "boolean"
      },
      {
        "name": "chatId",
        "displayName": "Chat",
        "type": "resourceLocator"
      }
    ],
    "version": 1.0
  },
  "MicrosoftToDo": {
    "name": "MicrosoftToDo",
    "displayName": "MicrosoftToDo",
    "type": "n8n-nodes-base.MicrosoftToDo",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Microsoft To Do API.",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftToDoOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftToDo",
        "displayName": "Microsoft To Do"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MicrosoftExcelV1": {
    "name": "MicrosoftExcelV1",
    "displayName": "MicrosoftExcelV1",
    "type": "n8n-nodes-base.MicrosoftExcelV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Microsoft Excel API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftExcelOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftExcel",
        "displayName": "Microsoft Excel"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "MicrosoftExcelV2": {
    "name": "MicrosoftExcelV2",
    "displayName": "MicrosoftExcelV2",
    "type": "n8n-nodes-base.MicrosoftExcelV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftExcel",
        "displayName": "Microsoft Excel 365"
      },
      {
        "name": "notice",
        "displayName": "This node connects to the Microsoft 365 cloud platform. Use the \\",
        "type": "notice",
        "default": ""
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "MicrosoftOutlookV1": {
    "name": "MicrosoftOutlookV1",
    "displayName": "MicrosoftOutlookV1",
    "type": "n8n-nodes-base.MicrosoftOutlookV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Microsoft Outlook API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftOutlookOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftOutlook",
        "displayName": "Microsoft Outlook"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options",
        "default": "message"
      }
    ],
    "version": 1.0
  },
  "MicrosoftOutlookV2": {
    "name": "MicrosoftOutlookV2",
    "displayName": "MicrosoftOutlookV2",
    "type": "n8n-nodes-base.MicrosoftOutlookV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "TODO_add_property",
        "type": "string",
        "description": "Fill manually if needed"
      }
    ]
  },
  "MicrosoftTeamsV1": {
    "name": "MicrosoftTeamsV1",
    "displayName": "MicrosoftTeamsV1",
    "type": "n8n-nodes-base.MicrosoftTeamsV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Microsoft Teams API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'microsoftTeamsOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftTeams",
        "displayName": "Microsoft Teams"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "MicrosoftTeamsV2": {
    "name": "MicrosoftTeamsV2",
    "displayName": "MicrosoftTeamsV2",
    "type": "n8n-nodes-base.MicrosoftTeamsV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "microsoftTeams",
        "displayName": "Microsoft Teams"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "MySqlV1": {
    "name": "MySqlV1",
    "displayName": "MySqlV1",
    "type": "n8n-nodes-base.MySqlV1",
    "subtitle": null,
    "description": "Get, add and update data in MySQL",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'mySql', required: true, testedBy: 'mysqlConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "mySql",
        "displayName": "MySQL"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a Table..."
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "placeholder": "table_name"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection"
      },
      {
        "name": "ignore",
        "displayName": "Ignore",
        "type": "boolean"
      },
      {
        "name": "priority",
        "displayName": "Priority",
        "type": "options"
      },
      {
        "name": "updateKey",
        "displayName": "Update Key",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "MySqlV2": {
    "name": "MySqlV2",
    "displayName": "MySqlV2",
    "type": "n8n-nodes-base.MySqlV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mySql",
        "displayName": "MySQL"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden"
      }
    ]
  },
  "NetscalerAdc": {
    "name": "NetscalerAdc",
    "displayName": "NetscalerAdc",
    "type": "n8n-nodes-base.NetscalerAdc",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Netscaler ADC API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'citrixAdcApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "citrixAdc",
        "displayName": "Netscaler ADC"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "NotionV1": {
    "name": "NotionV1",
    "displayName": "NotionV1",
    "type": "n8n-nodes-base.NotionV1",
    "subtitle": null,
    "description": "Timezone set in n8n",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "Default",
        "type": "string",
        "description": "Extract manually if needed"
      }
    ]
  },
  "NotionV2": {
    "name": "NotionV2",
    "displayName": "NotionV2",
    "type": "n8n-nodes-base.NotionV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "TODO_add_property",
        "type": "string",
        "description": "Fill manually if needed"
      }
    ]
  },
  "PostgresV1": {
    "name": "PostgresV1",
    "displayName": "PostgresV1",
    "type": "n8n-nodes-base.PostgresV1",
    "subtitle": null,
    "description": "Get, add and update data in Postgres",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'postgres', required: true, testedBy: 'postgresConnectionTest', },",
    "webhooks": [],
    "properties": [
      {
        "name": "postgres",
        "displayName": "Postgres"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options"
      },
      {
        "name": "query",
        "displayName": "Query",
        "type": "string"
      },
      {
        "name": "schema",
        "displayName": "Schema",
        "type": "string"
      },
      {
        "name": "table",
        "displayName": "Table",
        "type": "string"
      },
      {
        "name": "columns",
        "displayName": "Columns",
        "type": "string"
      },
      {
        "name": "updateKey",
        "displayName": "Update Key",
        "type": "string"
      },
      {
        "name": "returnFields",
        "displayName": "Return Fields",
        "type": "string"
      },
      {
        "name": "additionalFields",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "largeNumbersOutput",
        "displayName": "Output Large-Format Numbers As",
        "type": "options"
      },
      {
        "name": "queryParams",
        "displayName": "Query Parameters",
        "type": "string"
      }
    ],
    "version": 1.0
  },
  "PostgresV2": {
    "name": "PostgresV2",
    "displayName": "PostgresV2",
    "type": "n8n-nodes-base.PostgresV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "postgres",
        "displayName": "Postgres"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "hidden"
      }
    ]
  },
  "SeaTableTriggerV1": {
    "name": "SeaTableTriggerV1",
    "displayName": "SeaTableTriggerV1",
    "type": "n8n-nodes-base.SeaTableTriggerV1",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "The name of SeaTable table to access. Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>.",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'seaTableApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "tableName",
        "displayName": "Table Name or ID",
        "type": "options",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "SeaTableV1": {
    "name": "SeaTableV1",
    "displayName": "SeaTableV1",
    "type": "n8n-nodes-base.SeaTableV1",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "seaTable",
        "displayName": "SeaTable"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "SeaTableTriggerV2": {
    "name": "SeaTableTriggerV2",
    "displayName": "SeaTableTriggerV2",
    "type": "n8n-nodes-base.SeaTableTriggerV2",
    "subtitle": "={{$parameter[\"event\"]}}",
    "description": "Trigger on newly created rows",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'seaTableApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "event",
        "displayName": "Event",
        "type": "options"
      },
      {
        "name": "tableName",
        "displayName": "Table Name",
        "type": "options",
        "required": true
      },
      {
        "name": "viewName",
        "displayName": "View Name",
        "type": "options"
      },
      {
        "name": "assetColumn",
        "displayName": "Signature Column",
        "type": "options",
        "required": true
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Option"
      },
      {
        "name": "simple",
        "displayName": "Simplify",
        "type": "boolean"
      },
      {
        "name": "convert",
        "displayName": "Return Column Names",
        "type": "boolean"
      }
    ],
    "version": 2.0
  },
  "SeaTableV2": {
    "name": "SeaTableV2",
    "displayName": "SeaTableV2",
    "type": "n8n-nodes-base.SeaTableV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "seaTable",
        "displayName": "SeaTable"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "SetV1": {
    "name": "SetV1",
    "displayName": "SetV1",
    "type": "n8n-nodes-base.SetV1",
    "subtitle": null,
    "description": "Sets values on items and optionally remove other values",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "set",
        "displayName": "Set"
      },
      {
        "name": "keepOnlySet",
        "displayName": "Keep Only Set",
        "type": "boolean"
      },
      {
        "name": "values",
        "displayName": "Values to Set",
        "type": "fixedCollection",
        "placeholder": "Add Value"
      },
      {
        "name": "boolean",
        "displayName": "Boolean",
        "type": "string",
        "default": "propertyName"
      },
      {
        "name": "value",
        "displayName": "Value",
        "type": "boolean"
      },
      {
        "name": "number",
        "displayName": "Number",
        "type": "string",
        "default": "propertyName"
      },
      {
        "name": "string",
        "displayName": "String",
        "type": "string",
        "default": "propertyName"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "dotNotation",
        "displayName": "Dot Notation",
        "type": "boolean"
      }
    ]
  },
  "SetV2": {
    "name": "SetV2",
    "displayName": "SetV2",
    "type": "n8n-nodes-base.SetV2",
    "subtitle": "={{$parameter[\"mode\"]}}",
    "description": "Modify, add, or remove item fields",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "set",
        "displayName": "Edit Fields (Set)"
      },
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "duplicateItem",
        "displayName": "Duplicate Item",
        "type": "boolean"
      },
      {
        "name": "duplicateCount",
        "displayName": "Duplicate Item Count",
        "type": "number",
        "default": "0",
        "typeOptions": {
          "minValue": 0
        }
      },
      {
        "name": "duplicateWarning",
        "displayName": "Item duplication is set in the node settings. This option will be ignored when the workflow runs automatically.",
        "type": "notice",
        "default": ""
      },
      {
        "name": "include",
        "displayName": "Include in Output",
        "type": "options",
        "default": "all"
      },
      {
        "name": "includeOtherFields",
        "displayName": "Include Other Input Fields",
        "type": "boolean"
      },
      {
        "name": "includeFields",
        "displayName": "Fields to Include",
        "type": "string",
        "default": "",
        "placeholder": "e.g. fieldToInclude1,fieldToInclude2"
      },
      {
        "name": "excludeFields",
        "displayName": "Fields to Exclude",
        "type": "string",
        "default": "",
        "placeholder": "e.g. fieldToExclude1,fieldToExclude2"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "includeBinary",
        "displayName": "Include Binary File",
        "type": "boolean"
      },
      {
        "name": "stripBinary",
        "displayName": "Strip Binary Data",
        "type": "boolean"
      },
      {
        "name": "ignoreConversionErrors",
        "displayName": "Ignore Type Conversion Errors",
        "type": "boolean"
      },
      {
        "name": "dotNotation",
        "displayName": "Support Dot Notation",
        "type": "boolean"
      }
    ]
  },
  "SlackV1": {
    "name": "SlackV1",
    "displayName": "SlackV1",
    "type": "n8n-nodes-base.SlackV1",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'slackApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "SlackV2": {
    "name": "SlackV2",
    "displayName": "SlackV2",
    "type": "n8n-nodes-base.SlackV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'slackApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "SplitInBatchesV1": {
    "name": "SplitInBatchesV1",
    "displayName": "SplitInBatchesV1",
    "type": "n8n-nodes-base.SplitInBatchesV1",
    "subtitle": null,
    "description": "Split data into batches and iterate over each batch",
    "group": [
      "organization"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "splitInBatches",
        "displayName": "Split In Batches"
      },
      {
        "name": "splitInBatchesNotice",
        "displayName": "You may not need this node — n8n nodes automatically run once for each input item. <a href=\"https://docs.n8n.io/getting-started/key-concepts/looping.html#using-loops-in-n8n\" target=\"_blank\">More info</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "reset",
        "displayName": "Reset",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "SplitInBatchesV2": {
    "name": "SplitInBatchesV2",
    "displayName": "SplitInBatchesV2",
    "type": "n8n-nodes-base.SplitInBatchesV2",
    "subtitle": null,
    "description": "Split data into batches and iterate over each batch",
    "group": [
      "organization"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main, NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "splitInBatches",
        "displayName": "Split In Batches"
      },
      {
        "name": "splitInBatchesNotice",
        "displayName": "You may not need this node — n8n nodes automatically run once for each input item. <a href=\"https://docs.n8n.io/getting-started/key-concepts/looping.html#using-loops-in-n8n\" target=\"_blank\">More info</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "reset",
        "displayName": "Reset",
        "type": "boolean"
      }
    ],
    "version": 2.0
  },
  "SplitInBatchesV3": {
    "name": "SplitInBatchesV3",
    "displayName": "SplitInBatchesV3",
    "type": "n8n-nodes-base.SplitInBatchesV3",
    "subtitle": null,
    "description": "Split data into batches and iterate over each batch",
    "group": [
      "organization"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main, NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "splitInBatches",
        "displayName": "Loop Over Items (Split in Batches)"
      },
      {
        "name": "splitInBatchesNotice",
        "displayName": "You may not need this node — n8n nodes automatically run once for each input item. <a href=\"https://docs.n8n.io/getting-started/key-concepts/looping.html#using-loops-in-n8n\" target=\"_blank\">More info</a>",
        "type": "notice",
        "default": ""
      },
      {
        "name": "batchSize",
        "displayName": "Batch Size",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "reset",
        "displayName": "Reset",
        "type": "boolean"
      }
    ],
    "version": 3.0
  },
  "SplunkV1": {
    "name": "SplunkV1",
    "displayName": "SplunkV1",
    "type": "n8n-nodes-base.SplunkV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Splunk Enterprise API",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'splunkApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "splunk",
        "displayName": "Splunk"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "SplunkV2": {
    "name": "SplunkV2",
    "displayName": "SplunkV2",
    "type": "n8n-nodes-base.SplunkV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "splunk",
        "displayName": "Splunk"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "SpreadsheetFileV1": {
    "name": "SpreadsheetFileV1",
    "displayName": "SpreadsheetFileV1",
    "type": "n8n-nodes-base.SpreadsheetFileV1",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "Spreadsheet File",
        "type": "string",
        "description": "Extract manually if needed"
      }
    ],
    "version": 1.0
  },
  "SpreadsheetFileV2": {
    "name": "SpreadsheetFileV2",
    "displayName": "SpreadsheetFileV2",
    "type": "n8n-nodes-base.SpreadsheetFileV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "Spreadsheet File",
        "type": "string",
        "description": "Extract manually if needed"
      }
    ],
    "version": 2.0
  },
  "SwitchV1": {
    "name": "SwitchV1",
    "displayName": "SwitchV1",
    "type": "n8n-nodes-base.SwitchV1",
    "subtitle": null,
    "description": "Expression decides how to route data",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main, NodeConnectionTypes.Main, NodeConnectionTypes.Main, NodeConnectionTypes.Main,",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "output",
        "displayName": "Output",
        "type": "number",
        "typeOptions": {
          "minValue": 0,
          "maxValue": 3
        }
      },
      {
        "name": "dataType",
        "displayName": "Data Type",
        "type": "options"
      },
      {
        "name": "value1",
        "displayName": "Value 1",
        "type": "boolean"
      },
      {
        "name": "rules",
        "displayName": "Routing Rules",
        "type": "fixedCollection",
        "placeholder": "Add Routing Rule"
      },
      {
        "name": "value2",
        "displayName": "Value 2",
        "type": "boolean"
      },
      {
        "name": "fallbackOutput",
        "displayName": "Fallback Output",
        "type": "options"
      }
    ]
  },
  "SwitchV2": {
    "name": "SwitchV2",
    "displayName": "SwitchV2",
    "type": "n8n-nodes-base.SwitchV2",
    "subtitle": null,
    "description": "Expression decides how to route data",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "output",
        "displayName": "Output",
        "type": "string"
      },
      {
        "name": "outputsAmount",
        "displayName": "Outputs Amount",
        "type": "number"
      },
      {
        "name": "dataType",
        "displayName": "Data Type",
        "type": "options"
      },
      {
        "name": "value1",
        "displayName": "Value 1",
        "type": "boolean"
      },
      {
        "name": "rules",
        "displayName": "Routing Rules",
        "type": "fixedCollection",
        "placeholder": "Add Routing Rule"
      },
      {
        "name": "value2",
        "displayName": "Value 2",
        "type": "boolean"
      },
      {
        "name": "outputKey",
        "displayName": "Output Key",
        "type": "string",
        "default": ""
      },
      {
        "name": "fallbackOutput",
        "displayName": "Fallback Output Name or ID",
        "type": "options"
      }
    ]
  },
  "SwitchV3": {
    "name": "SwitchV3",
    "displayName": "SwitchV3",
    "type": "n8n-nodes-base.SwitchV3",
    "subtitle": null,
    "description": "Build a matching rule for each output",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "mode",
        "displayName": "Mode",
        "type": "options"
      },
      {
        "name": "numberOutputs",
        "displayName": "Number of Outputs",
        "type": "number"
      },
      {
        "name": "output",
        "displayName": "Output Index",
        "type": "number"
      },
      {
        "name": "rules",
        "displayName": "Routing Rules",
        "type": "fixedCollection",
        "placeholder": "Add Routing Rule"
      },
      {
        "name": "values",
        "displayName": "Values",
        "type": "filter",
        "placeholder": "Add Condition"
      },
      {
        "name": "renameOutput",
        "displayName": "Rename Output",
        "type": "boolean"
      },
      {
        "name": "outputKey",
        "displayName": "Output Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "fallbackOutput",
        "displayName": "Fallback Output",
        "type": "options"
      },
      {
        "name": "ignoreCase",
        "displayName": "Ignore Case",
        "type": "boolean"
      },
      {
        "name": "renameFallbackOutput",
        "displayName": "Rename Fallback Output",
        "type": "string",
        "default": "",
        "placeholder": "e.g. Fallback"
      },
      {
        "name": "allMatchingOutputs",
        "displayName": "Send data to all matching outputs",
        "type": "boolean"
      }
    ]
  },
  "SyncroMspV1": {
    "name": "SyncroMspV1",
    "displayName": "SyncroMspV1",
    "type": "n8n-nodes-base.SyncroMspV1",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "syncroMsp",
        "displayName": "SyncroMSP"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  },
  "TodoistV1": {
    "name": "TodoistV1",
    "displayName": "TodoistV1",
    "type": "n8n-nodes-base.TodoistV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Todoist API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'todoistApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": [],
    "properties": [
      {
        "name": "todoist",
        "displayName": "Todoist"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "required": true
      },
      {
        "name": "taskId",
        "displayName": "Task ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "project",
        "displayName": "Project Name or ID",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a project..."
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string",
        "placeholder": "2302163813"
      },
      {
        "name": "section",
        "displayName": "Section Name or ID",
        "type": "options"
      },
      {
        "name": "labels",
        "displayName": "Label Names or IDs",
        "type": "multiOptions"
      },
      {
        "name": "content",
        "displayName": "Content",
        "type": "string"
      },
      {
        "name": "commands",
        "displayName": "Sync Commands",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": ""
      },
      {
        "name": "dueDateTime",
        "displayName": "Due Date Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "dueLang",
        "displayName": "Due String Locale",
        "type": "string",
        "default": ""
      },
      {
        "name": "dueString",
        "displayName": "Due String",
        "type": "string",
        "default": ""
      },
      {
        "name": "parentId",
        "displayName": "Parent Name or ID",
        "type": "options"
      },
      {
        "name": "priority",
        "displayName": "Priority",
        "type": "number",
        "typeOptions": {
          "minValue": 1,
          "maxValue": 4
        }
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "filter",
        "displayName": "Filter",
        "type": "string",
        "default": ""
      },
      {
        "name": "ids",
        "displayName": "IDs",
        "type": "string",
        "default": ""
      },
      {
        "name": "labelId",
        "displayName": "Label Name or ID",
        "type": "options"
      },
      {
        "name": "lang",
        "displayName": "Lang",
        "type": "string",
        "default": ""
      },
      {
        "name": "projectId",
        "displayName": "Project Name or ID",
        "type": "options"
      },
      {
        "name": "sectionId",
        "displayName": "Section Name or ID",
        "type": "options"
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      }
    ],
    "version": 1.0
  },
  "TodoistV2": {
    "name": "TodoistV2",
    "displayName": "TodoistV2",
    "type": "n8n-nodes-base.TodoistV2",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Todoist API",
    "group": [
      "output"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'todoistApi', required: true, displayOptions: { show: { authentication: ['apiKey'",
    "webhooks": [],
    "properties": [
      {
        "name": "todoist",
        "displayName": "Todoist"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "operation",
        "displayName": "Operation",
        "type": "options",
        "required": true
      },
      {
        "name": "taskId",
        "displayName": "Task ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "project",
        "displayName": "Project Name or ID",
        "type": "resourceLocator"
      },
      {
        "name": "list",
        "displayName": "From List",
        "type": "list",
        "placeholder": "Select a project..."
      },
      {
        "name": "id",
        "displayName": "ID",
        "type": "string",
        "placeholder": "2302163813"
      },
      {
        "name": "section",
        "displayName": "Section Name or ID",
        "type": "options"
      },
      {
        "name": "options",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "parent",
        "displayName": "Parent Name or ID",
        "type": "options"
      },
      {
        "name": "labels",
        "displayName": "Label Names",
        "type": "multiOptions"
      },
      {
        "name": "content",
        "displayName": "Content",
        "type": "string"
      },
      {
        "name": "text",
        "displayName": "Text",
        "type": "string"
      },
      {
        "name": "note",
        "displayName": "Note",
        "type": "string",
        "default": ""
      },
      {
        "name": "reminder",
        "displayName": "Reminder",
        "type": "string",
        "default": ""
      },
      {
        "name": "auto_reminder",
        "displayName": "Auto Reminder",
        "type": "boolean"
      },
      {
        "name": "description",
        "displayName": "Description",
        "type": "string",
        "default": ""
      },
      {
        "name": "dueDateTime",
        "displayName": "Due Date Time",
        "type": "dateTime",
        "default": ""
      },
      {
        "name": "dueLang",
        "displayName": "Due String Locale",
        "type": "string",
        "default": ""
      },
      {
        "name": "dueString",
        "displayName": "Due String",
        "type": "string",
        "default": ""
      },
      {
        "name": "parentId",
        "displayName": "Parent Name or ID",
        "type": "options"
      },
      {
        "name": "priority",
        "displayName": "Priority",
        "type": "number",
        "typeOptions": {
          "minValue": 1,
          "maxValue": 4
        }
      },
      {
        "name": "order",
        "displayName": "Order",
        "type": "number",
        "default": "0"
      },
      {
        "name": "dueDate",
        "displayName": "Due Date",
        "type": "string",
        "default": "",
        "placeholder": "YYYY-MM-DD"
      },
      {
        "name": "assigneeId",
        "displayName": "Assignee ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "duration",
        "displayName": "Duration",
        "type": "number",
        "default": "0"
      },
      {
        "name": "durationUnit",
        "displayName": "Duration Unit",
        "type": "options"
      },
      {
        "name": "deadlineDate",
        "displayName": "Deadline Date",
        "type": "string",
        "default": "",
        "placeholder": "YYYY-MM-DD"
      },
      {
        "name": "returnAll",
        "displayName": "Return All",
        "type": "boolean"
      },
      {
        "name": "limit",
        "displayName": "Limit",
        "type": "number"
      },
      {
        "name": "filters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "filter",
        "displayName": "Filter",
        "type": "string",
        "default": ""
      },
      {
        "name": "ids",
        "displayName": "IDs",
        "type": "string",
        "default": ""
      },
      {
        "name": "labelId",
        "displayName": "Label Name or ID",
        "type": "options"
      },
      {
        "name": "lang",
        "displayName": "Lang",
        "type": "string",
        "default": ""
      },
      {
        "name": "projectId",
        "displayName": "Project Name or ID",
        "type": "options"
      },
      {
        "name": "sectionId",
        "displayName": "Section Name or ID",
        "type": "options"
      },
      {
        "name": "updateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "name",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "projectOptions",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "color",
        "displayName": "Color",
        "type": "options",
        "default": ""
      },
      {
        "name": "is_favorite",
        "displayName": "Is Favorite",
        "type": "boolean"
      },
      {
        "name": "parent_id",
        "displayName": "Parent ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "view_style",
        "displayName": "View Style",
        "type": "options"
      },
      {
        "name": "projectUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "sectionProject",
        "displayName": "Project Name or ID",
        "type": "resourceLocator"
      },
      {
        "name": "sectionName",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "sectionOptions",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "sectionUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "sectionFilters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "project_id",
        "displayName": "Project Name or ID",
        "type": "options"
      },
      {
        "name": "commentId",
        "displayName": "Comment ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "commentTaskId",
        "displayName": "Task ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "commentContent",
        "displayName": "Content",
        "type": "string"
      },
      {
        "name": "commentUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "commentFilters",
        "displayName": "Filters",
        "type": "collection",
        "placeholder": "Add Filter"
      },
      {
        "name": "task_id",
        "displayName": "Task ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "labelName",
        "displayName": "Name",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "labelOptions",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "labelUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "reminderId",
        "displayName": "Reminder ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "itemId",
        "displayName": "Task ID",
        "type": "string",
        "default": "",
        "required": true
      },
      {
        "name": "dueDateType",
        "displayName": "Due Date Type",
        "type": "options"
      },
      {
        "name": "natural_language_representation",
        "displayName": "Natural Language Representation",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g., \"tomorrow 2pm\", \"monday 10:45am\""
      },
      {
        "name": "date",
        "displayName": "Date",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "YYYY-MM-DD"
      },
      {
        "name": "datetime",
        "displayName": "Date Time",
        "type": "dateTime",
        "default": "",
        "required": true
      },
      {
        "name": "timezone",
        "displayName": "Timezone",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g., \"America/New_York\""
      },
      {
        "name": "reminderOptions",
        "displayName": "Additional Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "minute_offset",
        "displayName": "Minute Offset",
        "type": "number",
        "default": "0"
      },
      {
        "name": "notify_uid",
        "displayName": "Notify User ID",
        "type": "string",
        "default": ""
      },
      {
        "name": "reminderUpdateFields",
        "displayName": "Update Fields",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "due",
        "displayName": "Due",
        "type": "collection",
        "placeholder": "Add Due Date Option"
      },
      {
        "name": "string",
        "displayName": "Natural Language",
        "type": "string",
        "default": "",
        "placeholder": "e.g., \"tomorrow 2pm\", \"monday 10:45am\""
      }
    ]
  },
  "Aggregate": {
    "name": "Aggregate",
    "displayName": "Aggregate",
    "type": "n8n-nodes-base.Aggregate",
    "subtitle": "",
    "description": "Combine a field from many items into a list in a single item",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "aggregate",
        "displayName": "Aggregate"
      },
      {
        "name": "fieldsToAggregate",
        "displayName": "Fields To Aggregate",
        "type": "fixedCollection"
      },
      {
        "name": "fieldToAggregate",
        "displayName": "",
        "type": "string",
        "default": "",
        "placeholder": "e.g. id"
      },
      {
        "name": "renameField",
        "displayName": "Rename Field",
        "type": "boolean"
      },
      {
        "name": "outputFieldName",
        "displayName": "Output Field Name"
      },
      {
        "name": "destinationFieldName",
        "displayName": "Put Output in Field",
        "type": "string"
      },
      {
        "name": "include",
        "displayName": "Include",
        "type": "options",
        "default": "allFields"
      },
      {
        "name": "fieldsToExclude",
        "displayName": "Fields To Exclude",
        "type": "string",
        "default": "",
        "placeholder": "e.g. email, name"
      },
      {
        "name": "fieldsToInclude",
        "displayName": "Fields To Include",
        "type": "string",
        "default": "",
        "placeholder": "e.g. email, name"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      },
      {
        "name": "mergeLists",
        "displayName": "Merge Lists",
        "type": "boolean"
      },
      {
        "name": "includeBinaries",
        "displayName": "Include Binaries",
        "type": "boolean"
      },
      {
        "name": "keepOnlyUnique",
        "displayName": "Keep Only Unique Binaries",
        "type": "boolean"
      },
      {
        "name": "keepMissing",
        "displayName": "Keep Missing And Null Values",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Limit": {
    "name": "Limit",
    "displayName": "Limit",
    "type": "n8n-nodes-base.Limit",
    "subtitle": "",
    "description": "Restrict the number of items",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "limit",
        "displayName": "Limit"
      },
      {
        "name": "maxItems",
        "displayName": "Max Items",
        "type": "number",
        "typeOptions": {
          "minValue": 1
        }
      },
      {
        "name": "keep",
        "displayName": "Keep",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "RemoveDuplicates": {
    "name": "removeDuplicates",
    "displayName": "Remove Duplicates",
    "type": "n8n-nodes-base.RemoveDuplicates",
    "subtitle": null,
    "description": "Delete items with matching field values",
    "group": [
      "transform"
    ],
    "defaultVersion": 2.0,
    "availableVersions": [
      1.0,
      1.1,
      2.0
    ],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "removeDuplicates",
        "displayName": "Remove Duplicates"
      },
      {
        "name": "compare",
        "displayName": "Compare",
        "type": "options"
      },
      {
        "name": "fieldsToExclude",
        "displayName": "Fields To Exclude",
        "type": "string",
        "default": "",
        "placeholder": "e.g. email, name"
      },
      {
        "name": "fieldsToCompare",
        "displayName": "Fields To Compare",
        "type": "string",
        "default": "",
        "placeholder": "e.g. email, name"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      },
      {
        "name": "removeOtherFields",
        "displayName": "Remove Other Fields",
        "type": "boolean"
      }
    ]
  },
  "Sort": {
    "name": "Sort",
    "displayName": "Sort",
    "type": "n8n-nodes-base.Sort",
    "subtitle": "",
    "description": "Change items order",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "sort",
        "displayName": "Sort"
      },
      {
        "name": "type",
        "displayName": "Type",
        "type": "options"
      },
      {
        "name": "sortFieldsUi",
        "displayName": "Fields To Sort By",
        "type": "fixedCollection"
      },
      {
        "name": "sortField",
        "displayName": "",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "e.g. id"
      },
      {
        "name": "order",
        "displayName": "Order",
        "type": "options"
      },
      {
        "name": "code",
        "displayName": "Code",
        "type": "string"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "SplitOut": {
    "name": "SplitOut",
    "displayName": "SplitOut",
    "type": "n8n-nodes-base.SplitOut",
    "subtitle": "",
    "description": "Turn a list inside item(s) into separate items",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "splitOut",
        "displayName": "Split Out"
      },
      {
        "name": "fieldToSplitOut",
        "displayName": "Fields To Split Out",
        "type": "string",
        "default": "",
        "required": true,
        "placeholder": "Drag fields from the left or type their names"
      },
      {
        "name": "include",
        "displayName": "Include",
        "type": "options"
      },
      {
        "name": "fieldsToInclude",
        "displayName": "Fields To Include",
        "type": "string",
        "default": "",
        "placeholder": "e.g. email, name"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      },
      {
        "name": "destinationFieldName",
        "displayName": "Destination Field Name",
        "type": "string",
        "default": ""
      },
      {
        "name": "includeBinary",
        "displayName": "Include Binary",
        "type": "boolean"
      }
    ],
    "version": 1.0
  },
  "Summarize": {
    "name": "Summarize",
    "displayName": "Summarize",
    "type": "n8n-nodes-base.Summarize",
    "subtitle": "",
    "description": "Sum, count, max, etc. across items",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "summarize",
        "displayName": "Summarize"
      },
      {
        "name": "fieldsToSummarize",
        "displayName": "Fields to Summarize",
        "type": "fixedCollection",
        "placeholder": "Add Field"
      },
      {
        "name": "values",
        "displayName": "",
        "type": "options"
      },
      {
        "name": "field",
        "displayName": "Field",
        "type": "string",
        "default": "",
        "placeholder": "e.g. cost"
      },
      {
        "name": "includeEmpty",
        "displayName": "Include Empty Values",
        "type": "boolean"
      },
      {
        "name": "separateBy",
        "displayName": "Separator",
        "type": "options",
        "default": ","
      },
      {
        "name": "customSeparator",
        "displayName": "Custom Separator",
        "type": "string",
        "default": ""
      },
      {
        "name": "fieldsToSplitBy",
        "displayName": "Fields to Split By",
        "type": "string",
        "default": "",
        "placeholder": "e.g. country, city"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add option"
      },
      {
        "name": "continueIfFieldNotFound",
        "displayName": "Continue if Field Not Found",
        "type": "boolean"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      },
      {
        "name": "outputFormat",
        "displayName": "Output Format",
        "type": "options",
        "default": "separateItems"
      },
      {
        "name": "skipEmptySplitFields",
        "displayName": "Ignore items without valid fields to group by",
        "type": "boolean"
      }
    ]
  },
  "RemoveDuplicatesV1": {
    "name": "RemoveDuplicatesV1",
    "displayName": "RemoveDuplicatesV1",
    "type": "n8n-nodes-base.RemoveDuplicatesV1",
    "subtitle": "",
    "description": "Delete items with matching field values",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "removeDuplicates",
        "displayName": "Remove Duplicates"
      },
      {
        "name": "compare",
        "displayName": "Compare",
        "type": "options"
      },
      {
        "name": "fieldsToExclude",
        "displayName": "Fields To Exclude",
        "type": "string",
        "default": "",
        "placeholder": "e.g. email, name"
      },
      {
        "name": "fieldsToCompare",
        "displayName": "Fields To Compare",
        "type": "string",
        "default": "",
        "placeholder": "e.g. email, name"
      },
      {
        "name": "options",
        "displayName": "Options",
        "type": "collection",
        "placeholder": "Add Field"
      },
      {
        "name": "disableDotNotation",
        "displayName": "Disable Dot Notation",
        "type": "boolean"
      },
      {
        "name": "removeOtherFields",
        "displayName": "Remove Other Fields",
        "type": "boolean"
      }
    ]
  },
  "RemoveDuplicatesV2": {
    "name": "RemoveDuplicatesV2",
    "displayName": "RemoveDuplicatesV2",
    "type": "n8n-nodes-base.RemoveDuplicatesV2",
    "subtitle": "",
    "description": "Delete items with matching field values",
    "group": [
      "transform"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "removeDuplicates",
        "displayName": "Remove Duplicates"
      }
    ]
  },
  "TwitterV1": {
    "name": "TwitterV1",
    "displayName": "TwitterV1",
    "type": "n8n-nodes-base.TwitterV1",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Consume Twitter API",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'twitterOAuth1Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "TwitterV2": {
    "name": "TwitterV2",
    "displayName": "TwitterV2",
    "type": "n8n-nodes-base.TwitterV2",
    "subtitle": "={{$parameter[\"operation\"] + \":\" + $parameter[\"resource\"]}}",
    "description": "Post, like, and search tweets, send messages, search users, and add users to lists",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'twitterOAuth2Api', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 2.0
  },
  "VenafiTlsProtectDatacenter": {
    "name": "VenafiTlsProtectDatacenter",
    "displayName": "VenafiTlsProtectDatacenter",
    "type": "n8n-nodes-base.VenafiTlsProtectDatacenter",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Venafi TLS Protect Datacenter",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'venafiTlsProtectDatacenterApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "venafiTlsProtectDatacenter",
        "displayName": "Venafi TLS Protect Datacenter"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "VenafiTlsProtectDatacenterTrigger": {
    "name": "VenafiTlsProtectDatacenterTrigger",
    "displayName": "VenafiTlsProtectDatacenterTrigger",
    "type": "n8n-nodes-base.VenafiTlsProtectDatacenterTrigger",
    "subtitle": "={{$parameter[\"triggerOn\"]}}",
    "description": "Starts the workflow when Venafi events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'venafiTlsProtectDatacenterApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "venafiTlsProtectDatacenterTrigger",
        "displayName": "Venafi TLS Protect Datacenter Trigger"
      },
      {
        "name": "triggerOn",
        "displayName": "Trigger On",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "VenafiTlsProtectCloud": {
    "name": "VenafiTlsProtectCloud",
    "displayName": "VenafiTlsProtectCloud",
    "type": "n8n-nodes-base.VenafiTlsProtectCloud",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume Venafi TLS Protect Cloud API",
    "group": [
      "input"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'venafiTlsProtectCloudApi', required: true, },",
    "webhooks": [],
    "properties": [
      {
        "name": "venafiTlsProtectCloud",
        "displayName": "Venafi TLS Protect Cloud"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "VenafiTlsProtectCloudTrigger": {
    "name": "VenafiTlsProtectCloudTrigger",
    "displayName": "VenafiTlsProtectCloudTrigger",
    "type": "n8n-nodes-base.VenafiTlsProtectCloudTrigger",
    "subtitle": null,
    "description": "Starts the workflow when Venafi events occur",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'venafiTlsProtectCloudApi', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "venafiTlsProtectCloudTrigger",
        "displayName": "Venafi TLS Protect Cloud Trigger"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      },
      {
        "name": "triggerOn",
        "displayName": "Trigger On",
        "type": "multiOptions"
      }
    ],
    "version": 1.0
  },
  "WebflowTriggerV1": {
    "name": "WebflowTriggerV1",
    "displayName": "WebflowTriggerV1",
    "type": "n8n-nodes-base.WebflowTriggerV1",
    "subtitle": null,
    "description": "Handle Webflow events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'webflowApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "webflowTrigger",
        "displayName": "Webflow Trigger"
      },
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "site",
        "displayName": "Site Name or ID",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "required": true
      }
    ],
    "version": 1.0
  },
  "WebflowV1": {
    "name": "WebflowV1",
    "displayName": "WebflowV1",
    "type": "n8n-nodes-base.WebflowV1",
    "subtitle": "={{$parameter[\"operation\"] + \": \" + $parameter[\"resource\"]}}",
    "description": "Consume the Webflow API",
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "NodeConnectionTypes.Main",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'webflowApi', required: true, displayOptions: { show: { authentication: ['accessToken'",
    "webhooks": [],
    "properties": [
      {
        "name": "authentication",
        "displayName": "Authentication",
        "type": "options"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ],
    "version": 1.0
  },
  "WebflowTriggerV2": {
    "name": "WebflowTriggerV2",
    "displayName": "WebflowTriggerV2",
    "type": "n8n-nodes-base.WebflowTriggerV2",
    "subtitle": null,
    "description": "Handle Webflow events via webhooks",
    "group": [
      "trigger"
    ],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": "",
    "outputs": "NodeConnectionTypes.Main",
    "credentials": "{ name: 'webflowOAuth2Api', required: true, },",
    "webhooks": "{ name: 'default', httpMethod: 'POST', responseMode: 'onReceived', path: 'webhook', },",
    "properties": [
      {
        "name": "webflowTrigger",
        "displayName": "Webflow Trigger"
      },
      {
        "name": "site",
        "displayName": "Site Name or ID",
        "type": "options",
        "default": "",
        "required": true
      },
      {
        "name": "event",
        "displayName": "Event",
        "type": "options",
        "required": true
      }
    ],
    "version": 2.0
  },
  "WebflowV2": {
    "name": "WebflowV2",
    "displayName": "WebflowV2",
    "type": "n8n-nodes-base.WebflowV2",
    "subtitle": null,
    "description": null,
    "group": [],
    "defaultVersion": 1,
    "availableVersions": [],
    "inputs": [],
    "outputs": [],
    "credentials": [],
    "webhooks": [],
    "properties": [
      {
        "name": "webflow",
        "displayName": "Webflow"
      },
      {
        "name": "resource",
        "displayName": "Resource",
        "type": "options"
      }
    ]
  }
}